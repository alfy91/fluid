// List(Point) → List(Point)
fun close [x, ...xs] → concat [x, ...xs] [x];

// GraphicElement → Pair(number, number)
fun dimensions {
   PathStroke(ps) → 
      pathDimensions (map (fun Point(x, y) → (x, y)) ps);
   RectFill(ps) →
      pathDimensions (map (fun Point(x, y) → (x, y)) ps);
   Graphic(gs) → 
      pathDimensions (map dimensions gs);
   Transform(Scale(x, y), g) → 
      match dimensions g as (w, h) → (w * x, h * y);
   Transform(Translate(x, y), g) → 
      match dimensions g as (w, h) → (w + x, h + y);
   Transform(Transpose, g) → 
      swap (dimensions g)
};

// GraphicsElement → number
fun height g → snd (dimensions g);

// LinearTransform → LinearTransform
fun invert {
   Scale(x, y) → Scale(1 / x, 1 / y);           // unfortunately not a true inverse..
   Translate(x, y) → Translate(0 - x, 0 - y);   // no unary negation yet
   Transpose → Transpose                        // self-involutive
};

// List(Point) → LinearTransform → Graphic
fun linePlot t ps →
   let points = map (fun Point(x, y) → translate x y (Transform(invert t, plotPoint 0.5))) ps in 
   Transform(t, Graphic([PathStroke(ps), ...points]));

// List(Pair(number, number)) → Pair(number, number)
fun pathDimensions ps → 
   match unzip ps as (xs, ys) → (max xs, max ys);

// (0,0)-based cross used to render points of a line plot.
// number → Graphic
fun plotPoint radius → 
   Graphic([
      PathStroke([Point(0 - radius, 0 - radius), Point(radius, radius)]),
      PathStroke([Point(0 - radius, radius), Point(radius, 0 - radius)])
   ]);

// Rect → List(Point)
fun rectPath Rect(w, h) →
   [Point(0, 0), Point(w, 0), Point(w, h), Point(0, h)];

// Rect → Graphic
fun renderRect r → 
   let ps = rectPath r in Graphic([RectFill(ps), PathStroke(close(ps))]);

fun scale x y g →
   Transform(Scale(x, y), g);

// number → List(GraphicsElement) → List(GraphicsElement)
fun spaceRight sep gs →
   zipW (fun (x, g) → translate x 0 g) (iterate (length gs) (fun x → x + sep) 0) gs;

// Unlike spaceRight, produces a nested structure.
// List(GraphicsElement) → Graphic
fun stackRight gs →
   foldr (fun (g, g') → Graphic([g, translate (width g) 0 g'])) Graphic([]) gs;

fun translate x y g →
   Transform(Translate(x, y), g);

fun transpose g →
   Transform(Transpose, g);

// GraphicsElement → number
fun width g → fst (dimensions g);

// Negatively offset from (0, 0) by margin; client code responsible for translating into positive space (if desired).
// number → number → number → GraphicElement
fun x_axis margin n width tickHeight →
   let tick = PathStroke([Point(0, 0), Point(0, 0 - tickHeight)]) in
   let ticks = fun n → spaceRight width (repeat n tick) in
   let line = PathStroke([Point(0, 0), Point(n * width, 0)]) in
   translate 0 (0 - margin) Graphic([line, ...ticks n])
