// Int → List(GraphicsElement) → List(GraphicsElement)
fun spaceRight sep gs →
   zipW (fun (x, g) → Translate(x, 0, g)) (iterate (length gs) (fun x → x + sep) 0) gs;

// Rect → List(Point)
fun rectPath Rect(w, h) → [Point(0, 0), Point(w, 0), Point(w, h), Point(0, h)];

// List(Point) → List(Point)
fun close [x, ...xs] → append [x, ...xs] [x];

// Rect → Graphic
fun renderRect r → 
   let ps = rectPath r in Graphic([RectFill(ps), PathStroke(close(ps))]);

// Graphic → Pair(number, number)
fun dimensions {
// PathStroke(ps) → ;
// RectFill(ps) → ;
   Scale(x, y, g) → match dimensions elem as (w, h) → (w * x, h * y);
   Translate(x, y, g) → match dimensions elem as (w, h) → (w + x, h + y);
   Transpose(elem) → swap (dimensions elem);
   Graphic(gs) → match unzip (map dimensions gs) as (ws, hs) → (max ws, max hs)
};

// number → number → number → GraphicElement
fun x_axis margin n width → 
   let tick = PathStroke([Point(0, 0), Point(0, -2)]) in
   let ticks = fun n → spaceRight width (repeat n tick) in
   let line = PathStroke([Point(0, 0), Point(n * width, 0)]) in
   Translate(0, 0 - margin, Graphic([line, ...ticks n]))
