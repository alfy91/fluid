let
   data = Cons((2001, 15), Cons((2002, 8), Cons((2005, 22), Cons((2007, 9), Nil))))
in
let rect_get_x = fun Rect(x, y, w, h) → x in
let rect_put_x = fun x → fun Rect(_, y, w, h) → Rect(x, y, w, h) in
let rect_get_w = fun Rect(x, y, w, h) → w in
letrec 
   fun map f → fun {
      Nil → Nil;
      Cons(x, xs) → Cons(f x, map f xs)
   }
   fun zipW op → fun {
      Nil → fun ys → Nil;
      Cons(x, xs) → fun {
         Nil → Nil;
         Cons(y, ys) → Cons(op(x, y), zipW op xs ys)
      }
   }
   fun iterate f → fun x →
      Cons(x, map f (iterate f x))
in
let
   rectAsPoly = fun Rect(x, y, w, h) →
      Cons(Point(x, y), Cons(Point(x + w, y), Cons(Point(x + w, y + h), Cons(Point(x, y + h), Nil))))
in
let
   // discard x coordinates other than the first
   stackRight = fun sep → fun get_x → fun put_x → fun get_w →
      letrec 
         fun stackRight' {
            Nil → Nil;
            Cons(shape, Nil) → Cons(shape, Nil);
            Cons(shape, Cons(shape2, shapes)) → 
               Cons(shape, stackRight' Cons(put_x ((get_x shape) + (get_w shape) + sep) shape2, shapes))
         } 
      in 
      stackRight'
in
let rects = (map (fun (year, age) → Rect(0, 0, 5, age)) data) in
let rects' = 
   zipW (fun (x, rect) → rect_put_x x rect) (iterate (fun x → x + 1) 0) rects
   // stackRight 1 rect_get_x rect_put_x rect_get_w rects
in 
   // list of polygons, where each "polygon" is a list of points
   map rectAsPoly rects'
