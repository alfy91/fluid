let
   data = Cons((2001, 15), Cons((2002, 8), Cons((2005, 22), Cons((2007, 9), Nil))))
in
let point_put_x = fun x Point(_, y) → Point(x, y) in
let rect_get_x = fun Rect(x, y, w, h) → x in
let rect_put_x = fun x Rect(_, y, w, h) → Rect(x, y, w, h) in
let rect_get_w = fun Rect(x, y, w, h) → w in
letrec 
   map = fun f {
      Nil → Nil;
      Cons(x, xs) → Cons(f x, map f xs)
   };
   zipW = fun op {
      Nil ys → Nil;
      Cons(x, xs) {
         Nil → Nil;
         Cons(y, ys) → Cons(op(x, y), zipW op xs ys)
      }
   };
   iterate = fun f x → Cons(x, map f (iterate f x));
   repeat = fun x → Cons(x, repeat x);
   take = fun n xs → match (n == 0, xs) as {
      (True, xs) → Nil;
      (False, Nil) → Nil;
      (False, Cons(x, xs)) → Cons(x, take (n - 1) xs)
   };
   length = fun {
      Nil → 0;
      Cons(x, xs) → 1 + length xs
   }
in
let
   rectAsPoly = fun Rect(x, y, w, h) →
      Cons(Point(x, y), Cons(Point(x + w, y), Cons(Point(x + w, y + h), Cons(Point(x, y + h), Nil))))
in
let
   // discard x coordinates other than the first
   stackRight = fun sep get_x put_x get_w →
      letrec 
         stackRight' = fun {
            Nil → Nil;
            Cons(shape, Nil) → Cons(shape, Nil);
            Cons(shape, Cons(shape2, shapes)) → 
               Cons(shape, stackRight' Cons(put_x ((get_x shape) + (get_w shape) + sep) shape2, shapes))
         } 
      in 
      stackRight'
in
let
   // drop all x coordinates
   spaceRight = fun sep put_x →
      zipW (fun (x, shape) → put_x x shape) (iterate (fun x → x + sep) 0)
in
let rects = map (fun (year, age) → Rect(0, 0, 5, age)) data in
let sep = 6 in
let rects' = spaceRight sep rect_put_x rects in
let axis_x = spaceRight sep 
   (fun x' → map (point_put_x x')) 
   (repeat (Cons(Point(0, 0), Cons(Point(0, 2), Nil))))
in 
   // list of polygons, where each "polygon" is a list of points
   (
      map rectAsPoly rects', 
      take 4 axis_x
   )
