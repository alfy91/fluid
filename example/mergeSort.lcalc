letrec
   fun split {
      Nil → ([], []);
      Cons(x, xs') →
         match split xs' as 
            (ys, zs) → ([x, ...zs], ys)
   };

   fun merge xs ys →
      match (xs, ys) as {
         (Nil, ys') → ys;
         (Cons(x, xs'), Nil) → xs;
         (Cons(x, xs'), Cons(y, ys')) →
            match x < y as {
               True → [x, ...merge xs' ys];
               False → [y, ...merge xs ys']
            }
      };

   fun mergesort xs →
      match xs as {
         Nil → xs;
         Cons(x, Nil) → xs;
         Cons(x, Cons(y, xs')) →
            match split xs as 
               (ys, zs) → merge (mergesort ys) (mergesort zs)
      }
in
mergesort [1, 2, 3]
