
let range1 (m, n) = [m..n];
    range2 ((m1, n1), (m2, n2)) = 
      [ (i1, i2) | i1 <- range1 (m1, m2), i2 <- range1 (n1, n2)];

let bound (upper) x =
    if x > upper then upper else
    if x < 1 then 1 else x;

let quot' a b c = if a - b > 0 then quot' (a - b) b (c + 1) else c;
    quot a b    = quot' a b 0;

let conv_extend image filter =
    let (mz, nz)     = dims image;
        (iz, jz)     = dims filter;
        half_width   = quot iz 2;
        half_height  = quot jz 2;
        area         = iz * jz
    in  [| (sum [ image!(img_x, img_y) * filter!(fil_x, fil_y)
                    | (x, y) <- range2 ((0, 0), (iz - 1, jz - 1)),
                      let fil_x = iz - x ,
                      let fil_y = jz - y ,
                      let img_x = c + x - half_width,
                      let img_y = d + y - half_height,
                        img_y  >= 1, img_y <= nz,
                        img_x  >= 1, img_x <= mz 
                      ]) / area
             | (c, d) in (mz, nz) |];

let nth2 i j xs = nth (i - 1) (nth (j - 1) xs);
let xs = [[0, 2, 4],
          [3, 7, 1],
          [2, 5, 2]];
    ys = [| nth2 i j xs | (i, j) in (3, 3) |]
in  conv_extend ys ys
