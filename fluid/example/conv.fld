let zero a az = a;
    wrap a n  = let b = mod a n in if b == 0 then n else b;
    extend x upper = if x > upper then upper else if x < 1 then 1 else x;

let conv image filter method =
    let (mz, nz)     = dims image;
        (iz, jz)     = dims filter;
        half_width   = quot jz 2;
        half_height  = quot iz 2;
        area         = iz * jz
    in  [| (sum [ image!(img_y, img_x) * filter!(fil_y, fil_x)
                    | (y, x) <- range ((0, 0), (iz - 1, jz - 1)),
                      let fil_x = jz - x ,
                      let fil_y = iz - y ,
                      let img_x = method (d + x - half_width) nz,
                      let img_y = method (c + y - half_height) mz,
                        img_y  >= 1, img_y <= mz,
                        img_x  >= 1, img_x <= nz
                      ]) / area
             | (c, d) in (mz, nz) |];

let nth2 i j xss = nth (j - 1) (nth (i - 1) xss);
let fil_list = [[0, 2, 4],
                [3, 7, 1],
                [2, 5, 2]];
    fil_arr  = [| nth2 i j fil_list | (i, j) in (3, 3) |];
    img_list = [[15, 13, 6 , 9, 16],
                [12, 5 , 15, 4, 13],
                [14, 9 , 20, 8, 1 ],
                [4 , 10, 3 , 7, 19],
                [3 , 11, 15, 2, 9 ]];
    img_arr  = [| nth2 i j img_list | (i, j) in (5, 5) |]
in  conv img_arr fil_arr extend