let mean l = (sum l) / (length l);
-- window = size of lookahead/lookback ie (n - 1) / 2

let mAvg l window = 
    let startInd = window;
        endInd = (length l) - window
    in [ mean (slice (ind - window) (ind + window + 1) l) | ind <- [startInd..endInd] ];

let mAvg' l window = 
    [ mean (slice (ind - window) (ind + window + 1) l) | ind <- [0..(length l)] ];

let zipPairs xs ys = zipWith (fun x y -> { x : x, y : y}) xs ys;

let getXs records = 
    map (fun rec -> rec.x) records; 

let getYs records = 
    map (fun rec -> rec.y) records;

let mAvgChop l window = 
    let start = window;
        end = (length l) - window;
        indices = slice start end (getXs l);
        avgs = mAvg (getYs l) window
    in zipPairs indices avgs;

let mAvgShrink l window =
    let indices = getXs l;
        avgs = mAvg' (getYs l) window
    in zipPairs indices avgs;

let avgs = mAvgChop points 1;
    avgs' = mAvgShrink points 1
in MultiView {|
    "line-chart-1" :=
        LineChart {
            caption: "Dummy Linechart",
            plots: [ LinePlot { name: "Dummy", data: points}, LinePlot { name: "Avg", data: avgs} ] 
        },
    "line-chart-2" :=
        LineChart {
            caption: "Dummy Linechart 2",
            plots: [ LinePlot { name: "Avg'", data: avgs'} ]
        }
|}
