
let bound (upper) x =
    if x > upper then upper else
    if x < 0 then 0 else x;

let quot' a b c = if a - b > 0 then quot' (a - b) b (c + 1) else c;
    quot a b    = quot' a b 0;

let conv_extend image filter =
    let (mz, nz)     = size image;
        (iz, jz)     = size filter;
        half_width   = quot jz 2;
        half_height  = quot iz 2;
        area         = iz * jz
    in  [| sum [ image!(image_y, image_x) * filter!(filter_y, filter_x)
                 |  (y, x) <- range (size filter),
                    let filter_y = iz - y,
                    let filter_x = jz - x,
                    let image_y  = bound mz (c + y - half_height),
                    let image_x  = bound nz (d + x - half_width) ]
           / area
         | (c, d) in size image |];
