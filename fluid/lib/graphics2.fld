// Want some kind of typeclass mechanism plus record accessors/updaters.
// Num → GraphicsElement → GraphicsElement
let set_x = fun x {
   Rect(_, y, w, h, fill) → Rect(x, y, w, h, fill);
   Group(_, y, w, h, scale, gs) → Group(x, y, w, h, scale, gs)
};

// ((Num, Num), (Num, Num)) → (Num, Num)
let dimensions2 = fun ((x1, y1), (x2, y2)) →
   (max2 (x1, x2), max2 (y1, y2));

// A polyline has an implicit coordinate of (0, 0), relative to which its points are located.
// GraphicsElement → (Num, Num)
let dimensions = fun {
   Rect(_, _, w, h, _) → (w, h);
   Group(_, _, w, h, _, _) → (w, h);
   Polyline(scale, ps, _) → 
      match foldl dimensions2 (0, 0) ps as
      (w, h) → match scale as {
         None → (w, h);
         Some(Scale(x, y)) → (w * x, h * y)
      }
};

// GraphicsElement → Num
let width = compose fst dimensions;

let set_width = fun w {
   Rect(x, y, _, h, fill) → Rect(x, y, w, h, fill);
   Group(x, y, _, h, scale, gs) → Group(x, y, w, h, scale, gs)
};

// GraphicsElement → Num
let height = compose snd dimensions;

// Num → Num → List GraphicsElement → List GraphicsElement
let spaceRight = fun z sep gs →
   zipWith (uncurry set_x) (iterate (length gs) (fun x → x + sep) z) gs;

// Bake colour decisions into the library for the time being.
// List Str
let colours = [
   "RosyBrown",
   "HotPink",
   "PaleGreen",
   "Aquamarine",
   "Plum",
   "LightCoral",
   "Navy"
];

// Compositionality principle: child coords/dimensions are always expressed directly using parent reference 
// frame, to avoid depending on content of child.
// Num → GraphicsElement → GraphicsElement
let scaleToWidth = fun w {
   Rect(x, y, _, h, fill) → Rect(x, y, w, h, fill);
   Group(x, y, w0, h, scale, gs) → Group(x, y, w, h, Some(Scale(w / w0, 1)), gs);
   Polyline(scale, ps, stroke) → Polyline(Some(Scale(w / max (map fst ps), 1)), ps, stroke)
};

// List GraphicsElement → Num → GraphicsElement
let stackRight = fun sep gs →
   Group(0, 0, length gs, max (map height gs), None, map (scaleToWidth (1 - sep)) (spaceRight (sep / 2) 1 gs));

// Num → List (a, Num) → GraphicsElement
let barChart = fun sep →
   compose 
      (stackRight sep)
      ((zipWith (fun (col, (_, n)) → Rect(0, 0, 1, n, col))) colours);

// List (a, Num) → GraphicsElement
let stackedBar = fun ns →
   let subtotals = scanl1 (fun (x, y) → x + y) 0 (map snd ns);
   let dims = zip [0, ...subtotals] (map (fun (x, y) → y - x) (zip [0, ...subtotals] subtotals));
   let rects = map 
      (fun ((y, height), col) → Rect(0, y, 1, height, col))
      (zip dims colours)
   in Group(0, 0, 1, last subtotals, None, rects);

// The argument ks must be subset of the k2 data keys.
// Num → Num → List k2 → List (Num, List (k2, Num)) → GraphicsElement
let multiPlot = fun x_start x_end ks data →
   // Str → Str → (GraphicsElement, Num)
   let plot = fun k colour →
      // List (Num, Num)
      let ps = map (second (lookup k)) data in
      (Polyline(None, map (first (fun x → x - x_start)) ps, colour), max (map snd ps));
   let lines = zipWith (uncurry plot) ks colours in
   Group(0, 0, x_end - x_start, max (map snd lines), None, map fst lines)
