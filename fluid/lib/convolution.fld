let zero a _ = a;
    wrap a n = let b = a `mod` n in if b == 0 then n else b;
    extend x upper = if x > upper then upper else if x < 1 then 1 else x;
    nth2 i j xss = nth (j - 1) (nth (i - 1) xss);

let convolve image filter method =
    let ((m, n), (i, j)) = (dims image, dims filter);
        (half_i, half_j) = (i `quot` 2, j `quot` 2);
        area             = i * j
    in  [| (sum [ image!(x, y) * filter!(i' + 1, j' + 1)
                | (i', j') <- range ((0, 0), (i - 1, j - 1)),
                  let y = method (n' + j' - half_j) n,
                  let x = method (m' + i' - half_i) m,
                  x >= 1, x <= m, y >= 1, y <= n ]) `quot` area
         | (m', n') in (m, n) |];
