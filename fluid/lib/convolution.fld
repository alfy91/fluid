let zero a _ = a;
    wrap a n = let b = mod a n in if b == 0 then n else b;
    extend x upper = if x > upper then upper else if x < 1 then 1 else x;
    nth2 i j xss = nth (j - 1) (nth (i - 1) xss);

let conv image filter method =
    let (mz, nz)     = dims image;
        (iz, jz)     = dims filter;
        half_width   = quot jz 2;
        half_height  = quot iz 2;
        area         = iz * jz
    in  [| (sum [ image!(img_y, img_x) * filter!(fil_y, fil_x)
                    | (y, x) <- range ((0, 0), (iz - 1, jz - 1)),
                        let fil_x = jz - x ,
                        let fil_y = iz - y ,
                        let img_x = method (d + x - half_width) nz,
                        let img_y = method (c + y - half_height) mz,
                        img_y >= 1, img_y <= mz,
                        img_x >= 1, img_x <= nz
                        ]) / area
                | (c, d) in (mz, nz) |];
