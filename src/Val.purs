module Val where

import Prelude hiding (absurd, top)
import Data.List (List)
import Data.Maybe (Maybe(..))
import Bindings (Bindings)
import DataType (Ctr)
import Expr (Elim, RecDefs)
import Lattice (class BoundedSlices, class JoinSemilattice, class Slices, ùîπ, (‚à®), definedJoin, maybeJoin)
import Util (Endo, type (√ó), type (+), (‚âü), absurd, error)

-- one constructor for each PureScript type that appears in an exported operator signature
data Primitive =
   ValOp (Val ùîπ -> Val ùîπ) |
   IntOp (Int -> Val ùîπ) |
   NumberOp (Number -> Val ùîπ) |
   IntOrNumberOp (Int + Number -> Val ùîπ) |
   StringOp (String -> Val ùîπ) |
   IntOrNumberOrStringOp (Int + Number + String -> Val ùîπ)

-- Only annotate first-order data for now.
data Val a =
   Hole |
   Int a Int |
   Float a Number |
   Str a String |
   Constr a Ctr (List (Val a)) |
   Matrix a (Array (Array (Val a))) (Int √ó Int) |
   Closure (Env a) (RecDefs a) (Elim a) |
   Primitive Primitive

-- The annotation on a value of primitive type.
getŒ± :: Val ùîπ -> ùîπ
getŒ± Hole         = false
getŒ± (Int Œ± _)    = Œ±
getŒ± (Float Œ± _)  = Œ±
getŒ± (Str Œ± _)    = Œ±
getŒ± _            = error absurd

-- Set the annotation on a value of primitive type, which may not be a hole.
setŒ± :: ùîπ -> Endo (Val ùîπ)
setŒ± Œ± (Int _ n)     = Int Œ± n
setŒ± Œ± (Float _ n)   = Float Œ± n
setŒ± Œ± (Str _ str)   = Str Œ± str
setŒ± _ _             = error absurd

type Env = Bindings Val

-- ======================
-- boilerplate
-- ======================
derive instance functorVal :: Functor Val

instance joinSemilatticeVal :: JoinSemilattice a => JoinSemilattice (Val a) where
   join = definedJoin

instance slicesVal :: JoinSemilattice a => Slices (Val a) where
   maybeJoin Hole v                                = pure v
   maybeJoin v Hole                                = pure v
   maybeJoin (Int Œ± n) (Int Œ±' n')                 = Int (Œ± ‚à® Œ±') <$> n ‚âü n'
   maybeJoin (Float Œ± n) (Float Œ±' n')             = Float (Œ± ‚à® Œ±') <$> n ‚âü n'
   maybeJoin (Str Œ± str) (Str Œ±' str')             = Str (Œ± ‚à® Œ±') <$> str ‚âü str'
   maybeJoin (Constr Œ± c vs) (Constr Œ±' c' us)     = Constr (Œ± ‚à® Œ±') <$> c ‚âü c' <*> maybeJoin vs us
   maybeJoin (Matrix Œ± vs xy) (Matrix Œ±' vs' xy')  = Matrix (Œ± ‚à® Œ±') <$> (maybeJoin vs vs') <*> xy ‚âü xy'
   maybeJoin (Closure œÅ Œ¥ œÉ) (Closure œÅ' Œ¥' œÉ')    = Closure <$> maybeJoin œÅ œÅ' <*> maybeJoin Œ¥ Œ¥' <*> maybeJoin œÉ œÉ'
   maybeJoin (Primitive œÜ) (Primitive œÜ')          = Primitive <$> pure œÜ -- should require œÜ == œÜ'
   maybeJoin _ _                                   = Nothing

instance boundedSlices :: JoinSemilattice a => BoundedSlices (Val a) where
   botOf = const Hole
