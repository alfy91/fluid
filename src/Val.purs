module Val where

import Prelude hiding (absurd, append)
import Control.Apply (lift2)
import Data.List (List(..), (:))
import Data.Map (Map)
import Data.Map (lookup) as M
import Data.Set (Set, empty, fromFoldable, intersection, member, singleton, toUnfoldable, union)
import Foreign.Object (filterKeys, lookup, unionWith)
import Foreign.Object (keys) as O
import Bindings (Var)
import Dict (Dict, disjointUnion, get)
import Dict (difference)
import DataType (Ctr)
import Expr (Elim, RecDefs, fv)
import Lattice (class Expandable, class JoinSemilattice, class Slices, ùîπ, (‚à®), definedJoin, expand, maybeJoin, neg)
import Util (Endo, MayFail, type (√ó), (√ó), (‚âû), (‚âú), (!), error, orElse, report, unsafeUpdateAt)

type Op a = a √ó ùîπ -> Val ùîπ

data Val a =
   Int a Int |
   Float a Number |
   Str a String |
   Record a (Dict (Val a)) |                 -- always saturated
   Constr a Ctr (List (Val a)) |             -- potentially unsaturated
   Matrix a (MatrixRep a) |
   Primitive PrimOp (List (Val a)) |         -- never saturated
   Closure a (Env a) (RecDefs a) (Elim a)

-- op_fwd will be provided with original arguments, op_bwd with original output and arguments
newtype PrimOp = PrimOp {
   arity :: Int,
   op :: List (Val ùîπ) -> Val ùîπ,
   op_fwd :: List (Val ùîπ) -> Val ùîπ,
   op_bwd :: Val ùîπ -> Endo (List (Val ùîπ))
}

-- Environments.
type Env a = Dict (Val a)

lookup' :: forall a . Var -> Dict a -> MayFail a
lookup' x Œ≥ = lookup x Œ≥ # (orElse $ "variable " <> x <> " not found")

lookup'' :: forall a . Var -> Map Var a -> MayFail a
lookup'' x Œ≥ = M.lookup x Œ≥ # (orElse $ "variable " <> x <> " not found")

-- Want a monoid instance but needs a newtype
append :: forall a . Env a -> Endo (Env a)
append = unionWith (const identity)

infixl 5 append as <+>

append_inv :: forall a . Set Var -> Env a -> Env a √ó Env a
append_inv xs Œ≥ = filterKeys (_ `not <<< member` xs) Œ≥ √ó restrict Œ≥ xs

restrict :: forall a . Dict a -> Set Var -> Dict a
restrict Œ≥ xs = filterKeys (_ `member` xs) Œ≥

reaches :: forall a . RecDefs a -> Endo (Set Var)
reaches œÅ xs = go (toUnfoldable xs) empty
   where
   dom_œÅ = fromFoldable $ O.keys œÅ
   go :: List Var -> Endo (Set Var)
   go Nil acc                          = acc
   go (x : xs') acc | x `member` acc   = go xs' acc
   go (x : xs') acc | otherwise        =
      let œÉ = get x œÅ in
      go (toUnfoldable (fv œÉ `intersection` dom_œÅ) <> xs')
         (singleton x `union` acc)

for :: forall a . RecDefs a -> Elim a -> RecDefs a
for œÅ œÉ = œÅ `restrict` reaches œÅ (fv œÉ `intersection` (fromFoldable $ O.keys œÅ))

weakJoin :: forall a . Slices a => Dict a -> Endo (Dict a)
weakJoin m m' =
   let dom_m √ó dom_m' = fromFoldable (O.keys m) √ó fromFoldable (O.keys m') :: Set Var √ó Set Var in
   (m `difference` m')
   `disjointUnion`
   (m `restrict` (dom_m `intersection` dom_m') ‚à® m' `restrict` (dom_m `intersection` dom_m'))
   `disjointUnion`
   (m' `difference` m)

infixl 6 weakJoin as ‚à®‚à®

-- Matrices.
type Array2 a = Array (Array a)
type MatrixRep a = Array2 (Val a) √ó (Int √ó a) √ó (Int √ó a)

updateMatrix :: Int -> Int -> Endo (Val ùîπ) -> Endo (MatrixRep ùîπ)
updateMatrix i j Œ¥v (vss √ó h √ó w) =
   let vs_i = vss!(i - 1)
       v_j = vs_i!(j - 1)
       vss' = unsafeUpdateAt (i - 1) (unsafeUpdateAt (j - 1) (Œ¥v v_j) vs_i) vss
   in vss' √ó h √ó w

-- ======================
-- boilerplate
-- ======================
instance Functor Val where
   map f (Int Œ± n)                  = Int (f Œ±) n
   map f (Float Œ± n)                = Float (f Œ±) n
   map f (Str Œ± str)                = Str (f Œ±) str
   map f (Record Œ± xvs)             = Record (f Œ±) (map f <$> xvs)
   map f (Constr Œ± c vs)            = Constr (f Œ±) c (map f <$> vs)
   -- PureScript can't derive this case
   map f (Matrix Œ± (r √ó iŒ± √ó jŒ≤))   = Matrix (f Œ±) ((map (map f) <$> r) √ó (f <$> iŒ±) √ó (f <$> jŒ≤))
   map f (Primitive œÜ vs)           = Primitive œÜ ((map f) <$> vs)
   map f (Closure Œ± Œ≥ œÅ œÉ)          = Closure (f Œ±) (map f <$> Œ≥) (map f <$> œÅ) (f <$> œÉ)

instance JoinSemilattice (Val Boolean) where
   join = definedJoin
   neg = (<$>) neg

instance Slices (Val Boolean) where
   maybeJoin (Int Œ± n) (Int Œ±' n')                    = Int (Œ± ‚à® Œ±') <$> (n ‚âû n')
   maybeJoin (Float Œ± n) (Float Œ±' n')                = Float (Œ± ‚à® Œ±') <$> (n ‚âû n')
   maybeJoin (Str Œ± str) (Str Œ±' str')                = Str (Œ± ‚à® Œ±') <$> (str ‚âû str')
   maybeJoin (Record Œ± xvs) (Record Œ±' xvs')          = Record (Œ± ‚à® Œ±') <$> maybeJoin xvs xvs'
   maybeJoin (Constr Œ± c vs) (Constr Œ±' c' us)        = Constr (Œ± ‚à® Œ±') <$> (c ‚âû c') <*> maybeJoin vs us
   maybeJoin (Matrix Œ± (vss √ó (i √ó Œ≤i) √ó (j √ó Œ≤j))) (Matrix Œ±' (vss' √ó (i' √ó Œ≤i') √ó (j' √ó Œ≤j'))) =
      Matrix (Œ± ‚à® Œ±') <$> (
         maybeJoin vss vss' `lift2 (√ó)`
         ((flip (√ó) (Œ≤i ‚à® Œ≤i')) <$> (i ‚âû i')) `lift2 (√ó)`
         ((flip (√ó) (Œ≤j ‚à® Œ≤j')) <$> (j ‚âû j'))
      )
   maybeJoin (Closure Œ± Œ≥ œÅ œÉ) (Closure Œ±' Œ≥' œÅ' œÉ')  =
      Closure (Œ± ‚à® Œ±') <$> maybeJoin Œ≥ Œ≥' <*> maybeJoin œÅ œÅ' <*> maybeJoin œÉ œÉ'
   maybeJoin (Primitive œÜ vs) (Primitive _ vs')       = Primitive œÜ <$> maybeJoin vs vs' -- TODO: require œÜ == œÜ'
   maybeJoin _ _                                      = report "Incompatible values"

instance Expandable (Val Boolean) where
   expand (Int Œ± n) (Int _ n')              = Int Œ± (n ‚âú n')
   expand (Float Œ± n) (Float _ n')          = Float Œ± (n ‚âú n')
   expand (Str Œ± str) (Str _ str')          = Str Œ± (str ‚âú str')
   expand (Record Œ± xvs) (Record _ xvs')    = Record Œ± (expand xvs xvs')
   expand (Constr Œ± c vs) (Constr _ c' us)  = Constr Œ± (c ‚âú c') (expand vs us)
   expand (Matrix Œ± (vss √ó (i √ó Œ≤i) √ó (j √ó Œ≤j))) (Matrix _ (vss' √ó (i' √ó _) √ó (j' √ó _))) =
      Matrix Œ± (expand vss vss' √ó ((i ‚âú i') √ó Œ≤i) √ó ((j ‚âú j') √ó Œ≤j))
   expand (Closure Œ± Œ≥ œÅ œÉ) (Closure _ Œ≥' œÅ' œÉ') =
      Closure Œ± (expand Œ≥ Œ≥') (expand œÅ œÅ') (expand œÉ œÉ')
   expand (Primitive œÜ vs) (Primitive _ vs') = Primitive œÜ (expand vs vs') -- TODO: require œÜ == œÜ'
   expand _ _ = error "Incompatible values"
