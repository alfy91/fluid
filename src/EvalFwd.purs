module EvalFwd where

import Prelude hiding (absurd)
import Data.Array (fromFoldable) as A
import Data.List (List(..), (:), length, range, singleton, zip)
import Data.List.NonEmpty (singleton) as NE
import Data.Map (empty, insert)
import Data.Map (singleton) as M
import Data.Profunctor.Strong ((***), (&&&), first, second)
import Data.Set (union)
import Bindings (Bindings, (‚Ü¶), find, key, val)
import Expl (Expl(..), Match(..), VarDef(..)) as T
import Expl (Expl, Match)
import Expr (Cont, Elim(..), Expr(..), RecDefs, VarDef(..), asElim, asExpr, for, fv)
import Lattice (ùîπ, (‚àß))
import Primitive (match_fwd) as P
import Util (type (√ó), (√ó), (!), absurd, assert, error, mustLookup, successful)
import Util.SnocList (SnocList(..), (:-))
import Util.SnocList (unzip, zip, zipWith) as S
import Val (Env2, PrimOp(..), SingletonEnv, Val, concat, disjUnion, lookup', restrict)
import Val (Val(..)) as V

matchFwd :: Val ùîπ -> Elim ùîπ -> Match ùîπ -> SingletonEnv ùîπ √ó Cont ùîπ √ó ùîπ
matchFwd _ (ElimVar _ Œ∫) (T.MatchVarAnon _) = empty √ó Œ∫ √ó true
matchFwd v (ElimVar _ Œ∫) (T.MatchVar x) = M.singleton x v √ó Œ∫ √ó true
matchFwd (V.Constr Œ± _ vs) (ElimConstr m) (T.MatchConstr c ws _) =
   second (_ ‚àß Œ±) (matchArgsFwd vs (mustLookup c m) ws)
matchFwd (V.Record Œ± xvs) (ElimRecord _ Œ∫) (T.MatchRecord xws) =
   second (_ ‚àß Œ±) (matchRecordFwd xvs Œ∫ xws)
matchFwd _ _ _ = error absurd

matchArgsFwd :: List (Val ùîπ) -> Cont ùîπ -> List (Match ùîπ) -> SingletonEnv ùîπ √ó Cont ùîπ √ó ùîπ
matchArgsFwd Nil Œ∫ Nil = empty √ó Œ∫ √ó true
matchArgsFwd (v : vs) œÉ (w : ws) =
   let œÅ √ó Œ∫ √ó Œ± = matchFwd v (asElim œÉ) w in
   (first (œÅ `disjUnion` _) *** (_ ‚àß Œ±)) (matchArgsFwd vs Œ∫ ws)
matchArgsFwd _ _ _ = error absurd

matchRecordFwd :: Bindings (Val ùîπ) -> Cont ùîπ -> Bindings (Match ùîπ) -> SingletonEnv ùîπ √ó Cont ùîπ √ó ùîπ
matchRecordFwd Lin Œ∫ Lin = empty √ó Œ∫ √ó true
matchRecordFwd (xvs :- x ‚Ü¶ v) œÉ (xws :- x' ‚Ü¶ w) | x == x' =
   let œÅ √ó œÉ' √ó Œ± = matchRecordFwd xvs œÉ xws in
   (first (œÅ `disjUnion` _) *** (_ ‚àß Œ±)) (matchFwd v (asElim œÉ') w)
matchRecordFwd _ _ _ = error absurd

closeDefsFwd :: Env2 ùîπ -> RecDefs ùîπ -> ùîπ -> RecDefs ùîπ -> SingletonEnv ùîπ
closeDefsFwd _ _ _ Lin = empty
closeDefsFwd Œ≥ œÅ0 Œ± (œÅ :- f ‚Ü¶ œÉ) =
   let xs = fv (œÅ0 `for` œÉ) `union` fv œÉ
   in closeDefsFwd Œ≥ œÅ0 Œ± œÅ # insert f (V.Closure Œ± (Œ≥ `restrict` xs) œÅ0 œÉ)

evalFwd :: Env2 ùîπ -> Expr ùîπ -> ùîπ -> Expl ùîπ -> Val ùîπ
evalFwd Œ≥ (Var _) _ (T.Var _ x) = successful (lookup' x Œ≥)
evalFwd Œ≥ (Op _) _ (T.Op _ op) = successful (lookup' op Œ≥)
evalFwd _ (Int Œ± _) Œ±' (T.Int _ n) = V.Int (Œ± ‚àß Œ±') n
evalFwd _ (Float Œ± _) Œ±' (T.Float _ n) = V.Float (Œ± ‚àß Œ±') n
evalFwd _ (Str Œ± _) Œ±' (T.Str _ str) = V.Str (Œ± ‚àß Œ±') str
evalFwd Œ≥ (Record Œ± xes) Œ±' (T.Record _ xts) =
   let xs √ó ts = xts <#> (key &&& val) # S.unzip
       es = xes <#> val
       vs = (\(e' √ó t) -> evalFwd Œ≥ e' Œ±' t) <$> S.zip es ts in
   V.Record (Œ± ‚àß Œ±') (S.zipWith (‚Ü¶) xs vs)
evalFwd Œ≥ (Constr Œ± _ es) Œ±' (T.Constr _ c ts) =
   V.Constr (Œ± ‚àß Œ±') c ((\(e' √ó t) -> evalFwd Œ≥ e' Œ±' t) <$> zip es ts)
evalFwd Œ≥ (Matrix Œ± e1 _ e2) Œ±' (T.Matrix tss (x √ó y) (i' √ó j') t2) =
   case evalFwd Œ≥ e2 Œ±' t2 of
      V.Constr _ _ (v1 : v2 : Nil) ->
         let (i'' √ó Œ≤) √ó (j'' √ó Œ≤') = P.match_fwd v1 √ó P.match_fwd v2
             vss = assert (i'' == i' && j'' == j') $ A.fromFoldable $ do
                i <- range 1 i'
                singleton $ A.fromFoldable $ do
                   j <- range 1 j'
                   let Œ≥' = M.singleton x (V.Int Œ≤ i) `disjUnion` (M.singleton y (V.Int Œ≤' j))
                   singleton (evalFwd (Œ≥ `concat` Œ≥') e1 Œ±' (tss!(i - 1)!(j - 1)))
         in V.Matrix (Œ± ‚àß Œ±') (vss √ó (i' √ó Œ≤) √ó (j' √ó Œ≤'))
      _ -> error absurd
evalFwd Œ≥ (LetRec œÅ e') Œ± (T.LetRec _ t) =
   let Œ≥' = closeDefsFwd Œ≥ œÅ Œ± œÅ in
   evalFwd (Œ≥ `concat` Œ≥') e' Œ± t
evalFwd Œ≥ (Lambda œÉ) Œ± (T.Lambda _ _) = V.Closure Œ± (Œ≥ `restrict` fv œÉ) Lin œÉ
evalFwd Œ≥ (RecordLookup e' _) Œ± (T.RecordLookup t xs x) =
   case evalFwd Œ≥ e' Œ± t of
      V.Record _ xvs -> assert ((xvs <#> key) == xs) $ successful (find x xvs)
      _ -> error absurd
evalFwd Œ≥ (App e1 e2) Œ± (T.App (t1 √ó _ √ó _) t2 w t3) =
   case evalFwd Œ≥ e1 Œ± t1 of
      V.Closure Œ≤ Œ≥1 Œ¥ œÉ' ->
         let v = evalFwd Œ≥ e2 Œ± t2
             Œ≥1' = Œ≥1 <#> NE.singleton
             Œ≥2 = closeDefsFwd Œ≥1' Œ¥ Œ≤ Œ¥
             Œ≥3 √ó e3 √ó Œ≤' = matchFwd v œÉ' w in
         evalFwd ((Œ≥1' `concat` Œ≥2) `concat` Œ≥3) (asExpr e3) (Œ≤ ‚àß Œ≤') t3
      _ -> error absurd
evalFwd Œ≥ (App e1 e2) Œ± (T.AppPrim (t1 √ó PrimOp œÜ √ó _) (t2 √ó _)) =
   case evalFwd Œ≥ e1 Œ± t1 of
      V.Primitive _ vs' ->
         let v2' = evalFwd Œ≥ e2 Œ± t2
             vs'' = vs' <> singleton v2' in
         if œÜ.arity > length vs'' then V.Primitive (PrimOp œÜ) vs'' else œÜ.op_fwd vs''
      _ -> error absurd
evalFwd Œ≥ (App e1 e2) Œ± (T.AppConstr (t1 √ó c √ó _) t2) =
   case evalFwd Œ≥ e1 Œ± t1 of
      V.Constr Œ±' _ vs' ->
         let v = evalFwd Œ≥ e2 Œ± t2 in
         V.Constr (Œ± ‚àß Œ±') c (vs' <> singleton v)
      _ -> error absurd
evalFwd Œ≥ (Let (VarDef œÉ e1) e2) Œ± (T.Let (T.VarDef w t1) t2) =
   let v = evalFwd Œ≥ e1 Œ± t1
       Œ≥' √ó _ √ó Œ±' = matchFwd v œÉ w in
   evalFwd (Œ≥ `concat` Œ≥') e2 Œ±' t2
evalFwd _ _ _ _ = error absurd
