module EvalFwd where

import Prelude hiding (absurd)
import Data.Array (fromFoldable) as A
import Data.List (List(..), (:), length, range, singleton, zip)
import Data.Profunctor.Strong ((***), first, second)
import Data.Set (union)
import Data.Set (toUnfoldable) as S
import Bindings (varAnon)
import Dict (disjointUnion, empty, get, intersectionWith)
import Dict (singleton) as O
import Expr (Cont, Elim(..), Expr(..), RecDefs, VarDef(..), asElim, asExpr, fv)
import Lattice (ùîπ, (‚àß))
import Primitive (unwrap)
import Trace (Trace(..), VarDef(..)) as T
import Trace (Trace)
import Util (type (√ó), (√ó), (!), absurd, error)
import Val (Env, PrimOp(..), (<+>), Val, for, restrict)
import Val (Val(..)) as V

matchFwd :: Val ùîπ -> Elim ùîπ -> Env ùîπ √ó Cont ùîπ √ó ùîπ
matchFwd v (ElimVar x Œ∫)
   | x == varAnon = empty √ó Œ∫ √ó true
   | otherwise = O.singleton x v √ó Œ∫ √ó true
matchFwd (V.Constr Œ± c vs) (ElimConstr m) =
   second (_ ‚àß Œ±) (matchManyFwd vs (get c m))
matchFwd (V.Record Œ± xvs) (ElimRecord xs Œ∫) =
   second (_ ‚àß Œ±) (matchManyFwd (xs # S.toUnfoldable <#> flip get xvs) Œ∫)
matchFwd _ _ = error absurd

matchManyFwd :: List (Val ùîπ) -> Cont ùîπ -> Env ùîπ √ó Cont ùîπ √ó ùîπ
matchManyFwd Nil Œ∫ = empty √ó Œ∫ √ó true
matchManyFwd (v : vs) œÉ =
   (first (œÅ `disjointUnion` _) *** (_ ‚àß Œ±)) (matchManyFwd vs Œ∫)
   where
   œÅ √ó Œ∫ √ó Œ± = matchFwd v (asElim œÉ)

closeDefsFwd :: Env ùîπ -> RecDefs ùîπ -> ùîπ -> Env ùîπ
closeDefsFwd Œ≥ œÅ Œ± = œÅ <#> \œÉ ->
   let œÅ' = œÅ `for` œÉ in V.Closure Œ± (Œ≥ `restrict` (fv œÅ' `union` fv œÉ)) œÅ' œÉ

evalFwd :: Env ùîπ -> Expr ùîπ -> ùîπ -> Trace ùîπ -> Val ùîπ
evalFwd Œ≥ (Var x) _ _ = get x Œ≥
evalFwd Œ≥ (Op op) _ _ = get op Œ≥
evalFwd _ (Int Œ± n) Œ±' _ = V.Int (Œ± ‚àß Œ±') n
evalFwd _ (Float Œ± n) Œ±' _ = V.Float (Œ± ‚àß Œ±') n
evalFwd _ (Str Œ± s) Œ±' _ = V.Str (Œ± ‚àß Œ±') s
evalFwd Œ≥ (Record Œ± xes) Œ±' (T.Record xts) =
   V.Record (Œ± ‚àß Œ±') xvs
   where
   xvs = intersectionWith (√ó) xes xts <#> (\(e √ó t) -> evalFwd Œ≥ e Œ±' t)
evalFwd Œ≥ (Constr Œ± c es) Œ±' (T.Constr _ ts) =
   V.Constr (Œ± ‚àß Œ±') c ((\(e' √ó t) -> evalFwd Œ≥ e' Œ±' t) <$> zip es ts)
-- here
evalFwd Œ≥ (Matrix Œ± e1 (x √ó y) e2) Œ±' (T.Matrix tss _ _ t2) =
   let
      (i' √ó Œ≤) √ó (j' √ó Œ≤') = unwrap $ evalFwd Œ≥ e2 Œ±' t2
      vss = A.fromFoldable $ do
         i <- range 1 i'
         singleton $ A.fromFoldable $ do
            j <- range 1 j'
            let Œ≥' = O.singleton x (V.Int Œ≤ i) `disjointUnion` (O.singleton y (V.Int Œ≤' j))
            singleton (evalFwd (Œ≥ <+> Œ≥') e1 Œ±' (tss ! (i - 1) ! (j - 1)))
   in
      V.Matrix (Œ± ‚àß Œ±') (vss √ó (i' √ó Œ≤) √ó (j' √ó Œ≤'))
evalFwd Œ≥ (Lambda œÉ) Œ± _ = V.Closure Œ± (Œ≥ `restrict` fv œÉ) empty œÉ
evalFwd Œ≥ (Project e' x) Œ± (T.Project t _) =
   case evalFwd Œ≥ e' Œ± t of
      V.Record _ xvs -> get x xvs
      _ -> error absurd
evalFwd Œ≥ (App e1 e2) Œ± (T.App (t1 √ó _ √ó _) t2 _ t3) =
   case evalFwd Œ≥ e1 Œ± t1 of
      V.Closure Œ≤ Œ≥1 Œ¥ œÉ' ->
         evalFwd (Œ≥1 <+> Œ≥2 <+> Œ≥3) (asExpr e3) (Œ≤ ‚àß Œ≤') t3
         where
         v = evalFwd Œ≥ e2 Œ± t2
         Œ≥2 = closeDefsFwd Œ≥1 Œ¥ Œ≤
         Œ≥3 √ó e3 √ó Œ≤' = matchFwd v œÉ'
      _ -> error absurd
evalFwd Œ≥ (App e1 e2) Œ± (T.AppPrim (t1 √ó _ √ó _) (t2 √ó _)) =
   case evalFwd Œ≥ e1 Œ± t1 of
      V.Primitive (PrimOp œÜ) vs' ->
         if œÜ.arity > length vs'' then V.Primitive (PrimOp œÜ) vs'' else œÜ.op vs''
         where
         v2' = evalFwd Œ≥ e2 Œ± t2
         vs'' = vs' <> singleton v2'
      _ -> error absurd
evalFwd Œ≥ (App e1 e2) Œ± (T.AppConstr (t1 √ó _ √ó _) t2) =
   case evalFwd Œ≥ e1 Œ± t1 of
      V.Constr Œ±' c vs' ->
         V.Constr (Œ± ‚àß Œ±') c (vs' <> singleton v)
         where
         v = evalFwd Œ≥ e2 Œ± t2
      _ -> error absurd
evalFwd Œ≥ (Let (VarDef œÉ e1) e2) Œ± (T.Let (T.VarDef _ t1) t2) =
   evalFwd (Œ≥ <+> Œ≥') e2 Œ±' t2
   where
   v = evalFwd Œ≥ e1 Œ± t1
   Œ≥' √ó _ √ó Œ±' = matchFwd v œÉ
evalFwd Œ≥ (LetRec œÅ e') Œ± (T.LetRec _ t) =
   evalFwd (Œ≥ <+> Œ≥') e' Œ± t
   where
   Œ≥' = closeDefsFwd Œ≥ œÅ Œ±
evalFwd _ _ _ _ = error absurd
