module EvalFwd where

import Prelude hiding (absurd)
import Data.Array (fromFoldable) as A
import Data.List (List(..), (:), length, range, singleton, zip)
import Data.Profunctor.Strong ((***), first, second)
import Data.Set (union)
import Data.Set (toUnfoldable) as S
import Data.Tuple (snd)
import Dict (disjointUnion, empty, get, intersectionWith)
import Dict (singleton, toUnfoldable) as O
import Expr (Cont, Elim(..), Expr(..), RecDefs, VarDef(..), asElim, asExpr, fv)
import Lattice (ùîπ, (‚àß))
import Primitive (match) as P
import Trace (Trace(..), Match(..), VarDef(..)) as T
import Trace (Trace, Match)
import Util (type (√ó), (√ó), (!), absurd, assert, error)
import Val (Env, PrimOp(..), (<+>), Val, for, restrict)
import Val (Val(..)) as V

matchFwd :: Val ùîπ -> Elim ùîπ -> Match ùîπ -> Env ùîπ √ó Cont ùîπ √ó ùîπ
matchFwd _ (ElimVar _ Œ∫) (T.MatchVarAnon _) = empty √ó Œ∫ √ó true
matchFwd v (ElimVar _ Œ∫) (T.MatchVar x _) = O.singleton x v √ó Œ∫ √ó true
matchFwd (V.Constr Œ± _ vs) (ElimConstr m) (T.MatchConstr c ws) =
   second (_ ‚àß Œ±) (matchManyFwd vs (get c m) ws)
matchFwd (V.Record Œ± xvs) (ElimRecord xs Œ∫) (T.MatchRecord xws) =
   second (_ ‚àß Œ±) (matchManyFwd (xs # S.toUnfoldable <#> flip get xvs) Œ∫ (xws # O.toUnfoldable <#> snd))
matchFwd _ _ _ = error absurd

matchManyFwd :: List (Val ùîπ) -> Cont ùîπ -> List (Match ùîπ) -> Env ùîπ √ó Cont ùîπ √ó ùîπ
matchManyFwd Nil Œ∫ Nil = empty √ó Œ∫ √ó true
matchManyFwd (v : vs) œÉ (w : ws) =
   (first (œÅ `disjointUnion` _) *** (_ ‚àß Œ±)) (matchManyFwd vs Œ∫ ws)
   where
   œÅ √ó Œ∫ √ó Œ± = matchFwd v (asElim œÉ) w
matchManyFwd _ _ _ = error absurd

closeDefsFwd :: Env ùîπ -> RecDefs ùîπ -> ùîπ -> Env ùîπ
closeDefsFwd Œ≥ œÅ Œ± = œÅ <#> \œÉ ->
   V.Closure Œ± (Œ≥ `restrict` (fv œÅ' `union` fv œÉ)) œÅ' œÉ
   where
   œÅ' = œÅ `for` œÉ

evalFwd :: Env ùîπ -> Expr ùîπ -> ùîπ -> Trace ùîπ -> Val ùîπ
evalFwd Œ≥ (Var _) _ (T.Var x) = get x Œ≥
evalFwd Œ≥ (Op _) _ (T.Op op) = get op Œ≥
evalFwd _ (Int Œ± _) Œ±' (T.Int n) = V.Int (Œ± ‚àß Œ±') n
evalFwd _ (Float Œ± _) Œ±' (T.Float n) = V.Float (Œ± ‚àß Œ±') n
evalFwd _ (Str Œ± _) Œ±' (T.Str str) = V.Str (Œ± ‚àß Œ±') str
evalFwd Œ≥ (Record Œ± xes) Œ±' (T.Record xts) =
   V.Record (Œ± ‚àß Œ±') xvs
   where
   xvs = intersectionWith (√ó) xes xts <#> (\(e √ó t) -> evalFwd Œ≥ e Œ±' t)
evalFwd Œ≥ (Constr Œ± _ es) Œ±' (T.Constr c ts) =
   V.Constr (Œ± ‚àß Œ±') c ((\(e' √ó t) -> evalFwd Œ≥ e' Œ±' t) <$> zip es ts)
evalFwd Œ≥ (Matrix Œ± e1 _ e2) Œ±' (T.Matrix tss (x √ó y) (i' √ó j') t2) =
   case evalFwd Œ≥ e2 Œ±' t2 of
      V.Constr _ _ (v1 : v2 : Nil) ->
         V.Matrix (Œ± ‚àß Œ±') (vss √ó (i' √ó Œ≤) √ó (j' √ó Œ≤'))
         where
            (i'' √ó Œ≤) √ó (j'' √ó Œ≤') = P.match v1 √ó P.match v2
            vss = assert (i'' == i' && j'' == j') $ A.fromFoldable $ do
               i <- range 1 i'
               singleton $ A.fromFoldable $ do
                  j <- range 1 j'
                  let Œ≥' = O.singleton x (V.Int Œ≤ i) `disjointUnion` (O.singleton y (V.Int Œ≤' j))
                  singleton (evalFwd (Œ≥ <+> Œ≥') e1 Œ±' (tss ! (i - 1) ! (j - 1)))
      _ -> error absurd
evalFwd Œ≥ (Lambda œÉ) Œ± (T.Lambda _) = V.Closure Œ± (Œ≥ `restrict` fv œÉ) empty œÉ
evalFwd Œ≥ (Project e' _) Œ± (T.Project t x) =
   case evalFwd Œ≥ e' Œ± t of
      V.Record _ xvs -> get x xvs
      _ -> error absurd
evalFwd Œ≥ (App e1 e2) Œ± (T.App (t1 √ó _ √ó _) t2 w t3) =
   case evalFwd Œ≥ e1 Œ± t1 of
      V.Closure Œ≤ Œ≥1 Œ¥ œÉ' ->
         let
            v = evalFwd Œ≥ e2 Œ± t2
            Œ≥2 = closeDefsFwd Œ≥1 Œ¥ Œ≤
            Œ≥3 √ó e3 √ó Œ≤' = matchFwd v œÉ' w
         in
            evalFwd (Œ≥1 <+> Œ≥2 <+> Œ≥3) (asExpr e3) (Œ≤ ‚àß Œ≤') t3
      _ -> error absurd
evalFwd Œ≥ (App e1 e2) Œ± (T.AppPrim (t1 √ó PrimOp œÜ √ó _) (t2 √ó _)) =
   case evalFwd Œ≥ e1 Œ± t1 of
      V.Primitive _ vs' ->
         let
            v2' = evalFwd Œ≥ e2 Œ± t2
            vs'' = vs' <> singleton v2'
         in
            if œÜ.arity > length vs'' then V.Primitive (PrimOp œÜ) vs'' else œÜ.op vs''
      _ -> error absurd
evalFwd Œ≥ (App e1 e2) Œ± (T.AppConstr (t1 √ó c √ó _) t2) =
   case evalFwd Œ≥ e1 Œ± t1 of
      V.Constr Œ±' _ vs' ->
         let
            v = evalFwd Œ≥ e2 Œ± t2
         in
            V.Constr (Œ± ‚àß Œ±') c (vs' <> singleton v)
      _ -> error absurd
evalFwd Œ≥ (Let (VarDef œÉ e1) e2) Œ± (T.Let (T.VarDef w t1) t2) =
   let
      v = evalFwd Œ≥ e1 Œ± t1
      Œ≥' √ó _ √ó Œ±' = matchFwd v œÉ w
   in
      evalFwd (Œ≥ <+> Œ≥') e2 Œ±' t2
evalFwd Œ≥ (LetRec œÅ e') Œ± (T.LetRec _ t) =
   let
      Œ≥' = closeDefsFwd Œ≥ œÅ Œ±
   in
      evalFwd (Œ≥ <+> Œ≥') e' Œ± t
evalFwd _ _ _ _ = error absurd
