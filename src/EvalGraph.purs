module EvalGraph where

import Prelude hiding (apply)

import Bind (Bind, (‚Ü¶), varAnon)
import Control.Monad.Error.Class (class MonadError)
import Data.Array (range) as A
import Data.Either (Either(..))
import Data.Exists (runExists)
import Data.List (List(..), length, reverse, snoc, unzip, zip, (:))
import Data.Newtype (wrap)
import Data.Profunctor.Strong ((***))
import Data.Set (Set, insert)
import Data.Set as Set
import Data.Traversable (for, sequence, traverse)
import Data.Tuple (curry)
import DataType (checkArity, arity, consistentWith, dataTypeFor, showCtr)
import Dict (Dict)
import Dict (fromFoldable) as D
import Effect.Exception (Error)
import Expr (Cont(..), Elim(..), Expr(..), Module(..), RecDefs(..), VarDef(..), asExpr, fv)
import GaloisConnection (GaloisConnection(..))
import Graph (class Graph, Vertex, op, selectŒ±s, selectùîπs, showGraph, showVertices, vertices)
import Graph.GraphImpl (GraphImpl)
import Graph.Slice (bwdSlice, fwdSlice)
import Graph.WithGraph (class MonadWithGraphAlloc, alloc, new, runAllocT, runWithGraphT_spy)
import Lattice (ùîπ, Raw)
import Pretty (prettyP)
import Primitive (intPair, string, unpack)
import ProgCxt (ProgCxt(..))
import Test.Util.Debug (checking, tracing)
import Util (type (√ó), Endo, check, concatM, orElse, singleton, spyFunWhen, defined, throw, with, (√ó), (‚äÜ))
import Util.Map (disjointUnion, get, keys, lookup, lookup', maplet, restrict, (<+>))
import Util.Pair (unzip) as P
import Util.Set ((‚à™), empty)
import Val (BaseVal(..), Fun(..)) as V
import Val (DictRep(..), Env(..), EnvExpr(..), ForeignOp(..), ForeignOp'(..), MatrixRep(..), Val(..), forDefs)

-- Needs a better name.
type GraphConfig =
   { progCxt :: ProgCxt Vertex
   , n :: Int
   , Œ≥ :: Env Vertex
   }

patternMismatch :: String -> String -> String
patternMismatch s s' = "Pattern mismatch: found " <> s <> ", expected " <> s'

match :: forall m. MonadWithGraphAlloc m => Val Vertex -> Elim Vertex -> m (Env Vertex √ó Cont Vertex √ó Set Vertex)
match v (ElimVar x Œ∫)
   | x == varAnon = pure (empty √ó Œ∫ √ó empty)
   | otherwise = pure (maplet x v √ó Œ∫ √ó empty)
match (Val Œ± (V.Constr c vs)) (ElimConstr m) = do
   with "Pattern mismatch" $ Set.singleton c `consistentWith` keys m
   Œ∫ <- lookup c m # orElse ("Incomplete patterns: no branch for " <> showCtr c)
   Œ≥ √ó Œ∫' √ó Œ±s <- matchMany vs Œ∫
   pure (Œ≥ √ó Œ∫' √ó (insert Œ± Œ±s))
match v (ElimConstr m) = do
   d <- dataTypeFor $ keys m
   throw $ patternMismatch (prettyP v) (show d)
match (Val Œ± (V.Record xvs)) (ElimRecord xs Œ∫) = do
   check (Set.subset xs (Set.fromFoldable $ keys xvs))
      $ patternMismatch (show (keys xvs)) (show xs)
   let xs' = xs # Set.toUnfoldable
   Œ≥ √ó Œ∫' √ó Œ±s <- matchMany (flip get xvs <$> xs') Œ∫
   pure $ Œ≥ √ó Œ∫' √ó (insert Œ± Œ±s)
match v (ElimRecord xs _) = throw (patternMismatch (prettyP v) (show xs))

matchMany :: forall m. MonadWithGraphAlloc m => List (Val Vertex) -> Cont Vertex -> m (Env Vertex √ó Cont Vertex √ó Set Vertex)
matchMany Nil Œ∫ = pure (empty √ó Œ∫ √ó empty)
matchMany (v : vs) (ContElim œÉ) = do
   Œ≥ √ó Œ∫ √ó Œ±s <- match v œÉ
   Œ≥' √ó Œ∫' √ó Œ≤s <- matchMany vs Œ∫
   pure $ Œ≥ `disjointUnion` Œ≥' √ó Œ∫' √ó (Œ±s ‚à™ Œ≤s)
matchMany (_ : vs) (ContExpr _) = throw $
   show (length vs + 1) <> " extra argument(s) to constructor/record; did you forget parentheses in lambda pattern?"

closeDefs :: forall m. MonadWithGraphAlloc m => Env Vertex -> Dict (Elim Vertex) -> Set Vertex -> m (Env Vertex)
closeDefs Œ≥ œÅ Œ±s =
   Env <$> for œÅ \œÉ ->
      let œÅ' = œÅ `forDefs` œÉ in Val <$> new Œ±s <@> V.Fun (V.Closure (restrict (fv œÅ' ‚à™ fv œÉ) Œ≥) œÅ' œÉ)

apply :: forall m. MonadWithGraphAlloc m => Val Vertex -> Val Vertex -> m (Val Vertex)
apply (Val Œ± (V.Fun (V.Closure Œ≥1 œÅ œÉ))) v = do
   Œ≥2 <- closeDefs Œ≥1 œÅ (singleton Œ±)
   Œ≥3 √ó Œ∫ √ó Œ±s <- match v œÉ
   eval (Œ≥1 <+> Œ≥2 <+> Œ≥3) (asExpr Œ∫) (insert Œ± Œ±s)
apply (Val Œ± (V.Fun (V.Foreign (ForeignOp (id √ó œÜ)) vs))) v =
   runExists apply' œÜ
   where
   vs' = snoc vs v

   apply' :: forall t. ForeignOp' t -> m (Val Vertex)
   apply' (ForeignOp' œÜ') =
      if œÜ'.arity > length vs' then
         Val <$> new (singleton Œ±) <@> (V.Fun (V.Foreign (ForeignOp (id √ó œÜ)) vs'))
      else œÜ'.op' vs'
apply (Val Œ± (V.Fun (V.PartialConstr c vs))) v = do
   check (length vs < n) ("Too many arguments to " <> showCtr c)
   if length vs < n - 1 then Val <$> new (singleton Œ±) <@> V.Fun (V.PartialConstr c (snoc vs v))
   else Val <$> new (singleton Œ±) <@> V.Constr c (snoc vs v)
   where
   n = defined (arity c)
apply _ v = throw $ "Found " <> prettyP v <> ", expected function"

eval :: forall m. MonadWithGraphAlloc m => Env Vertex -> Expr Vertex -> Set Vertex -> m (Val Vertex)
eval Œ≥ (Var x) _ = with "Variable lookup" $ lookup' x Œ≥
eval Œ≥ (Op op) _ = with "Variable lookup" $ lookup' op Œ≥
eval _ (Int Œ± n) Œ±s = Val <$> new (insert Œ± Œ±s) <@> V.Int n
eval _ (Float Œ± n) Œ±s = Val <$> new (insert Œ± Œ±s) <@> V.Float n
eval _ (Str Œ± s) Œ±s = Val <$> new (insert Œ± Œ±s) <@> V.Str s
eval Œ≥ (Record Œ± xes) Œ±s = do
   xvs <- traverse (flip (eval Œ≥) Œ±s) xes
   Val <$> new (insert Œ± Œ±s) <@> V.Record xvs
eval Œ≥ (Dictionary Œ± ees) Œ±s = do
   vs √ó us <- traverse (traverse (flip (eval Œ≥) Œ±s)) ees <#> P.unzip
   let
      ss √ó Œ≤s = (vs <#> unpack string) # unzip
      d = wrap $ D.fromFoldable $ zip ss (zip Œ≤s us)
   Val <$> new (insert Œ± Œ±s) <@> V.Dictionary (DictRep d)
eval Œ≥ (Constr Œ± c es) Œ±s = do
   checkArity c (length es)
   vs <- traverse (flip (eval Œ≥) Œ±s) es
   Val <$> new (insert Œ± Œ±s) <@> V.Constr c vs
eval Œ≥ (Matrix Œ± e (x √ó y) e') Œ±s = do
   Val _ v <- eval Œ≥ e' Œ±s
   let (i' √ó Œ≤) √ó (j' √ó Œ≤') = intPair.unpack v
   check
      (i' √ó j' >= 1 √ó 1)
      ("array must be at least (" <> show (1 √ó 1) <> "); got (" <> show (i' √ó j') <> ")")
   vss <- sequence do
      i <- A.range 1 i'
      singleton $ sequence do
         j <- A.range 1 j'
         let Œ≥' = maplet x (Val Œ≤ (V.Int i)) `disjointUnion` (maplet y (Val Œ≤' (V.Int j)))
         singleton (eval (Œ≥ <+> Œ≥') e Œ±s)
   Val <$> new (insert Œ± Œ±s) <@> V.Matrix (MatrixRep (vss √ó (i' √ó Œ≤) √ó (j' √ó Œ≤')))
eval Œ≥ (Lambda Œ± œÉ) Œ±s =
   Val <$> new (insert Œ± Œ±s) <@> V.Fun (V.Closure (restrict (fv œÉ) Œ≥) empty œÉ)
eval Œ≥ (Project e x) Œ±s = do
   v <- eval Œ≥ e Œ±s
   case v of
      Val _ (V.Record xvs) -> with "Record lookup" (lookup' x xvs)
      _ -> throw $ "Found " <> prettyP v <> ", expected record"
eval Œ≥ (App e e') Œ±s = do
   v <- eval Œ≥ e Œ±s
   v' <- eval Œ≥ e' Œ±s
   apply v v'
eval Œ≥ (Let (VarDef œÉ e) e') Œ±s = do
   v <- eval Œ≥ e Œ±s
   Œ≥' √ó _ √ó Œ±s' <- match v œÉ -- terminal meta-type of eliminator is meta-unit
   eval (Œ≥ <+> Œ≥') e' Œ±s' -- (Œ±s ‚àß Œ±s') for consistency with functions? (similarly for module defs)
eval Œ≥ (LetRec (RecDefs Œ± œÅ) e) Œ±s = do
   Œ≥' <- closeDefs Œ≥ œÅ (insert Œ± Œ±s)
   eval (Œ≥ <+> Œ≥') e (insert Œ± Œ±s)

eval_module :: forall m. MonadWithGraphAlloc m => Env Vertex -> Module Vertex -> Set Vertex -> m (Env Vertex)
eval_module Œ≥ = go empty
   where
   go :: Env Vertex -> Module Vertex -> Set Vertex -> m (Env Vertex)
   go Œ≥' (Module Nil) _ = pure Œ≥'
   go y' (Module (Left (VarDef œÉ e) : ds)) Œ±s = do
      v <- eval (Œ≥ <+> y') e Œ±s
      Œ≥'' √ó _ √ó Œ±' <- match v œÉ
      go (y' <+> Œ≥'') (Module ds) Œ±'
   go Œ≥' (Module (Right (RecDefs Œ± œÅ) : ds)) Œ±s = do
      Œ≥'' <- closeDefs (Œ≥ <+> Œ≥') œÅ (insert Œ± Œ±s)
      go (Œ≥' <+> Œ≥'') (Module ds) Œ±s

eval_progCxt :: forall m. MonadWithGraphAlloc m => ProgCxt Vertex -> m (Env Vertex)
eval_progCxt (ProgCxt { primitives, mods, datasets }) =
   flip concatM primitives ((reverse mods <#> addModule) <> (reverse datasets <#> addDataset))
   where
   addModule :: Module Vertex -> Env Vertex -> m (Env Vertex)
   addModule mod Œ≥ = do
      Œ≥' <- eval_module Œ≥ mod empty
      pure $ Œ≥ <+> Œ≥'

   addDataset :: Bind (Expr Vertex) -> Env Vertex -> m (Env Vertex)
   addDataset (x ‚Ü¶ e) Œ≥ = do
      v <- eval Œ≥ e empty
      pure $ Œ≥ <+> maplet x v

type GraphEval g =
   { gc :: GaloisConnection (EnvExpr ùîπ) (Val ùîπ)
   , gc_op :: GaloisConnection (Val ùîπ) (EnvExpr ùîπ)
   , Œ≥eŒ± :: EnvExpr Vertex
   , g :: g
   , vŒ± :: Val Vertex
   }

type GraphEval2 g s t =
   { gc :: GaloisConnection (s ùîπ) (t ùîπ)
   , g :: g
   , inŒ± :: s Vertex
   , outŒ± :: t Vertex
   }

withOp :: forall g s t. Graph g => GraphEval2 g s t -> GraphEval2 g t s
withOp { gc: GC { fwd, bwd }, g, inŒ±, outŒ± } =
   { gc: GC { fwd: bwd, bwd: fwd }, g: op g, inŒ±: outŒ±, outŒ±: inŒ± }

graphGC_new
   :: forall m
    . MonadError Error m
   => GraphConfig
   -> Raw Expr
   -> m (GraphEval2 GraphImpl EnvExpr Val)
graphGC_new { n, Œ≥ } e = do
   _ √ó _ √ó g √ó inŒ± √ó outŒ± <- flip runAllocT n do
      eŒ± <- alloc e
      let inŒ± = EnvExpr Œ≥ eŒ±
      let inputs = vertices inŒ±
      g √ó outŒ± :: _ √ó Val Vertex <- runWithGraphT_spy (eval Œ≥ eŒ± mempty) inputs
      when checking.outputsInGraph $ check (vertices outŒ± ‚äÜ vertices g) "outputs in graph"
      pure (g √ó inŒ± √ó outŒ±)
   let
      gc :: GaloisConnection (EnvExpr ùîπ) (Val ùîπ)
      gc = GC
         { fwd: \inùîπ -> selectùîπs outŒ± (vertices (fwdSlice' (selectŒ±s inùîπ inŒ±) g))
         , bwd: \outùîπ -> selectùîπs inŒ± (vertices (bwdSlice' (selectŒ±s outùîπ outŒ±) g))
         }
   pure { gc, g, inŒ±, outŒ± }
   where
   fwdSlice' :: Set Vertex -> Endo GraphImpl
   fwdSlice' = curry (fwdSlice # spyFun' tracing.graphFwdSlice "fwdSlice")

   bwdSlice' :: Set Vertex -> Endo GraphImpl
   bwdSlice' = curry (bwdSlice # spyFun' tracing.graphBwdSlice "bwdSlice")

   spyFun' b msg = spyFunWhen b msg (showVertices *** showGraph) showGraph

graphGC
   :: forall m
    . MonadError Error m
   => GraphConfig
   -> Raw Expr
   -> m (GraphEval GraphImpl)
graphGC { n, Œ≥ } e = do
   _ √ó _ √ó g √ó eŒ± √ó outŒ± <- flip runAllocT n do
      eŒ± <- alloc e
      let inŒ± = EnvExpr Œ≥ eŒ±
      let inputs = vertices inŒ±
      g √ó outŒ± :: _ √ó Val Vertex <- runWithGraphT_spy (eval Œ≥ eŒ± mempty) inputs
      when checking.outputsInGraph $ check (vertices outŒ± ‚äÜ vertices g) "outputs in graph"
      pure (g √ó eŒ± √ó outŒ±)

   let inŒ± = EnvExpr Œ≥ eŒ±
   pure
      { gc: GC
           { fwd: \inùîπ -> selectùîπs outŒ± (vertices (fwdSlice' (selectŒ±s inùîπ inŒ±) g))
           , bwd: \outùîπ -> selectùîπs inŒ± (vertices (bwdSlice' (selectŒ±s outùîπ outŒ±) g))
           }
      , gc_op: GC
           { fwd: \outùîπ -> selectùîπs inŒ± (vertices (fwdSlice' (selectŒ±s outùîπ outŒ±) (op g)))
           , bwd: \inùîπ -> selectùîπs outŒ± (vertices (bwdSlice' (selectŒ±s inùîπ inŒ±) (op g)))
           }
      , Œ≥eŒ±: EnvExpr Œ≥ eŒ±
      , g
      , vŒ±: outŒ±
      }
   where
   fwdSlice' :: Set Vertex -> Endo GraphImpl
   fwdSlice' = curry (fwdSlice # spyFun' tracing.graphFwdSlice "fwdSlice")

   bwdSlice' :: Set Vertex -> Endo GraphImpl
   bwdSlice' = curry (bwdSlice # spyFun' tracing.graphBwdSlice "bwdSlice")

   spyFun' b msg = spyFunWhen b msg (showVertices *** showGraph) showGraph
