module EvalBwd where

import Prelude hiding (absurd)
import Data.Foldable (foldr, length)
import Data.FoldableWithIndex (foldrWithIndex)
import Data.List (List(..), (:), range, reverse, unsnoc, unzip, zip)
import Data.List (singleton) as L
import Data.List.NonEmpty (NonEmptyList(..))
import Data.Map (empty, fromFoldable, keys, insert, intersectionWith, isEmpty, toUnfoldable)
import Data.Map (singleton) as M
import Data.NonEmpty (foldl1)
import Data.Set (singleton, union)
import Data.Tuple (fst, snd, uncurry)
import Partial.Unsafe (unsafePartial)
import Bindings (Var, varAnon)
import DataType (cPair)
import Expr (Cont(..), Elim(..), Expr(..), VarDef(..), bv)
import Lattice (ùîπ, (‚à®), bot, botOf)
import Trace (Trace(..), VarDef(..)) as T
import Trace (Trace, Match(..))
import Util (Endo, type (√ó), (√ó), (!), absurd, error, definitely', disjUnion, disjUnion_inv, mustLookup, nonEmpty)
import Val (Env, FunEnv, PrimOp(..), (<+>), Val, (‚à®‚à®), append_inv, dom, update)
import Val (Val(..)) as V

closeDefsBwd :: Env ùîπ -> Env ùîπ √ó FunEnv ùîπ √ó ùîπ
closeDefsBwd Œ≥ =
   case foldrWithIndex joinDefs (empty √ó empty √ó empty √ó false) Œ≥ of
   œÅ' √ó Œ≥' √ó œÅ √ó Œ± -> Œ≥' √ó (œÅ ‚à® œÅ') √ó Œ±
   where
   joinDefs :: Var -> Val ùîπ -> Endo (FunEnv ùîπ √ó Env ùîπ √ó FunEnv ùîπ √ó ùîπ)
   joinDefs f _ (œÅ_acc √ó Œ≥' √ó œÅ √ó Œ±) =
      case mustLookup f Œ≥ of
         V.Closure Œ±_f Œ≥_f œÅ_f œÉ_f ->
            (œÅ_acc # insert f œÉ_f) √ó (Œ≥' ‚à®‚à® Œ≥_f) √ó (œÅ ‚à®‚à® œÅ_f) √ó (Œ± ‚à® Œ±_f)
         _ -> error absurd

matchBwd :: Env ùîπ -> Cont ùîπ -> ùîπ -> Match ùîπ -> Val ùîπ √ó Elim ùîπ
matchBwd Œ≥ Œ∫ _ (MatchVar x v)
   | dom Œ≥ == singleton x           = mustLookup x Œ≥ √ó ElimVar x Œ∫
   | otherwise                      = botOf v √ó ElimVar x Œ∫
matchBwd Œ≥ Œ∫ _ (MatchVarAnon v)
   | isEmpty Œ≥                      = botOf v √ó ElimVar varAnon Œ∫
   | otherwise                      = error absurd
matchBwd œÅ Œ∫ Œ± (MatchConstr c ws)   = V.Constr Œ± c vs √ó ElimConstr (M.singleton c Œ∫')
   where vs √ó Œ∫' = matchManyBwd œÅ Œ∫ Œ± (reverse ws)
matchBwd œÅ Œ∫ Œ± (MatchRecord xws)    = V.Record Œ± (zip xs vs # fromFoldable) √ó ElimRecord (keys xws) Œ∫'
   where xs √ó ws = xws # toUnfoldable # unzip
         vs √ó Œ∫' = matchManyBwd œÅ Œ∫ Œ± (ws # reverse)

matchManyBwd :: Env ùîπ -> Cont ùîπ -> ùîπ -> List (Match ùîπ) -> List (Val ùîπ) √ó Cont ùîπ
matchManyBwd Œ≥ Œ∫ _ Nil  | isEmpty Œ≥ = Nil √ó Œ∫
                        | otherwise = error absurd
matchManyBwd Œ≥Œ≥' Œ∫ Œ± (w : ws) =
   let Œ≥ √ó Œ≥'  = disjUnion_inv (bv w) Œ≥Œ≥'
       v √ó œÉ   = matchBwd Œ≥ Œ∫ Œ± w
       vs √ó Œ∫' = matchManyBwd Œ≥' (ContElim œÉ) Œ± ws in
   (vs <> v : Nil) √ó Œ∫'

evalBwd :: Val ùîπ -> Trace ùîπ -> Env ùîπ √ó Expr ùîπ √ó ùîπ
evalBwd v (T.Var x) = M.singleton x v √ó Var x √ó false
evalBwd v (T.Op op) = M.singleton op v √ó Op op √ó false
evalBwd (V.Str Œ± _) (T.Str str) = empty √ó Str Œ± str √ó Œ±
evalBwd (V.Int Œ± _) (T.Int n) = empty √ó Int Œ± n √ó Œ±
evalBwd (V.Float Œ± _) (T.Float n) = empty √ó Float Œ± n √ó Œ±
evalBwd (V.Closure Œ± Œ≥ _ œÉ) (T.Lambda _) = Œ≥ √ó Lambda œÉ √ó Œ±
evalBwd (V.Record Œ± xvs) (T.Record Œ≥ xts) =
   let xvts = intersectionWith (√ó) xvs xts
       xŒ≥eŒ±s = xvts <#> uncurry evalBwd
       Œ≥' = foldr (‚à®) (botOf Œ≥) (xŒ≥eŒ±s <#> (fst >>> fst)) in
   Œ≥' √ó Record Œ± (xŒ≥eŒ±s <#> (fst >>> snd)) √ó (foldr (‚à®) Œ± (xŒ≥eŒ±s <#> snd))
evalBwd (V.Constr Œ± _ vs) (T.Constr Œ≥ c ts) =
   let evalArg_bwd :: Val ùîπ √ó Trace ùîπ -> Endo (Env ùîπ √ó List (Expr ùîπ) √ó ùîπ)
       evalArg_bwd (v' √ó t') (Œ≥' √ó es √ó Œ±') = (Œ≥' ‚à® Œ≥'') √ó (e : es) √ó (Œ±' ‚à® Œ±'')
          where Œ≥'' √ó e √ó Œ±'' = evalBwd v' t'
       Œ≥' √ó es √ó Œ±' = foldr evalArg_bwd (botOf Œ≥ √ó Nil √ó Œ±) (zip vs ts) in
   Œ≥' √ó Constr Œ± c es √ó Œ±'
evalBwd (V.Matrix Œ± (vss √ó (_ √ó Œ≤i) √ó (_ √ó Œ≤j))) (T.Matrix tss (x √ó y) (i' √ó j') t') =
   let NonEmptyList ijs = nonEmpty $ do
            i <- range 1 i'
            j <- range 1 j'
            L.singleton (i √ó j)
       evalBwd_elem :: (Int √ó Int) -> Env ùîπ √ó Expr ùîπ √ó ùîπ √ó ùîπ √ó ùîπ
       evalBwd_elem (i √ó j) =
          case evalBwd (vss!(i - 1)!(j - 1)) (tss!(i - 1)!(j - 1)) of
             Œ≥'' √ó e √ó Œ±' ->
               let Œ≥ √ó Œ≥' = append_inv (singleton x `union` singleton y) Œ≥''
                   Œ≥0 = (M.singleton x (V.Int bot i') `disjUnion` M.singleton y (V.Int bot j')) <+> Œ≥'
               in unsafePartial $ let V.Int Œ≤ _ √ó V.Int Œ≤' _ = mustLookup x Œ≥0 √ó mustLookup x Œ≥0
               in Œ≥ √ó e √ó Œ±' √ó Œ≤ √ó Œ≤'
       Œ≥ √ó e √ó Œ±' √ó Œ≤ √ó Œ≤' = foldl1
          (\(Œ≥1 √ó e1 √ó Œ±1 √ó Œ≤1 √ó Œ≤1') (Œ≥2 √ó e2 √ó Œ±2 √ó Œ≤2 √ó Œ≤2') ->
             ((Œ≥1 ‚à® Œ≥2) √ó (e1 ‚à® e2) √ó (Œ±1 ‚à® Œ±2) √ó (Œ≤1 ‚à® Œ≤2) √ó (Œ≤1' ‚à® Œ≤2')))
          (evalBwd_elem <$> ijs)
       Œ≥' √ó e' √ó Œ±'' = evalBwd (V.Constr false cPair (V.Int (Œ≤ ‚à® Œ≤i) i' : V.Int (Œ≤' ‚à® Œ≤j) j' : Nil)) t' in
    (Œ≥ ‚à® Œ≥') √ó Matrix Œ± e (x √ó y) e' √ó (Œ± ‚à® Œ±' ‚à® Œ±'')
evalBwd v (T.Project t x) =
   let v' = V.Record false (M.singleton x v)
       œÅ √ó e √ó Œ± = evalBwd v' t in
   œÅ √ó Project e x √ó Œ±
evalBwd v (T.App (t1 √ó xs √ó _) t2 w t3) =
   let Œ≥1Œ≥2Œ≥3 √ó e √ó Œ≤ = evalBwd v t3
       Œ≥1Œ≥2 √ó Œ≥3 = append_inv (bv w) Œ≥1Œ≥2Œ≥3
       v' √ó œÉ = matchBwd Œ≥3 (ContExpr e) Œ≤ w
       Œ≥1 √ó Œ≥2 = append_inv xs Œ≥1Œ≥2
       Œ≥' √ó e2 √ó Œ± = evalBwd v' t2
       Œ≥1' √ó Œ¥' √ó Œ≤' = closeDefsBwd Œ≥2
       Œ≥'' √ó e1 √ó Œ±' = evalBwd (V.Closure (Œ≤ ‚à® Œ≤') (Œ≥1 ‚à® Œ≥1') Œ¥' œÉ) t1 in
   (Œ≥' ‚à® Œ≥'') √ó App e1 e2 √ó (Œ± ‚à® Œ±')
evalBwd v (T.AppPrim (t1 √ó PrimOp œÜ √ó vs) (t2 √ó v2)) =
   let vs' = vs <> L.singleton v2
       { init: vs'', last: v2' } = definitely' $ unsnoc $
         if œÜ.arity > length vs'
         then unsafePartial $ let V.Primitive _ vs'' = v in vs''
         else œÜ.op_bwd v vs'
       Œ≥ √ó e √ó Œ± = evalBwd (V.Primitive (PrimOp œÜ) vs'') t1
       Œ≥' √ó e' √ó Œ±' = evalBwd v2' t2 in
   (Œ≥ ‚à® Œ≥') √ó App e e' √ó (Œ± ‚à® Œ±')
evalBwd (V.Constr Œ≤ _ vs) (T.AppConstr (t1 √ó c √ó _) t2) =
   let { init: vs', last: v2 } = definitely' (unsnoc vs)
       Œ≥ √ó e √ó Œ± = evalBwd (V.Constr Œ≤ c vs') t1
       Œ≥' √ó e' √ó Œ±' = evalBwd v2 t2 in
   (Œ≥ ‚à® Œ≥') √ó App e e' √ó (Œ± ‚à® Œ±')
evalBwd v (T.Let (T.VarDef w t1) t2) =
   let Œ≥1Œ≥2 √ó e2 √ó Œ±2 = evalBwd v t2
       Œ≥1 √ó Œ≥2 = append_inv (bv w) Œ≥1Œ≥2
       v' √ó œÉ = matchBwd Œ≥2 ContNone Œ±2 w
       Œ≥1' √ó e1 √ó Œ±1 = evalBwd v' t1 in
   (Œ≥1 ‚à® Œ≥1') √ó Let (VarDef œÉ e1) e2 √ó (Œ±1 ‚à® Œ±2)
evalBwd v (T.LetRec œÅ t) =
   let Œ≥1Œ≥2 √ó e √ó Œ± = evalBwd v t
       Œ≥1 √ó Œ≥2 = append_inv (keys œÅ) Œ≥1Œ≥2
       Œ≥1' √ó œÅ' √ó Œ±' = closeDefsBwd Œ≥2 in
   (Œ≥1 ‚à® Œ≥1') √ó LetRec ((botOf œÅ # toUnfoldable) `update` œÅ' # fromFoldable) e √ó (Œ± ‚à® Œ±')
evalBwd _ _ = error absurd
