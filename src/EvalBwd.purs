module EvalBwd where

import Prelude hiding (absurd)
import Control.Apply (lift2)
import Data.Foldable (foldr, length)
import Data.FoldableWithIndex (foldlWithIndex)
import Data.List (List(..), (:), range, reverse, unsnoc, zip)
import Data.List (singleton) as L
import Data.List.NonEmpty (NonEmptyList(..))
import Data.Map (insert, isEmpty)
import Data.Map (singleton) as M
import Data.NonEmpty (foldl1)
import Data.Profunctor.Strong ((&&&), first)
import Data.Set (singleton, union)
import Partial.Unsafe (unsafePartial)
import Bindings (Bindings, Var, (‚Ü¶), key, val, varAnon)
import Bindings (dom, update) as B
import DataType (cPair)
import Expr (Cont(..), Elim(..), Expr(..), VarDef(..), RecDefs, bv)
import Lattice (ùîπ, (‚à®), botOf)
import Trace (Trace(..), VarDef(..)) as T
import Trace (Trace, Match(..))
import Util (Endo, type (√ó), (√ó), (!), absurd, error, definitely', disjUnion_inv, mustLookup, nonEmpty)
import Util.SnocList (SnocList(..), (:-), fromList)
import Util.SnocList (singleton, unzip, zip, zipWith) as S
import Val (Env, PrimOp(..), SingletonEnv, Val, asSingleton, concat_inv, dom, update)
import Val (Val(..)) as V

-- second argument contains original environment and recursive definitions
closeDefsBwd :: SingletonEnv ùîπ -> Env ùîπ √ó RecDefs ùîπ -> Env ùîπ √ó RecDefs ùîπ √ó ùîπ
closeDefsBwd Œ≥ (Œ≥0 √ó œÅ0) =
   case foldlWithIndex joinDefs (Lin √ó Œ≥0' √ó œÅ0' √ó false) Œ≥ of
   œÅ' √ó Œ≥' √ó œÅ √ó Œ± -> Œ≥' √ó (œÅ ‚à® œÅ') √ó Œ±
   where
   Œ≥0' √ó œÅ0' = botOf Œ≥0 √ó botOf œÅ0
   joinDefs :: Var -> RecDefs ùîπ √ó Env ùîπ √ó RecDefs ùîπ √ó ùîπ -> Val ùîπ -> RecDefs ùîπ √ó Env ùîπ √ó RecDefs ùîπ √ó ùîπ
   joinDefs f (œÅ_acc √ó Œ≥' √ó œÅ √ó Œ±) (V.Closure Œ±_f Œ≥_f œÅ_f œÉ_f) =
      (œÅ_acc :- f ‚Ü¶ œÉ_f) √ó (Œ≥' ‚à® (Œ≥0' `update` Œ≥_f)) √ó (œÅ ‚à® (œÅ0' `B.update` œÅ_f)) √ó (Œ± ‚à® Œ±_f)
   joinDefs _ _ _ = error absurd

matchBwd :: SingletonEnv ùîπ -> Cont ùîπ -> ùîπ -> Match ùîπ -> Val ùîπ √ó Elim ùîπ
matchBwd Œ≥ Œ∫ _ (MatchVar x) | dom Œ≥ == singleton x = mustLookup x Œ≥ √ó ElimVar x Œ∫
matchBwd Œ≥ Œ∫ _ (MatchVarAnon v) | isEmpty Œ≥        = botOf v √ó ElimVar varAnon Œ∫
matchBwd œÅ Œ∫ Œ± (MatchConstr c ws cŒ∫s)              = V.Constr Œ± c vs √ó ElimConstr (insert c Œ∫' $ (botOf <$> cŒ∫s))
   where vs √ó Œ∫' = matchArgsBwd œÅ Œ∫ Œ± (reverse ws # fromList)
matchBwd œÅ Œ∫ Œ± (MatchRecord xws)                   = V.Record Œ± xvs √ó ElimRecord (key <$> xws) Œ∫'
   where xvs √ó Œ∫' = matchRecordBwd œÅ Œ∫ Œ± xws
matchBwd _ _ _ _                                   = error absurd

matchArgsBwd :: SingletonEnv ùîπ -> Cont ùîπ -> ùîπ -> SnocList (Match ùîπ) -> List (Val ùîπ) √ó Cont ùîπ
matchArgsBwd Œ≥ Œ∫ _ Lin  | isEmpty Œ≥ = Nil √ó Œ∫
                        | otherwise = error absurd
matchArgsBwd Œ≥Œ≥' Œ∫ Œ± (ws :- w) =
   let Œ≥ √ó Œ≥'  = disjUnion_inv (bv w) Œ≥Œ≥'
       v √ó œÉ   = matchBwd Œ≥ Œ∫ Œ± w
       vs √ó Œ∫' = matchArgsBwd Œ≥' (ContElim œÉ) Œ± ws in
   (vs <> v : Nil) √ó Œ∫'

matchRecordBwd :: SingletonEnv ùîπ -> Cont ùîπ -> ùîπ -> Bindings (Match ùîπ) -> Bindings (Val ùîπ) √ó Cont ùîπ
matchRecordBwd Œ≥ Œ∫ _ Lin | isEmpty Œ≥   = Lin √ó Œ∫
                         | otherwise   = error absurd
matchRecordBwd Œ≥Œ≥' Œ∫ Œ± (xws :- x ‚Ü¶ w)  =
   let Œ≥ √ó Œ≥'  = disjUnion_inv (bv w) Œ≥Œ≥'
       v √ó œÉ   = matchBwd Œ≥ Œ∫ Œ± w in
   (first (_ :- x ‚Ü¶ v)) (matchRecordBwd Œ≥' (ContElim œÉ) Œ± xws)

evalBwd :: Val ùîπ -> Trace ùîπ -> Env ùîπ √ó Expr ùîπ √ó ùîπ
evalBwd v (T.Var Œ≥ x) = (botOf Œ≥ `update` M.singleton x v) √ó Var x √ó false
evalBwd v (T.Op Œ≥ op) = (botOf Œ≥ `update` M.singleton op v) √ó Op op √ó false
evalBwd (V.Str Œ± _) (T.Str Œ≥ str) = botOf Œ≥ √ó Str Œ± str √ó Œ±
evalBwd (V.Int Œ± _) (T.Int Œ≥ n) = botOf Œ≥ √ó Int Œ± n √ó Œ±
evalBwd (V.Float Œ± _) (T.Float Œ≥ n) = botOf Œ≥ √ó Float Œ± n √ó Œ±
evalBwd (V.Closure Œ± Œ≥ _ œÉ) (T.Lambda Œ≥' _) = Œ≥' `update` Œ≥ √ó Lambda œÉ √ó Œ±
evalBwd (V.Record Œ± xvs) (T.Record Œ≥ xts) =
   let xs √ó ts = xts <#> (key &&& val) # S.unzip
       vs = xvs <#> val
       -- Could unify with similar function in constructor case
       evalArg_bwd :: Val ùîπ √ó Trace ùîπ -> Endo (Env ùîπ √ó SnocList (Expr ùîπ) √ó ùîπ)
       evalArg_bwd (v' √ó t') (Œ≥' √ó es √ó Œ±') = (Œ≥' ‚à® Œ≥'') √ó (es :- e) √ó (Œ±' ‚à® Œ±'')
         where Œ≥'' √ó e √ó Œ±'' = evalBwd v' t'
       Œ≥' √ó es √ó Œ±' = foldr evalArg_bwd (botOf Œ≥ √ó Lin √ó Œ±) (S.zip vs ts) in
   Œ≥' √ó Record Œ± (S.zipWith (‚Ü¶) xs es) √ó Œ±'
evalBwd (V.Constr Œ± _ vs) (T.Constr Œ≥ c ts) =
   let evalArg_bwd :: Val ùîπ √ó Trace ùîπ -> Endo (Env ùîπ √ó List (Expr ùîπ) √ó ùîπ)
       evalArg_bwd (v' √ó t') (Œ≥' √ó es √ó Œ±') = (Œ≥' ‚à® Œ≥'') √ó (e : es) √ó (Œ±' ‚à® Œ±'')
          where Œ≥'' √ó e √ó Œ±'' = evalBwd v' t'
       Œ≥' √ó es √ó Œ±' = foldr evalArg_bwd (botOf Œ≥ √ó Nil √ó Œ±) (zip vs ts) in
   Œ≥' √ó Constr Œ± c es √ó Œ±'
evalBwd (V.Matrix Œ± (vss √ó (_ √ó Œ≤i) √ó (_ √ó Œ≤j))) (T.Matrix tss (x √ó y) (i' √ó j') t') =
   let NonEmptyList ijs = nonEmpty $ do
            i <- range 1 i'
            j <- range 1 j'
            L.singleton (i √ó j)
       evalBwd_elem :: (Int √ó Int) -> Env ùîπ √ó Expr ùîπ √ó ùîπ √ó ùîπ √ó ùîπ
       evalBwd_elem (i √ó j) =
          case evalBwd (vss!(i - 1)!(j - 1)) (tss!(i - 1)!(j - 1)) of
             Œ≥'' √ó e √ó Œ±' ->
               let Œ≥ √ó Œ≥' = concat_inv (singleton x `union` singleton y) Œ≥''
               in unsafePartial $ let V.Int Œ≤ _ √ó V.Int Œ≤' _ = mustLookup x Œ≥' √ó mustLookup x Œ≥'
               in Œ≥ √ó e √ó Œ±' √ó Œ≤ √ó Œ≤'
       Œ≥ √ó e √ó Œ±' √ó Œ≤ √ó Œ≤' = foldl1
          (\(Œ≥1 √ó e1 √ó Œ±1 √ó Œ≤1 √ó Œ≤1') (Œ≥2 √ó e2 √ó Œ±2 √ó Œ≤2 √ó Œ≤2') ->
             ((Œ≥1 ‚à® Œ≥2) √ó (e1 ‚à® e2) √ó (Œ±1 ‚à® Œ±2) √ó (Œ≤1 ‚à® Œ≤2) √ó (Œ≤1' ‚à® Œ≤2')))
          (evalBwd_elem <$> ijs)
       Œ≥' √ó e' √ó Œ±'' = evalBwd (V.Constr false cPair (V.Int (Œ≤ ‚à® Œ≤i) i' : V.Int (Œ≤' ‚à® Œ≤j) j' : Nil)) t' in
    (Œ≥ ‚à® Œ≥') √ó Matrix Œ± e (x √ó y) e' √ó (Œ± ‚à® Œ±' ‚à® Œ±'')
evalBwd v (T.Project t xvs x) =
   let v' = V.Record false $ (xvs <#> botOf) `B.update` (S.singleton $ x ‚Ü¶ v)
       œÅ √ó e √ó Œ± = evalBwd v' t in
   œÅ √ó Project e x √ó Œ±
evalBwd v (T.App (t1 √ó Œ¥ √ó _) t2 w t3) =
   let Œ≥1Œ≥2Œ≥3 √ó e √ó Œ≤ = evalBwd v t3
       Œ≥1Œ≥2 √ó Œ≥3 = concat_inv (bv w) Œ≥1Œ≥2Œ≥3
       v' √ó œÉ = matchBwd Œ≥3 (ContExpr e) Œ≤ w
       Œ≥1 √ó Œ≥2 = concat_inv (B.dom Œ¥) Œ≥1Œ≥2
       Œ≥' √ó e2 √ó Œ± = evalBwd v' t2
       Œ≥1' √ó Œ¥' √ó Œ≤' = closeDefsBwd Œ≥2 (Œ≥1 √ó Œ¥)
       Œ≥1'' = definitely' $ asSingleton Œ≥1 `lift2 (‚à®)` asSingleton Œ≥1'
       Œ≥'' √ó e1 √ó Œ±' = evalBwd (V.Closure (Œ≤ ‚à® Œ≤') Œ≥1'' Œ¥' œÉ) t1 in
   (Œ≥' ‚à® Œ≥'') √ó App e1 e2 √ó (Œ± ‚à® Œ±')
evalBwd v (T.AppPrim (t1 √ó PrimOp œÜ √ó vs) (t2 √ó v2)) =
   let vs' = vs <> L.singleton v2
       { init: vs'', last: v2' } = definitely' $ unsnoc $
         if œÜ.arity > length vs'
         then unsafePartial $ let V.Primitive _ vs'' = v in vs''
         else œÜ.op_bwd v vs'
       Œ≥ √ó e √ó Œ± = evalBwd (V.Primitive (PrimOp œÜ) vs'') t1
       Œ≥' √ó e' √ó Œ±' = evalBwd v2' t2 in
   (Œ≥ ‚à® Œ≥') √ó App e e' √ó (Œ± ‚à® Œ±')
evalBwd (V.Constr Œ≤ _ vs) (T.AppConstr (t1 √ó c √ó _) t2) =
   let { init: vs', last: v2 } = definitely' (unsnoc vs)
       Œ≥ √ó e √ó Œ± = evalBwd (V.Constr Œ≤ c vs') t1
       Œ≥' √ó e' √ó Œ±' = evalBwd v2 t2 in
   (Œ≥ ‚à® Œ≥') √ó App e e' √ó (Œ± ‚à® Œ±')
evalBwd v (T.Let (T.VarDef w t1) t2) =
   let Œ≥1Œ≥2 √ó e2 √ó Œ±2 = evalBwd v t2
       Œ≥1 √ó Œ≥2 = concat_inv (bv w) Œ≥1Œ≥2
       v' √ó œÉ = matchBwd Œ≥2 ContNone Œ±2 w
       Œ≥1' √ó e1 √ó Œ±1 = evalBwd v' t1 in
   (Œ≥1 ‚à® Œ≥1') √ó Let (VarDef œÉ e1) e2 √ó (Œ±1 ‚à® Œ±2)
evalBwd v (T.LetRec œÅ t) =
   let Œ≥1Œ≥2 √ó e √ó Œ± = evalBwd v t
       Œ≥1 √ó Œ≥2 = concat_inv (B.dom œÅ) Œ≥1Œ≥2
       Œ≥1' √ó œÅ' √ó Œ±' = closeDefsBwd Œ≥2 (Œ≥1 √ó œÅ) in
   (Œ≥1 ‚à® Œ≥1') √ó LetRec œÅ' e √ó (Œ± ‚à® Œ±')
evalBwd _ _ = error absurd
