module App.Fig where

import Prelude hiding (absurd, compare)

import App.CodeMirror (EditorView, addEditorView, dispatch, getContentsLength, update)
import App.Util (ReactState, ùïä, ar‚Ñù, getPersistent, getTransient, kindOfBot, reactState, toùïä, vReact)
import App.Util.Selector (envRVal)
import App.View (view)
import App.View.Util (Direction(..), Fig, FigSpec, HTMLId, View, drawView)
import Bind (Var)
import Data.Maybe (Maybe(..))
import Data.Newtype (unwrap)
import Data.Profunctor.Strong ((***))
import Data.Set as Set
import Data.Traversable (sequence_)
import Desugarable (desug)
import Effect (Effect)
import EvalGraph (graphEval, graphGC, withOp)
import GaloisConnection ((***)) as GC
import GaloisConnection (GaloisConnection(..), dual, meet)
import Lattice (class BoundedMeetSemilattice, Raw, ùîπ, botOf, erase, neg, topOf)
import Module (File, initialConfig, loadProgCxt, open)
import Partial.Unsafe (unsafePartial)
import Pretty (prettyP)
import Test.Util.Debug (tracing)
import Util (type (√ó), AffError, Endo, Setter, spyWhen, (√ó))
import Util.Map (insert, lookup, mapWithKey)
import Val (Env(..), EnvExpr(..), Val, unrestrictGC)

str
   :: { output :: String -- pseudo-variable to use as name of output view
      , input :: String -- prefix for input views
      }
str =
   { output: "output"
   , input: "input"
   }

selectOutput :: Setter Fig (Val (ReactState ùîπ))
selectOutput Œ¥v fig@{ dir, Œ≥, v } = fig
   { v = Œ¥v v
   , Œ≥ = if dir == LinkedInputs then kindOfBot <$> Œ≥ else Œ≥
   , dir = LinkedOutputs
   }

setOutputView :: Setter Fig View
setOutputView Œ¥vw fig = fig
   { out_view = fig.out_view <#> Œ¥vw
   }

selectInput :: Var -> Setter Fig (Val (ReactState ùîπ))
selectInput x Œ¥v fig@{ dir, Œ≥, v } = fig
   { Œ≥ = envRVal x Œ¥v Œ≥
   , v = if dir == LinkedOutputs then kindOfBot <$> v else v
   , dir = LinkedInputs
   }

setInputView :: Var -> Setter Fig View
setInputView x Œ¥vw fig = fig
   { in_views = insert x (lookup x fig.in_views # join <#> Œ¥vw) fig.in_views
   }

-- I want to take a gc, (possibly with dual) on Env B and Val B, and produce a connection on Env rs and Val rs
-- to deal with rs reasonably, I need to define what an inert set is - which we can do as v0
-- should this be more explicitly done on tuples?
-- from an input as B, I can obtain a ReactState S, it's just whether I wish to here.
-- generalise Env, Val to f,g?
lift :: GaloisConnection (Env ùîπ) (Val ùîπ) -> GaloisConnection (Env (ReactState ùîπ)) (Val (ReactState ùîπ))
lift (GC gc) = (GC { bwd: bwd1, fwd: fwd1 })
   where
   fwd1 :: Env (ReactState ùîπ) -> Val (ReactState ùîπ)
   fwd1 Œ≥ = reactState <$> v0 <*> v1 <*> v2
      where
      -- should v0 not be gc_dual with a bwd
      -- deeper problems here regarding not inert (i.e. union topOf not inert, but solvable on their own)
      v0 = gc.fwd (botOf Œ≥)
      v1 = gc.fwd (Œ≥ <#> getPersistent)
      v2 = gc.fwd (getTransient <$> Œ≥)

   bwd1 :: Val (ReactState ùîπ) -> Env (ReactState ùîπ)
   bwd1 v = reactState <$> v0 <*> v1 <*> v2
      where
      v0 = gc.bwd (botOf v)
      v1 = gc.bwd (v <#> getPersistent)
      v2 = gc.bwd (v <#> getTransient)

liftdual :: GaloisConnection (Val ùîπ) (Env ùîπ) -> GaloisConnection (Val (ReactState ùîπ)) (Env (ReactState ùîπ))
liftdual (GC gc) = (GC { bwd: bwd1, fwd: fwd1 })
   where
   fwd1 :: Val (ReactState ùîπ) -> Env (ReactState ùîπ)
   fwd1 Œ≥ = reactState <$> v0 <*> v1 <*> v2
      where
      -- should v0 not be gc_dual with a bwd
      -- deeper problems here regarding not inert (i.e. union topOf not inert, but solvable on their own)
      v0 = gc.fwd (botOf Œ≥)
      v1 = gc.fwd (Œ≥ <#> getPersistent)
      v2 = gc.fwd (getTransient <$> Œ≥)

   bwd1 :: Env (ReactState ùîπ) -> Val (ReactState ùîπ)
   bwd1 v = reactState <$> v0 <*> v1 <*> v2
      where
      v0 = gc.bwd (botOf v)
      v1 = gc.bwd (v <#> getPersistent)
      v2 = gc.bwd (v <#> getTransient)

selectionResult :: Fig -> Val (ReactState ùïä) √ó Env (ReactState ùïä)
selectionResult fig@{ v, dir: LinkedOutputs } =
   (ar‚Ñù <$> v <*> v1) √ó (toùïä <$> report Œ≥1)

   where
   report = spyWhen tracing.mediatingData "Mediating inputs" prettyP

   GC gc2 = ((liftdual fig.gc_dual) `GC.(***)` identity) >>> meet >>> (lift fig.gc)
   --GC gc1 = lift fig.gc
   -- Lift doesn't act on tuples rn, but I don't think this is a problem yet?
   -- dual meet here?
   v1 √ó Œ≥1 = gc2.bwd (v)

selectionResult fig@{ Œ≥, dir: LinkedInputs } =
   (toùïä <$> report v1) √ó (ar‚Ñù <$> Œ≥ <*> Œ≥1)
   where
   report = spyWhen tracing.mediatingData "Mediating outputs" prettyP
   GC gc2 = ((lift fig.gc) `GC.(***)` identity) >>> meet >>> (liftdual fig.gc_dual)
   --GC gc1 = lift fig.gc
   --v1 = gc1.fwd (Œ≥)
   Œ≥1 √ó v1 = gc2.bwd (Œ≥)

{-}
selectionResult :: Fig -> Val (ReactState ùïä) √ó Env (ReactState ùïä)
selectionResult fig@{ Œ≥0, v, dir: LinkedOutputs } =
   (as‚Ñù <$> v <*> (selState <$> v1 <*> v2)) √ó (to‚Ñù <$> Œ≥0 <*> report (selState <$> Œ≥1 <*> Œ≥2))
   where
   report = spyWhen tracing.mediatingData "Mediating inputs" prettyP
   GC gc = (fig.gc_dual `GC.(***)` identity) >>> meet >>> fig.gc

   v1 √ó Œ≥1 = gc.bwd (v <#> unwrap >>> _.persistent)
   v2 √ó Œ≥2 = gc.bwd (v <#> unwrap >>> _.transient)


selectionResult fig@{ Œ≥, dir: LinkedInputs } =
   (to‚Ñù <$> v0 <*> report   (selState <$> v1 <*> v2)) √ó
      wrap (mapWithKey (\x v -> as‚Ñù <$> get x Œ≥ <*> v) (unwrap (selState <$> Œ≥1 <*> Œ≥2)))
   where
   --report = spyWhen tracing.mediatingData "Mediating outputs" prettyP
   GC gc = (fig.gc `GC.(***)` identity) >>> meet >>> fig.gc_dual
   Œ≥1 √ó v1 = gc.bwd (Œ≥ <#> unwrap >>> _.persistent)
   Œ≥2 √ó v2 = gc.bwd (Œ≥ <#> unwrap >>> _.transient)
-}
--_ √ó v0 = neg (gc.bwd (topOf Œ≥))

drawFig :: HTMLId -> Fig -> Effect Unit
drawFig divId fig = do
   drawView { divId, suffix: str.output, view: out_view } selectOutput setOutputView redraw
   sequence_ $ flip mapWithKey in_views \x view -> do
      drawView { divId: divId <> "-" <> str.input, suffix: x, view } (selectInput x) (setInputView x) redraw
   where
   redraw = (_ $ fig) >>> drawFig divId
   out_view √ó in_views =
      selectionResult fig # unsafePartial
         (flip (view str.output) fig.out_view *** \(Env Œ≥) -> mapWithKey view Œ≥ <*> fig.in_views)

drawFile :: File √ó String -> Effect Unit
drawFile (file √ó src) =
   addEditorView (codeMirrorDiv $ unwrap file) >>= drawCode src

unprojExpr :: forall a. BoundedMeetSemilattice a => Raw EnvExpr -> GaloisConnection (Env a) (EnvExpr a)
unprojExpr (EnvExpr _ e) = GC
   { fwd: \Œ≥ -> EnvExpr Œ≥ (topOf e)
   , bwd: \(EnvExpr Œ≥ _) -> Œ≥
   }

loadFig :: forall m. FigSpec -> AffError m Fig
loadFig spec@{ inputs, imports, file, datasets } = do
   s <- open file
   e <- desug s
   gconfig <- loadProgCxt imports datasets >>= initialConfig e
   eval@({ inŒ±: EnvExpr Œ≥Œ± _, outŒ± }) <- graphEval gconfig e
   let
      EnvExpr Œ≥ e' = erase eval.inŒ±
      focus = unrestrictGC Œ≥ (Set.fromFoldable inputs) >>> unprojExpr (EnvExpr Œ≥ e')
      gc = focus >>> graphGC eval
      gc_dual = graphGC (withOp eval) >>> dual focus
      in_views = mapWithKey (\_ _ -> Nothing) (unwrap Œ≥)

      Œ≥0 = neg (unwrap gc).bwd (topOf outŒ±)
      v0 = neg (unwrap gc_dual).bwd (topOf Œ≥Œ±)
   --gc1_dual = ((lift gc) `GC.(***)` identity) >>> meet >>> (liftdual gc_dual)
   --gc1 = ((liftdual gc_dual) `GC.(***)` identity) >>> meet >>> (lift gc)
   {-v: botOf outŒ±
   Œ≥: botOf Œ≥Œ±-}

   pure { spec, s, Œ≥: vReact <$> Œ≥0 <*> botOf Œ≥Œ±, v: vReact <$> v0 <*> botOf outŒ±, gc, gc_dual, dir: LinkedOutputs, in_views, out_view: Nothing }

codeMirrorDiv :: Endo String
codeMirrorDiv = ("codemirror-" <> _)

drawFigWithCode :: { fig :: Fig, divId :: HTMLId } -> Effect Unit
drawFigWithCode { fig, divId } = do
   drawFig divId fig
   addEditorView (codeMirrorDiv divId) >>= drawCode (prettyP fig.s)

drawCode :: String -> EditorView -> Effect Unit
drawCode s ed =
   dispatch ed =<< update ed.state [ { changes: { from: 0, to: getContentsLength ed, insert: s } } ]
