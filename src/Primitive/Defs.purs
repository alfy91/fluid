module Primitive.Defs where

import Prelude hiding (absurd, div)
import Prelude (div) as P
import Data.Foldable (foldl)
import Data.Int (ceil, floor, toNumber)
import Data.List (List(..))
import Data.Map (Map, fromFoldable)
import Debug.Trace (trace)
import Math (log, pow) as M
import Text.Parsing.Parser.Expr (Assoc(..))
import Bindings (Bindings(..), (:+:), (‚Ü¶))
import DataType (cCons)
import Lattice (ùîπ)
import Primitive (
   Binary, OpDef, Unary, depends1, depends2, depends2Zero, opDef, union, union1, unionStr, withInverse1, withInverse2
)
import Util (type (√ó), (√ó), type (+), (‚âú), (!), absurd, error, unsafeUpdateAt)
import Val (Env, MatrixRep, Val(..))

-- Syntactic information only. No requirement that any of these be defined.
opDefs :: Map String OpDef
opDefs = fromFoldable [
   opDef "!"   8 AssocLeft,
   opDef "**"  8 AssocRight,
   opDef "*"   7 AssocLeft,
   opDef "/"   7 AssocLeft,
   opDef "+"   6 AssocLeft,
   opDef "-"   6 AssocLeft,
   opDef ":"   6 AssocRight,
   opDef "++"  5 AssocRight,
   opDef "=="  4 AssocNone,
   opDef "/="  4 AssocNone,
   opDef "<"   4 AssocLeft,
   opDef ">"   4 AssocLeft,
   opDef "<="  4 AssocLeft,
   opDef ">="  4 AssocLeft
]

primitives :: Env ùîπ
primitives = foldl (:+:) Empty [
   ":"         ‚Ü¶ Constr false cCons Nil,

   "+"         ‚Ü¶ depends2 (withInverse2 plus),
   "-"         ‚Ü¶ depends2 (withInverse2 minus),
   "*"         ‚Ü¶ depends2Zero (withInverse2 times),
   "**"        ‚Ü¶ depends2Zero (withInverse2 pow),
   "/"         ‚Ü¶ depends2Zero (withInverse2 divide),
   "=="        ‚Ü¶ depends2 (withInverse2 equals),
   "/="        ‚Ü¶ depends2 (withInverse2 notEquals),
   "<"         ‚Ü¶ depends2 (withInverse2 lessThan),
   ">"         ‚Ü¶ depends2 (withInverse2 greaterThan),
   "<="        ‚Ü¶ depends2 (withInverse2 lessThanEquals),
   ">="        ‚Ü¶ depends2 (withInverse2 greaterThanEquals),
   "++"        ‚Ü¶ depends2 (withInverse2 concat),
   "!"         ‚Ü¶ depends2 matrixLookup,
   "div"       ‚Ü¶ depends2Zero (withInverse2 div),

   "ceiling"   ‚Ü¶ depends1 (withInverse1 ceil),
   "debugLog"  ‚Ü¶ depends1 (withInverse1 debugLog),
   "dims"      ‚Ü¶ depends1 dims,
   "error"     ‚Ü¶ depends1 (withInverse1 error_),
   "floor"     ‚Ü¶ depends1 (withInverse1 floor),
   "log"       ‚Ü¶ depends1 (withInverse1 log),
   "numToStr"  ‚Ü¶ depends1 (withInverse1 numToStr)
]

debugLog :: Val ùîπ -> Val ùîπ
debugLog x = trace x (const x)

error_ :: String -> Val ùîπ
error_ = error

dims :: Unary (MatrixRep ùîπ) (Val ùîπ √ó Val ùîπ)
dims = { fwd, bwd }
   where
   fwd :: MatrixRep ùîπ -> Val ùîπ √ó Val ùîπ
   fwd (_ √ó (i √ó Œ≤) √ó (j √ó Œ≤')) = Int Œ≤ i √ó Int Œ≤' j

   bwd :: Val ùîπ √ó Val ùîπ -> MatrixRep ùîπ -> MatrixRep ùîπ
   bwd (Int Œ≤ i' √ó Int Œ≤' j') (vss √ó (i √ó _) √ó (j √ó _))  = vss √ó ((i ‚âú i') √ó Œ≤) √ó ((j ‚âú j') √ó Œ≤')
   bwd (_ √ó _) _                                         = error absurd

matrixLookup :: Binary (MatrixRep ùîπ) ((Int √ó ùîπ) √ó (Int √ó ùîπ)) (Val ùîπ)
matrixLookup = { fwd, bwd }
   where
   fwd :: MatrixRep ùîπ -> (Int √ó ùîπ) √ó (Int √ó ùîπ) -> Val ùîπ
   fwd (vss √ó _ √ó _) ((i √ó _) √ó (j √ó _)) = vss!(i - 1)!(j - 1)

   -- This is the desired behaviour, but should be more automatic: non-neededness of matrix bounds and indices
   -- should arise from the fact that no "construction rights" are needed for projection.
   bwd :: Val ùîπ -> MatrixRep ùîπ √ó ((Int √ó ùîπ) √ó (Int √ó ùîπ)) -> MatrixRep ùîπ √ó ((Int √ó ùîπ) √ó (Int √ó ùîπ))
   bwd v (vss √ó (i' √ó _) √ó (j' √ó _) √ó ((i √ó _) √ó (j √ó _))) =
       (vss'' √ó (i' √ó false) √ó (j' √ó false)) √ó ((i √ó false) √ó (j √ó false))
       where vss'  = (<$>) (const Hole) <$> vss
             vs_i  = vss'!(i - 1)
             vss'' = unsafeUpdateAt (i - 1) (unsafeUpdateAt (j - 1) v vs_i) vss'

plus :: Int + Number -> Int + Number -> Int + Number
plus = (+) `union` (+)

minus :: Int + Number -> Int + Number -> Int + Number
minus = (-) `union` (-)

times :: Int + Number -> Int + Number -> Int + Number
times = (*) `union` (*)

-- PureScript's / and pow aren't defined at Int -> Int -> Number, so roll our own
pow :: Int + Number -> Int + Number -> Int + Number
pow = (\x y -> toNumber x `M.pow` toNumber y) `union` M.pow

divide :: Int + Number -> Int + Number -> Int + Number
divide = (\x y -> toNumber x / toNumber y)  `union` (/)

div :: Int -> Int -> Int
div = P.div

equals :: Int + Number + String -> Int + Number + String -> Boolean
equals = (==) `union` (==) `unionStr` (==)

notEquals :: Int + Number + String -> Int + Number + String -> Boolean
notEquals = (/=) `union` (/=) `unionStr` (/=)

lessThan :: Int + Number + String -> Int + Number + String -> Boolean
lessThan = (<)  `union` (<)  `unionStr` (<)

greaterThan :: Int + Number + String -> Int + Number + String -> Boolean
greaterThan = (>)  `union` (>)  `unionStr` (>)

lessThanEquals :: Int + Number + String -> Int + Number + String -> Boolean
lessThanEquals = (<=) `union` (<=) `unionStr` (<=)

greaterThanEquals :: Int + Number + String -> Int + Number + String -> Boolean
greaterThanEquals = (>=) `union` (>=) `unionStr` (>=)

concat :: String -> String -> String
concat = (<>)

numToStr :: Int + Number -> String
numToStr = show `union1` show

log :: Int + Number -> Number
log = (toNumber >>> M.log) `union1` M.log
