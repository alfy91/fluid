module Primitive.Defs where

import Prelude hiding (absurd, div)
import Prelude (div) as P
import Data.Foldable (foldl)
import Data.Int (ceil, floor, toNumber)
import Data.List (List(..))
import Data.Map (Map, fromFoldable)
import Debug.Trace (trace)
import Math (log, pow) as M
import Text.Parsing.Parser.Expr (Assoc(..))
import Bindings (Bindings(..), (:+:), (‚Ü¶))
import DataType (cCons)
import Lattice (ùîπ)
import Primitive (
   Binary, BinarySpec, OpDef, UnarySpec,
   binary, depends, depends2, dependsBoth, dependsBoth2, dependsZero, opDef, unary, union, union1, unionStr
)
import Util (type (√ó), (√ó), type (+), (‚âú), (!), absurd, error, unsafeUpdateAt)
import Val (Env, MatrixRep, Val(..))

-- Syntactic information only. No requirement that any of these be defined.
opDefs :: Map String OpDef
opDefs = fromFoldable [
   opDef "!"   8 AssocLeft,
   opDef "**"  8 AssocRight,
   opDef "*"   7 AssocLeft,
   opDef "/"   7 AssocLeft,
   opDef "+"   6 AssocLeft,
   opDef "-"   6 AssocLeft,
   opDef ":"   6 AssocRight,
   opDef "++"  5 AssocRight,
   opDef "=="  4 AssocNone,
   opDef "/="  4 AssocNone,
   opDef "<"   4 AssocLeft,
   opDef ">"   4 AssocLeft,
   opDef "<="  4 AssocLeft,
   opDef ">="  4 AssocLeft
]

primitives :: Env ùîπ
primitives = foldl (:+:) Empty [
   ":"         ‚Ü¶ Constr false cCons Nil,
   "+"         ‚Ü¶ binary (dependsBoth2 plus),
   "-"         ‚Ü¶ binary (dependsBoth2 minus),
   "*"         ‚Ü¶ binary (dependsZero times),
   "**"        ‚Ü¶ binary (dependsZero pow),
   "/"         ‚Ü¶ binary (dependsZero divide),
   "=="        ‚Ü¶ binary (dependsBoth equals),
   "/="        ‚Ü¶ binary (dependsBoth notEquals),
   "<"         ‚Ü¶ binary (dependsBoth lessThan),
   ">"         ‚Ü¶ binary (dependsBoth greaterThan),
   "<="        ‚Ü¶ binary (dependsBoth lessThanEquals),
   ">="        ‚Ü¶ binary (dependsBoth greaterThanEquals),
   "++"        ‚Ü¶ binary (dependsBoth concat),
   "!"         ‚Ü¶ binary matrixLookup,
   "ceiling"   ‚Ü¶ unary (depends ceil),
   "debugLog"  ‚Ü¶ unary (depends debugLog),
   "dims"      ‚Ü¶ unary dims,
   "div"       ‚Ü¶ binary (dependsZero div),
   "error"     ‚Ü¶ unary (depends error_),
   "floor"     ‚Ü¶ unary (depends floor),
   "log"       ‚Ü¶ unary (depends log),
   "numToStr"  ‚Ü¶ unary (depends numToStr)
]

debugLog :: Val ùîπ -> Val ùîπ
debugLog x = trace x (const x)

error_ :: String -> Val ùîπ
error_ = error

dims :: UnarySpec (MatrixRep ùîπ) (Val ùîπ √ó Val ùîπ)
dims = depends2 { f, g }
   where
   f :: MatrixRep ùîπ -> Val ùîπ √ó Val ùîπ
   f (_ √ó (i √ó Œ≤) √ó (j √ó Œ≤')) = Int Œ≤ i √ó Int Œ≤' j

   g :: Val ùîπ √ó Val ùîπ -> MatrixRep ùîπ -> MatrixRep ùîπ
   g (Int Œ≤ i' √ó Int Œ≤' j') (vss √ó (i √ó _) √ó (j √ó _))  = vss √ó ((i ‚âú i') √ó Œ≤) √ó ((j ‚âú j') √ó Œ≤')
   g (_ √ó _) _                                         = error absurd

matrixLookup :: BinarySpec (MatrixRep ùîπ) ((Int √ó ùîπ) √ó (Int √ó ùîπ)) (Val ùîπ)
matrixLookup = dependsBoth2 { f, g }
   where
   f :: MatrixRep ùîπ -> (Int √ó ùîπ) √ó (Int √ó ùîπ) -> Val ùîπ
   f (vss √ó _ √ó _) ((i √ó _) √ó (j √ó _)) = vss!(i - 1)!(j - 1)

   g :: Val ùîπ -> MatrixRep ùîπ √ó ((Int √ó ùîπ) √ó (Int √ó ùîπ)) -> MatrixRep ùîπ √ó ((Int √ó ùîπ) √ó (Int √ó ùîπ))
   g v (vss √ó (i' √ó _) √ó (j' √ó _) √ó ((i √ó _) √ó (j √ó _))) =
     (vss'' √ó (i' √ó false) √ó (j' √ó false)) √ó ((i √ó false) √ó (j √ó false))
     where vss'  = (<$>) (const Hole) <$> vss
           vs_i  = vss'!(i - 1)
           vss'' = unsafeUpdateAt (i - 1) (unsafeUpdateAt (j - 1) v vs_i) vss'

plus :: Binary (Int + Number) (Int + Number) (Int + Number)
plus = { f: (+) `union` (+), g: const identity }

minus :: Binary (Int + Number) (Int + Number) (Int + Number)
minus = { f: (-) `union` (-), g: const identity }

times :: Binary (Int + Number) (Int + Number) (Int + Number)
times = { f: (*) `union` (*), g: const identity }

-- PureScript's / and pow aren't defined at Int -> Int -> Number, so roll our own
pow :: Binary (Int + Number) (Int + Number) (Int + Number)
pow = { f: (\x y -> toNumber x `M.pow` toNumber y) `union` M.pow, g: const identity }

divide :: Binary (Int + Number) (Int + Number) (Int + Number)
divide = { f: (\x y -> toNumber x / toNumber y)  `union` (/), g: const identity }

div :: Binary Int Int Int
div = { f: P.div, g: const identity }

equals :: Int + Number + String -> Int + Number + String -> Boolean
equals = (==) `union` (==) `unionStr` (==)

notEquals :: Int + Number + String -> Int + Number + String -> Boolean
notEquals = (/=) `union` (/=) `unionStr` (/=)

lessThan :: Int + Number + String -> Int + Number + String -> Boolean
lessThan = (<)  `union` (<)  `unionStr` (<)

greaterThan :: Int + Number + String -> Int + Number + String -> Boolean
greaterThan = (>)  `union` (>)  `unionStr` (>)

lessThanEquals :: Int + Number + String -> Int + Number + String -> Boolean
lessThanEquals = (<=) `union` (<=) `unionStr` (<=)

greaterThanEquals :: Int + Number + String -> Int + Number + String -> Boolean
greaterThanEquals = (>=) `union` (>=) `unionStr` (>=)

concat :: String -> String -> String
concat = (<>)

numToStr :: Int + Number -> String
numToStr = show `union1` show

log :: Int + Number -> Number
log = (toNumber >>> M.log) `union1` M.log
