module Primitive.Defs where

import Prelude hiding (absurd, div)
import Prelude (div) as P
import Data.Foldable (foldl)
import Data.Int (ceil, floor, toNumber)
import Data.List (List(..))
import Data.Map (Map, fromFoldable)
import Debug.Trace (trace)
import Math (log, pow) as M
import Text.Parsing.Parser.Expr (Assoc(..))
import Bindings (Bindings(..), (:+:), (‚Ü¶))
import DataType (cCons)
import Lattice (ùîπ)
import Primitive (
   Binary, BinarySpec, OpDef, UnarySpec,
   binary, depends1, depends2, depends2Zero, opDef, unary, union, union1, unionStr, withInverse1, withInverse2
)
import Util (type (√ó), (√ó), type (+), (‚âú), (!), absurd, error, unsafeUpdateAt)
import Val (Env, MatrixRep, Val(..))

-- Syntactic information only. No requirement that any of these be defined.
opDefs :: Map String OpDef
opDefs = fromFoldable [
   opDef "!"   8 AssocLeft,
   opDef "**"  8 AssocRight,
   opDef "*"   7 AssocLeft,
   opDef "/"   7 AssocLeft,
   opDef "+"   6 AssocLeft,
   opDef "-"   6 AssocLeft,
   opDef ":"   6 AssocRight,
   opDef "++"  5 AssocRight,
   opDef "=="  4 AssocNone,
   opDef "/="  4 AssocNone,
   opDef "<"   4 AssocLeft,
   opDef ">"   4 AssocLeft,
   opDef "<="  4 AssocLeft,
   opDef ">="  4 AssocLeft
]

primitives :: Env ùîπ
primitives = foldl (:+:) Empty [
   ":"         ‚Ü¶ Constr false cCons Nil,
   "+"         ‚Ü¶ binary (depends2 plus),
   "-"         ‚Ü¶ binary (depends2 minus),
   "*"         ‚Ü¶ binary (depends2Zero times),
   "**"        ‚Ü¶ binary (depends2Zero pow),
   "/"         ‚Ü¶ binary (depends2Zero divide),
   "=="        ‚Ü¶ binary (depends2 equals),
   "/="        ‚Ü¶ binary (depends2 notEquals),
   "<"         ‚Ü¶ binary (depends2 lessThan),
   ">"         ‚Ü¶ binary (depends2 greaterThan),
   "<="        ‚Ü¶ binary (depends2 lessThanEquals),
   ">="        ‚Ü¶ binary (depends2 greaterThanEquals),
   "++"        ‚Ü¶ binary (depends2 concat),
   "!"         ‚Ü¶ binary matrixLookup,
   "div"       ‚Ü¶ binary (depends2Zero div),

   "ceiling"   ‚Ü¶ unary (withInverse1 ceil),
   "debugLog"  ‚Ü¶ unary (withInverse1 debugLog),
   "dims"      ‚Ü¶ unary dims,
   "error"     ‚Ü¶ unary (withInverse1 error_),
   "floor"     ‚Ü¶ unary (withInverse1 floor),
   "log"       ‚Ü¶ unary (withInverse1 log),
   "numToStr"  ‚Ü¶ unary (withInverse1 numToStr)
]

debugLog :: Val ùîπ -> Val ùîπ
debugLog x = trace x (const x)

error_ :: String -> Val ùîπ
error_ = error

dims :: UnarySpec (MatrixRep ùîπ) (Val ùîπ √ó Val ùîπ)
dims = depends1 { f, g }
   where
   f :: MatrixRep ùîπ -> Val ùîπ √ó Val ùîπ
   f (_ √ó (i √ó Œ≤) √ó (j √ó Œ≤')) = Int Œ≤ i √ó Int Œ≤' j

   g :: Val ùîπ √ó Val ùîπ -> MatrixRep ùîπ -> MatrixRep ùîπ
   g (Int Œ≤ i' √ó Int Œ≤' j') (vss √ó (i √ó _) √ó (j √ó _))  = vss √ó ((i ‚âú i') √ó Œ≤) √ó ((j ‚âú j') √ó Œ≤')
   g (_ √ó _) _                                         = error absurd

matrixLookup :: BinarySpec (MatrixRep ùîπ) ((Int √ó ùîπ) √ó (Int √ó ùîπ)) (Val ùîπ)
matrixLookup = depends2 { f, g }
   where
   f :: MatrixRep ùîπ -> (Int √ó ùîπ) √ó (Int √ó ùîπ) -> Val ùîπ
   f (vss √ó _ √ó _) ((i √ó _) √ó (j √ó _)) = vss!(i - 1)!(j - 1)

   g :: Val ùîπ -> MatrixRep ùîπ √ó ((Int √ó ùîπ) √ó (Int √ó ùîπ)) -> MatrixRep ùîπ √ó ((Int √ó ùîπ) √ó (Int √ó ùîπ))
   g v (vss √ó (i' √ó _) √ó (j' √ó _) √ó ((i √ó _) √ó (j √ó _))) =
     (vss'' √ó (i' √ó false) √ó (j' √ó false)) √ó ((i √ó false) √ó (j √ó false))
     where vss'  = (<$>) (const Hole) <$> vss
           vs_i  = vss'!(i - 1)
           vss'' = unsafeUpdateAt (i - 1) (unsafeUpdateAt (j - 1) v vs_i) vss'

plus :: Binary (Int + Number) (Int + Number) (Int + Number)
plus = { f: (+) `union` (+), g: const identity }

minus :: Binary (Int + Number) (Int + Number) (Int + Number)
minus = { f: (-) `union` (-), g: const identity }

times :: Binary (Int + Number) (Int + Number) (Int + Number)
times = { f: (*) `union` (*), g: const identity }

-- PureScript's / and pow aren't defined at Int -> Int -> Number, so roll our own
pow :: Binary (Int + Number) (Int + Number) (Int + Number)
pow = { f: (\x y -> toNumber x `M.pow` toNumber y) `union` M.pow, g: const identity }

divide :: Binary (Int + Number) (Int + Number) (Int + Number)
divide = { f: (\x y -> toNumber x / toNumber y)  `union` (/), g: const identity }

div :: Binary Int Int Int
div = { f: P.div, g: const identity }

equals :: Binary (Int + Number + String) (Int + Number + String) Boolean
equals = { f: (==) `union` (==) `unionStr` (==), g: const identity }

notEquals :: Binary (Int + Number + String) (Int + Number + String) Boolean
notEquals = { f: (/=) `union` (/=) `unionStr` (/=), g: const identity }

lessThan :: Binary (Int + Number + String) (Int + Number + String) Boolean
lessThan = { f: (<)  `union` (<)  `unionStr` (<), g: const identity }

greaterThan :: Binary (Int + Number + String) (Int + Number + String) Boolean
greaterThan = { f: (>)  `union` (>)  `unionStr` (>), g: const identity }

lessThanEquals :: Binary (Int + Number + String) (Int + Number + String) Boolean
lessThanEquals = { f: (<=) `union` (<=) `unionStr` (<=), g: const identity }

greaterThanEquals :: Binary (Int + Number + String) (Int + Number + String) Boolean
greaterThanEquals = { f: (>=) `union` (>=) `unionStr` (>=), g: const identity }

concat :: Binary String String String
concat = { f: (<>), g: const identity }

numToStr :: Int + Number -> String
numToStr = show `union1` show

log :: Int + Number -> Number
log = (toNumber >>> M.log) `union1` M.log
