module Primitive2 where

import Prelude hiding (absurd, apply)
import Data.Either (Either(..))
import Data.Foldable (foldl)
import Data.Int (ceil, floor, toNumber)
import Data.List (List(..), (:))
import Data.Map (Map, fromFoldable)
import Data.Profunctor.Strong (first)
import Debug.Trace (trace)
import Math (log, pow)
import Text.Parsing.Parser.Expr (Assoc(..))
import Bindings (Bindings(..), Var, (:+:), (‚Ü¶))
import DataType (cCons, cFalse, cPair, cTrue)
import Lattice (ùîπ, (‚àß))
import Util (type (√ó), (√ó), type (+), (!), absurd, dup, error, unsafeUpdateAt)
import Val2 (MatrixRep, Val(..), getŒ±, setŒ±)

-- name in user land, precedence 0 from 9 (similar from Haskell 98), associativity
type OpDef = {
   op    :: Var,
   prec  :: Int,
   assoc :: Assoc
}

opDef :: Var -> Int -> Assoc -> Var √ó OpDef
opDef op prec assoc = op √ó { op, prec, assoc }

-- Syntactic information only. No guarantee that any of these will be defined.
opDefs :: Map String OpDef
opDefs = fromFoldable [
   opDef "!"   8 AssocLeft,
   opDef "**"  8 AssocRight,
   opDef "*"   7 AssocLeft,
   opDef "/"   7 AssocLeft,
   opDef "+"   6 AssocLeft,
   opDef "-"   6 AssocLeft,
   opDef ":"   6 AssocRight,
   opDef "++"  5 AssocRight,
   opDef "=="  4 AssocNone,
   opDef "/="  4 AssocNone,
   opDef "<"   4 AssocLeft,
   opDef ">"   4 AssocLeft,
   opDef "<="  4 AssocLeft,
   opDef ">="  4 AssocLeft
]

class From a where
   from :: Val ùîπ -> a √ó ùîπ

class To a where
   to :: a √ó ùîπ -> Val ùîπ

instance fromVal :: From (Val Boolean) where
   from v = v √ó getŒ± v

instance toVal :: To (Val Boolean) where
   to (v √ó Œ±) = setŒ± Œ± v

instance fromInt :: From Int where
   from (Int Œ± n)   = n √ó Œ±
   from _           = error "Int expected"

instance toInt :: To Int where
   to (n √ó Œ±) = Int Œ± n

instance fromNumber :: From Number where
   from (Float Œ± n) = n √ó Œ±
   from _           = error "Float expected"

instance toNumber :: To Number where
   to (n √ó Œ±) = Float Œ± n

instance fromString :: From String where
   from (Str Œ± str) = str √ó Œ±
   from _           = error "Str expected"

instance toString :: To String where
   to (str √ó Œ±) = Str Œ± str

instance fromIntOrNumber :: From (Int + Number) where
   from (Int Œ± n)    = Left n √ó Œ±
   from (Float Œ± n)  = Right n √ó Œ±
   from _            = error "Int or Float expected"

instance toIntOrNumber :: To (Int + Number) where
   to (Left n √ó Œ±)    = Int Œ± n
   to (Right n √ó Œ±)   = Float Œ± n

instance fromIntOrNumberOrString :: From (Either (Either Int Number) String) where
   from (Int Œ± n)   = Left (Left n) √ó Œ±
   from (Float Œ± n) = Left (Right n) √ó Œ±
   from (Str Œ± n)   = Right n √ó Œ±
   from _           = error "Int, Float or Str expected"

instance fromIntAndInt :: From (Int √ó Boolean √ó (Int √ó Boolean)) where
   from (Constr Œ± c (v : v' : Nil)) | c == cPair  = from v √ó from v' √ó Œ±
   from _                                         = error "Pair expected"

instance fromMatrixRep :: From (Array (Array (Val Boolean)) √ó (Int √ó Boolean) √ó (Int √ó Boolean)) where
   from (Matrix Œ± (vss √ó i √ó j))   = vss √ó i √ó j √ó Œ±
   from _                          = error "Matrix expected"

instance toPair :: To (Val Boolean √ó Val Boolean) where
   to (v √ó v' √ó Œ±) = Constr Œ± cPair (v : v' : Nil)

unary :: forall a b . From a => To b => (a √ó ùîπ -> b √ó ùîπ) -> Val ùîπ
unary op = Primitive (from >>> op >>> to)

binary :: forall a b c . From a => From b => To c => (a √ó ùîπ -> b √ó ùîπ -> c √ó ùîπ) -> Val ùîπ
binary op = Primitive (from >>> op >>> unary)

apply :: Val ùîπ -> Val ùîπ -> Val ùîπ
apply (Primitive op)   = op
apply _                = error absurd

depends :: forall a b . (a -> b) -> a √ó ùîπ -> b √ó ùîπ
depends = first

depends_bwd :: ùîπ -> ùîπ
depends_bwd = identity

dependsBoth :: forall a b c . (a -> b -> c) -> a √ó ùîπ -> b √ó ùîπ -> c √ó ùîπ
dependsBoth op (x √ó Œ±) (y √ó Œ≤) = x `op` y √ó (Œ± ‚àß Œ≤)

dependsBoth_bwd :: ùîπ -> ùîπ √ó ùîπ
dependsBoth_bwd = dup

dependsNeither :: forall a b c . (a -> b -> c) -> a √ó ùîπ -> b √ó ùîπ -> c √ó ùîπ
dependsNeither op (x √ó _) (y √ó _) = x `op` y √ó true

dependsNeither_bwd :: ùîπ -> ùîπ √ó ùîπ
dependsNeither_bwd _ = false √ó false

-- Bit of boiler plate for 3 kinds of numeric operation. Should be able to improve this.
class DependsBinary a b c where
   dependsNonZero :: (a -> b -> c) -> a √ó ùîπ -> b √ó ùîπ -> c √ó ùîπ
   dependsNonZero_bwd :: c √ó ùîπ -> (a √ó b) -> ùîπ √ó ùîπ

-- If both are zero, we depend only on the first.
instance dependsNonZeroInt :: DependsBinary Int Int a where
   dependsNonZero op (x √ó Œ±) (y √ó Œ≤)
      | x == 0    = x `op` y √ó Œ±
      | y == 0    = x `op` y √ó Œ≤
      | otherwise = x `op` y √ó (Œ± ‚àß Œ≤)
   dependsNonZero_bwd (_ √ó Œ±) (x √ó y)
      | x == 0    = Œ± √ó false
      | y == 0    = false √ó Œ±
      | otherwise = Œ± √ó Œ±

instance dependsNonZeroNumber :: DependsBinary Number Number a where
   dependsNonZero op (x √ó Œ±) (y √ó Œ≤)
      | x == 0.0  = x `op` y √ó Œ±
      | y == 0.0  = x `op` y √ó Œ≤
      | otherwise = x `op` y √ó (Œ± ‚àß Œ≤)
   dependsNonZero_bwd (_ √ó Œ±) (x √ó y)
      | x == 0.0    = Œ± √ó false
      | y == 0.0    = false √ó Œ±
      | otherwise = Œ± √ó Œ±

instance dependsNonZeroIntOrNumber :: DependsBinary (Int + Number) (Int + Number) a where
   dependsNonZero op (x √ó Œ±) (y √ó Œ≤)
      | x `((==) `union2'` (==))` (Left 0)   = x `op` y √ó Œ±
      | y `((==) `union2'` (==))` (Left 0)   = x `op` y √ó Œ≤
      | otherwise                            = x `op` y √ó (Œ± ‚àß Œ≤)
   dependsNonZero_bwd (_ √ó Œ±) (x √ó y)
      | x `((==) `union2'` (==))` (Left 0)   = Œ± √ó false
      | y `((==) `union2'` (==))` (Left 0)   = false √ó Œ±
      | otherwise                            = Œ± √ó Œ±

instance fromBoolean :: To Boolean where
   to (true √ó Œ±)   = Constr Œ± cTrue Nil
   to (false √ó Œ±)  = Constr Œ± cFalse Nil

primitives :: Bindings Val ùîπ
primitives = foldl (:+:) Empty [
   -- some signatures are specified for clarity or from drive instance resolution
   -- PureScript's / and pow aren't defined at Int -> Int -> Number, so roll our own
   ":"         ‚Ü¶ Constr false cCons Nil,
   "+"         ‚Ü¶ binary (dependsBoth ((+) `union2` (+))),
   "-"         ‚Ü¶ binary (dependsBoth ((-) `union2` (-))),
   "*"         ‚Ü¶ binary (dependsNonZero ((*) `union2` (*))),
   "**"        ‚Ü¶ binary (dependsNonZero ((\x y -> toNumber x `pow` toNumber y) `union2'` pow)),
   "/"         ‚Ü¶ binary (dependsNonZero ((\x y -> toNumber x / toNumber y)  `union2'` (/))),
   "=="        ‚Ü¶ binary (dependsBoth ((==) `union2'` (==) `unionDisj` (==))),
   "/="        ‚Ü¶ binary (dependsBoth ((/=) `union2'` (/=) `unionDisj` (==))),
   "<"         ‚Ü¶ binary (dependsBoth ((<)  `union2'` (<)  `unionDisj` (==))),
   ">"         ‚Ü¶ binary (dependsBoth ((>)  `union2'` (>)  `unionDisj` (==))),
   "<="        ‚Ü¶ binary (dependsBoth ((<=) `union2'` (<=) `unionDisj` (==))),
   ">="        ‚Ü¶ binary (dependsBoth ((>=) `union2'` (>=) `unionDisj` (==))),
   "++"        ‚Ü¶ binary (dependsBoth ((<>) :: String -> String -> String)),
   "!"         ‚Ü¶ binary (dependsNeither matrixLookup),
   "ceiling"   ‚Ü¶ unary (depends ceil),
   "debugLog"  ‚Ü¶ unary (depends debugLog),
   "dims"      ‚Ü¶ unary (depends dims),
   "div"       ‚Ü¶ binary (dependsNonZero (div :: Int -> Int -> Int)),
   "error"     ‚Ü¶ unary (depends  (error :: String -> Boolean)),
   "floor"     ‚Ü¶ unary (depends floor),
   "log"       ‚Ü¶ unary (depends ((toNumber >>> log) `union` log)),
   "numToStr"  ‚Ü¶ unary (depends (show `union` show))
]

debugLog :: Val ùîπ -> Val ùîπ
debugLog x = trace x (const x)

dims :: MatrixRep ùîπ -> Val ùîπ √ó Val ùîπ
dims (_ √ó (i √ó Œ±) √ó (j √ó Œ≤)) = Int Œ± i √ó Int Œ≤ j

dims_bwd :: Val ùîπ √ó Val ùîπ -> MatrixRep ùîπ -> MatrixRep ùîπ
dims_bwd (Int Œ± i' √ó Int Œ≤ j') (vss √ó (i √ó _) √ó (j √ó _)) | i == i' && j == j' = vss √ó (i √ó Œ±) √ó (j √ó Œ≤)
dims_bwd _ _                                                                  = error absurd

matrixLookup :: MatrixRep ùîπ -> (Int √ó ùîπ) √ó (Int √ó ùîπ) -> Val ùîπ
matrixLookup (vss √ó _ √ó _) ((i √ó _) √ó (j √ó _)) = vss!(i - 1)!(j - 1)

matrixLookup_bwd :: Val ùîπ -> MatrixRep ùîπ √ó (Int √ó ùîπ) √ó (Int √ó ùîπ) -> MatrixRep ùîπ √ó (Int √ó ùîπ) √ó (Int √ó ùîπ)
matrixLookup_bwd v ((vss √ó (i' √ó _) √ó (j' √ó _)) √ó (i √ó _) √ó (j √ó _)) =
   vss'' √ó (i' √ó false) √ó (j' √ó false) √ó (i √ó false) √ó (j √ó false)
   where vss'  = (((<$>) (const Hole)) <$> vss)
         vs_i  = vss'!(i - 1)
         vss'' = unsafeUpdateAt (i - 1) (unsafeUpdateAt (j - 1) (vs_i!(j - 1)) vs_i) vss'

-- Could improve this a bit with some type class shenanigans, but not straightforward.
union :: forall a . (Int -> a) -> (Number -> a) -> Int + Number -> a
union f _ (Left x)   = f x
union _ f (Right x)  = f x

union2 :: (Int -> Int -> Int) -> (Number -> Number -> Number) -> Int + Number -> Int + Number -> Int + Number
union2 f _ (Left x) (Left y)     = Left $ f x y
union2 _ f (Left x) (Right y)    = Right $ f (toNumber x) y
union2 _ f (Right x) (Right y)   = Right $ f x y
union2 _ f (Right x) (Left y)    = Right $ f x (toNumber y)

union2' :: forall a . (Int -> Int -> a) -> (Number -> Number -> a) -> Int + Number -> Int + Number -> a
union2' f _ (Left x) (Left y)    = f x y
union2' _ f (Left x) (Right y)   = f (toNumber x) y
union2' _ f (Right x) (Right y)  = f x y
union2' _ f (Right x) (Left y)   = f x (toNumber y)

unionDisj :: forall a b . (b -> b -> a) -> (String -> String -> a) -> b + String -> b + String -> a
unionDisj f _ (Left x) (Left y)   = f x y
unionDisj _ _ (Left _) (Right _)  = error "Non-uniform argument types"
unionDisj _ f (Right x) (Right y) = f x y
unionDisj _ _ (Right _) (Left _)  = error "Non-uniform argument types"

testPrim :: Val ùîπ
testPrim = apply (apply (binary (dependsNonZero ((*) `union2` (*)))) (Int false 0)) (Int true 0)
