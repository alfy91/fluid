module Primitive2 where

import Prelude hiding (absurd, apply)
import Data.Either (Either(..))
import Data.Foldable (foldl)
import Data.Int (ceil, floor, toNumber)
import Data.List (List(..))
import Data.Tuple (snd)
import Debug.Trace (trace)
import Math (log, pow)
import Bindings (Bindings(..), (:+:), (‚Ü¶))
import DataType (Ctr, cCons)
import Lattice (ùîπ, (‚àß))
import Util (type (√ó), (√ó), type (+), absurd, error)

type Op a = a √ó ùîπ -> Val ùîπ

data Val a =
   Int a Int |
   Constr a Ctr (List (Val a)) |
   Primitive (Val ùîπ -> Val ùîπ)

instance showVal :: Show (Val Boolean) where
   show (Int Œ± n)       = show n <> "_" <> show Œ±
   show (Constr _ _ _)  = error "todo"
   show (Primitive op)  = error "todo"

class To a where
   to :: Val ùîπ -> a √ó ùîπ

class From a where
   from :: a √ó ùîπ -> Val ùîπ

getŒ± :: Val ùîπ -> ùîπ
getŒ± (Int Œ± _) = Œ±
getŒ± _         = error absurd

instance toInt :: To Int where
   to (Int Œ± n)   = n √ó Œ±
   to _           = error "Int expected"

instance fromInt :: From Int where
   from (n √ó Œ±) = Int Œ± n

from1 :: forall a b . To a => From b => (a √ó ùîπ -> b √ó ùîπ) -> Val ùîπ
from1 op = Primitive (to >>> op >>> from)

from2 :: forall a b c . To a => To b => From c => (a √ó ùîπ -> b √ó ùîπ -> c √ó ùîπ) -> Val ùîπ
from2 op = Primitive (to >>> op >>> from1)

apply :: Val ùîπ -> Val ùîπ -> Val ùîπ
apply (Primitive op)   = op
apply _                = error absurd

plus_ :: Val ùîπ
plus_ = from2 plus

plus :: (Int + Number) √ó ùîπ -> (Int + Number) √ó ùîπ -> (Int + Number) √ó ùîπ
plus = dependsBoth ((+) `union2` (+))

times_ :: Val ùîπ
times_ = from2 times

times :: Int √ó ùîπ -> Int √ó ùîπ -> Int √ó ùîπ
times = dependsNonZero (*)

dependsBoth :: forall a b c . (a -> b -> c) -> a √ó ùîπ -> b √ó ùîπ -> c √ó ùîπ
dependsBoth op (x √ó Œ±) (y √ó Œ≤) = x `op` y √ó (Œ± ‚àß Œ≤)

class DependsBinary a b c where
   dependsNonZero :: (a -> b -> c) -> a √ó ùîπ -> b √ó ùîπ -> c √ó ùîπ

-- If both are false, we depend on the first.
instance dependsNonZeroIntInt :: DependsBinary Int Int a where
   dependsNonZero op (x √ó Œ±) (y √ó Œ≤) =
      x `op` y √ó if x == 0 then Œ± else if y == 0 then Œ≤ else Œ± ‚àß Œ≤

primitives :: Bindings Val ùîπ
primitives = foldl (:+:) Empty [
   -- some signatures are specified for clarity or to drive instance resolution
   -- PureScript's / and pow aren't defined at Int -> Int -> Number, so roll our own
   "+"         ‚Ü¶ from   ((+) `union2` (+)),
   "-"         ‚Ü¶ from   ((-) `union2` (-)),
   "*"         ‚Ü¶ from   ((*) `union2` (*)),
   "**"        ‚Ü¶ from   ((\x y -> toNumber x `pow` toNumber y) `union2'` pow),
   "/"         ‚Ü¶ from   ((\x y -> toNumber x / toNumber y)  `union2'` (/)),
   "=="        ‚Ü¶ from   ((==) `union2'` (==) `unionDisj` (==)),
   "/="        ‚Ü¶ from   ((/=) `union2'` (/=) `unionDisj` (==)),
   "<"         ‚Ü¶ from   ((<)  `union2'` (<)  `unionDisj` (==)),
   ">"         ‚Ü¶ from   ((>)  `union2'` (>)  `unionDisj` (==)),
   "<="        ‚Ü¶ from   ((<=) `union2'` (<=) `unionDisj` (==)),
   ">="        ‚Ü¶ from   ((>=) `union2'` (>=) `unionDisj` (==)),
   "++"        ‚Ü¶ from   ((<>) :: String -> String -> String),
   ":"         ‚Ü¶ Constr false cCons Nil,
--   "!"         ‚Ü¶ from   matrixLookup,
   "ceiling"   ‚Ü¶ from   ceil,
   "debugLog"  ‚Ü¶ from   debugLog,
   "dims"      ‚Ü¶ from   (snd :: Array (Array (Val ùîπ)) √ó (Int √ó Int) -> Int √ó Int),
   "div"       ‚Ü¶ from   (div :: Int -> Int -> Int),
   "error"     ‚Ü¶ from   (error :: String -> Boolean),
   "floor"     ‚Ü¶ from   floor,
   "log"       ‚Ü¶ from   ((toNumber >>> log) `union` log),
   "numToStr"  ‚Ü¶ from   (show `union` show)
]

debugLog :: Val ùîπ -> Val ùîπ
debugLog x = trace x (const x)

-- Could improve this a bit with some type class shenanigans, but not straightforward.
union :: forall a . (Int -> a) -> (Number -> a) -> Int + Number -> a
union f _ (Left x)   = f x
union _ f (Right x)  = f x

union2 :: (Int -> Int -> Int) -> (Number -> Number -> Number) -> Int + Number -> Int + Number -> Int + Number
union2 f _ (Left x) (Left y)     = Left $ f x y
union2 _ f (Left x) (Right y)    = Right $ f (toNumber x) y
union2 _ f (Right x) (Right y)   = Right $ f x y
union2 _ f (Right x) (Left y)    = Right $ f x (toNumber y)

union2' :: forall a . (Int -> Int -> a) -> (Number -> Number -> a) -> Int + Number -> Int + Number -> a
union2' f _ (Left x) (Left y)    = f x y
union2' _ f (Left x) (Right y)   = f (toNumber x) y
union2' _ f (Right x) (Right y)  = f x y
union2' _ f (Right x) (Left y)   = f x (toNumber y)

unionDisj :: forall a b . (b -> b -> a) -> (String -> String -> a) -> b + String -> b + String -> a
unionDisj f _ (Left x) (Left y)   = f x y
unionDisj _ _ (Left _) (Right _)  = error "Non-uniform argument types"
unionDisj _ f (Right x) (Right y) = f x y
unionDisj _ _ (Right _) (Left _)  = error "Non-uniform argument types"

testPrim :: Val ùîπ
testPrim = apply (apply times_ (Int false 0)) (Int true 0)
