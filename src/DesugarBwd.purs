module DesugarBwd where

import Prelude hiding (absurd)
import Data.Either (Either(..))
import Data.Foldable (foldl)
import Data.Function (applyN, on)
import Data.List (List(..), (:), (\\), singleton, zip)
import Data.List.NonEmpty (NonEmptyList(..), groupBy, head, toList)
import Data.Map (Map, fromFoldable)
import Data.NonEmpty ((:|))
import Data.Profunctor.Strong ((&&&))
import Data.Tuple (uncurry, fst, snd)
import Partial.Unsafe (unsafePartial)
import Bindings (Bindings, Bind, (‚Ü¶), key, val)
import DataType (Ctr, arity, cCons, cNil, cTrue, cFalse, ctrs, dataTypeFor)
import DesugarFwd (elimBool, totaliseConstrFwd)
import Expr (Cont(..), Elim(..), asElim, asExpr)
import Expr (Expr(..), RecDefs, VarDef(..)) as E
import Lattice (ùîπ, (‚à®), expand)
import SExpr (Branch, Clause, Expr(..), ListRest(..), Pattern(..), ListRestPattern(..), Qualifier(..), RecDefs, VarDef(..), VarDefs)
import Util (Endo, type (+), type (√ó), (√ó), absurd, error, mustLookup, successful)
import Util.SnocList (SnocList(..), (:-), fromList)
import Util.SnocList (unzip, zip, zipWith) as S

desugarBwd :: E.Expr ùîπ -> Expr ùîπ -> Expr ùîπ
desugarBwd = exprBwd

varDefsBwd :: E.Expr ùîπ -> VarDefs ùîπ √ó Expr ùîπ -> VarDefs ùîπ √ó Expr ùîπ
varDefsBwd (E.Let (E.VarDef œÉ e1) e2) (NonEmptyList (VarDef œÄ s1 :| Nil) √ó s2) =
   NonEmptyList (VarDef œÄ (exprBwd e1 s1) :| Nil) √ó exprBwd e2 s2
varDefsBwd (E.Let (E.VarDef œÉ e1) e2) (NonEmptyList (VarDef œÄ s1 :| d : ds) √ó s2) =
   let NonEmptyList (d' :| ds') √ó s2' = varDefsBwd e2 (NonEmptyList (d :| ds) √ó s2) in
   NonEmptyList (VarDef œÄ (exprBwd e1 s1) :| d' : ds') √ó s2'
varDefsBwd _ (NonEmptyList (_ :| _) √ó _) = error absurd

recDefsBwd :: E.RecDefs ùîπ -> RecDefs ùîπ -> RecDefs ùîπ
recDefsBwd xœÉs xcs = join (recDefsBwd' xœÉs (groupBy (eq `on` fst) xcs))

recDefsBwd' :: E.RecDefs ùîπ -> NonEmptyList (RecDefs ùîπ) -> NonEmptyList (RecDefs ùîπ)
recDefsBwd' Lin _                                              = error absurd
recDefsBwd' (Lin :- x ‚Ü¶ œÉ) (NonEmptyList (xcs :| Nil))         = NonEmptyList (recDefBwd (x ‚Ü¶ œÉ) xcs :| Nil)
recDefsBwd' (_ :- _ :- _) (NonEmptyList (_ :| Nil))            = error absurd
recDefsBwd' (œÅ :- x ‚Ü¶ œÉ) (NonEmptyList (xcs1 :| xcs2 : xcss))  =
   NonEmptyList (recDefBwd (x ‚Ü¶ œÉ) xcs1 :| toList (recDefsBwd' œÅ (NonEmptyList (xcs2 :| xcss))))

recDefBwd :: Bind (Elim ùîπ) -> NonEmptyList (Clause ùîπ) -> NonEmptyList (Clause ùîπ)
recDefBwd (x ‚Ü¶ œÉ) = map (x √ó _) <<< branchesBwd_curried œÉ <<< map snd

exprBwd :: E.Expr ùîπ -> Expr ùîπ -> Expr ùîπ
exprBwd e (Var x) =
   case expand e (E.Var x) of
      E.Var _ -> Var x
      _ -> error absurd
exprBwd e (Op op) =
   case expand e (E.Op op) of
      E.Op _ -> Op op
      _ -> error absurd
exprBwd e (Int _ n) =
   case expand e (E.Int false n) of
      E.Int Œ± _ -> Int Œ± n
      _ -> error absurd
exprBwd e (Float _ n) =
   case expand e (E.Float false n) of
      E.Float Œ± _ -> Float Œ± n
      _ -> error absurd
exprBwd e (Str _ str) =
   case expand e (E.Str false str) of
      E.Str Œ± _ -> Str Œ± str
      _ -> error absurd
exprBwd e (Constr _ c ss) =
   case expand e (E.Constr false c (const (E.Hole false) <$> ss)) of
      E.Constr Œ± _ es -> Constr Œ± c (uncurry exprBwd <$> zip es ss)
      _ -> error absurd
exprBwd e (Record _ xss) =
   case expand e (E.Record false (map (const (E.Hole false)) <$> xss)) of
      E.Record Œ± xes ->
         let xs √ó ss = xss <#> (key &&& val) # S.unzip
             es = xes <#> val
             ss' = uncurry exprBwd <$> S.zip es ss in
         Record Œ± (S.zipWith (‚Ü¶) xs ss')
      _ -> error absurd
exprBwd e (Matrix _ s (x √ó y) s') =
   case expand e (E.Matrix false (E.Hole false) (x √ó y) (E.Hole false)) of
      E.Matrix Œ± e1 _ e2 -> Matrix Œ± (exprBwd e1 s) (x √ó y) (exprBwd e2 s')
      _ -> error absurd
exprBwd e (Lambda bs) =
   case expand e (E.Lambda (ElimHole false)) of
      E.Lambda œÉ -> Lambda (branchesBwd_curried œÉ bs)
      _ -> error absurd
exprBwd e (App s1 s2) =
   case expand e (E.App (E.Hole false) (E.Hole false)) of
      E.App e1 e2 -> App (exprBwd e1 s1) (exprBwd e2 s2)
      _ -> error absurd
exprBwd e (MatchAs s bs) =
   case expand e (E.App (E.Lambda (ElimHole false)) (E.Hole false)) of
      E.App (E.Lambda œÉ) e' -> MatchAs (exprBwd e' s) (branchesBwd_uncurried œÉ bs)
      _ -> error absurd
exprBwd e (IfElse s1 s2 s3) =
   case expand e (E.App (E.Lambda (elimBool (ContHole false) (ContHole false))) (E.Hole false)) of
      E.App (E.Lambda (ElimConstr m)) e1 ->
         IfElse (exprBwd e1 s1)
                (exprBwd (asExpr (mustLookup cTrue m)) s2)
                (exprBwd (asExpr (mustLookup cFalse m)) s3)
      _ -> error absurd
exprBwd e (BinaryApp s1 op s2) =
   case expand e (E.App (E.App (E.Op op) (E.Hole false)) (E.Hole false)) of
      E.App (E.App (E.Op _) e1) e2 -> BinaryApp (exprBwd e1 s1) op (exprBwd e2 s2)
      _ -> error absurd
exprBwd e (Let ds s) =
   case expand e (E.Let (E.VarDef (ElimHole false) (E.Hole false)) (E.Hole false)) of
      E.Let d e' -> uncurry Let (varDefsBwd (E.Let d e') (ds √ó s))
      _ -> error absurd
exprBwd e (LetRec xcs s) =
   case expand e (E.LetRec (fromList (toList (recDefHole <$> xcss))) (E.Hole false)) of
      E.LetRec xœÉs e' -> LetRec (recDefsBwd xœÉs xcs) (exprBwd e' s)
      _ -> error absurd
      where
      -- repeat enough desugaring logic to determine shape of bindings
      recDefHole :: NonEmptyList (Clause ùîπ) -> Bind (Elim ùîπ)
      recDefHole xcs' = fst (head xcs') ‚Ü¶ ElimHole false
      xcss = groupBy (eq `on` fst) xcs :: NonEmptyList (NonEmptyList (Clause ùîπ))
exprBwd e (ListEmpty _) =
   case expand e (E.Constr false cNil Nil) of
      E.Constr Œ± _ Nil -> ListEmpty Œ±
      _ -> error absurd
exprBwd e (ListNonEmpty _ s l) =
   case expand e (E.Constr false cCons (E.Hole false : E.Hole false : Nil)) of
      E.Constr Œ± _ (e1 : e2 : Nil) ->
         ListNonEmpty Œ± (exprBwd e1 s) (listRestBwd e2 l)
      _ -> error absurd
exprBwd e (ListEnum s1 s2) =
   case expand e (E.App (E.App (E.Var "enumFromTo") (E.Hole false)) (E.Hole false)) of
      E.App (E.App (E.Var "enumFromTo") e1) e2 ->
         ListEnum (exprBwd e1 s1) (exprBwd e2 s2)
      _ -> error absurd
-- list-comp-done
exprBwd e (ListComp _ s_body (NonEmptyList (Guard (Constr _ c Nil) :| Nil))) | c == cTrue =
   case expand e (E.Constr false cCons (E.Hole false : E.Constr false cNil Nil : Nil)) of
      E.Constr Œ±2 cCons' (e' : E.Constr Œ±1 _ Nil : Nil) ->
         ListComp (Œ±1 ‚à® Œ±2) (exprBwd e' s_body)
                           (NonEmptyList (Guard (Constr (Œ±1 ‚à® Œ±2) cTrue Nil) :| Nil))
      _ -> error absurd
-- list-comp-last
exprBwd e (ListComp Œ± s (NonEmptyList (q :| Nil))) =
   case exprBwd e (ListComp Œ± s (NonEmptyList (q :| Guard (Constr true cTrue Nil) : Nil))) of
      ListComp Œ≤ s' (NonEmptyList (q' :| (Guard (Constr _ c Nil)) : Nil)) | c == cTrue ->
         (ListComp Œ≤ s' (NonEmptyList (q' :| Nil)))
      _ -> error absurd
-- list-comp-guard
exprBwd e (ListComp Œ±0 s1 (NonEmptyList (Guard s2 :| q : qs))) =
   case expand e (E.App (E.Lambda (elimBool (ContHole false) (ContHole false))) (E.Hole false)) of
      E.App (E.Lambda (ElimConstr m)) e2 ->
         case exprBwd (asExpr (mustLookup cTrue m)) (ListComp Œ±0 s1 (NonEmptyList (q :| qs))) √ó
              exprBwd (asExpr (mustLookup cFalse m)) (Constr true cNil Nil) of
            ListComp Œ≤ s1' (NonEmptyList (q' :| qs')) √ó Constr Œ± c Nil | c == cNil ->
               ListComp (Œ± ‚à® Œ≤) s1' (NonEmptyList (Guard (exprBwd e2 s2) :| q' : qs'))
            _ √ó _ -> error absurd
      _ -> error absurd
-- list-comp-decl
exprBwd e (ListComp Œ±0 s2 (NonEmptyList (Declaration (VarDef œÄ s1) :| q : qs))) =
   case expand e (E.App (E.Lambda (ElimHole false)) (E.Hole false)) of
      E.App (E.Lambda œÉ) e1 ->
         case branchBwd_curried œÉ (NonEmptyList (œÄ :| Nil) √ó (ListComp Œ±0 s2 (NonEmptyList (q :| qs)))) of
            _ √ó ListComp Œ≤ s2' (NonEmptyList (q' :| qs')) ->
               ListComp Œ≤ s2' (NonEmptyList ((Declaration (VarDef œÄ (exprBwd e1 s1))) :| q' : qs'))
            _ √ó _ -> error absurd
      _ -> error absurd
-- list-comp-gen
exprBwd e (ListComp Œ± s2 (NonEmptyList (Generator p s1 :| q : qs))) =
   case expand e (E.App (E.App (E.Var "concatMap") (E.Lambda (ElimHole false))) (E.Hole false)) of
      E.App (E.App (E.Var "concatMap") (E.Lambda œÉ)) e1 ->
         let œÉ' √ó Œ≤ = totaliseBwd (ContElim œÉ) (Left p : Nil) in
         case exprBwd (asExpr (patternBwd (asElim œÉ') p)) (ListComp Œ± s2 (NonEmptyList (q :| qs))) of
            ListComp Œ≤' s2' (NonEmptyList (q' :| qs')) ->
               ListComp (Œ≤ ‚à® Œ≤') s2' (NonEmptyList (Generator p (exprBwd e1 s1) :| q' : qs'))
            _ -> error absurd
      _ -> error absurd

-- e, l desugar_bwd l
listRestBwd :: E.Expr ùîπ -> Endo (ListRest ùîπ)
listRestBwd e l@(End _) =
   case expand e (E.Constr false cNil Nil) of
      E.Constr Œ± _ _ -> End Œ±
      _              -> error absurd
listRestBwd e l@(Next _ s l') =
   case expand e (E.Constr false cCons (E.Hole false : E.Hole false : Nil)) of
      E.Constr Œ± _ (e1 : e2 : Nil)  -> Next Œ± (exprBwd e1 s) (listRestBwd e2 l')
      _                             -> error absurd

-- œÉ, ps desugar_bwd e
patternsBwd :: Elim ùîπ -> NonEmptyList Pattern -> E.Expr ùîπ
patternsBwd œÉ (NonEmptyList (p :| Nil))      = asExpr (patternBwd œÉ p)
patternsBwd œÉ (NonEmptyList (p :| p' : ps))  = patternsBwd_rest (asExpr (patternBwd œÉ p))
   where
      patternsBwd_rest œÉ' =
         case expand œÉ' (E.Lambda (ElimHole false)) of
            E.Lambda œÑ  -> patternsBwd œÑ (NonEmptyList (p' :| ps))
            _           -> error absurd

-- œÉ, p desugar_bwd Œ∫
patternBwd :: Elim ùîπ -> Pattern -> Cont ùîπ
patternBwd (ElimVar x Œ∫) (PVar _)               = Œ∫
patternBwd (ElimHole Œ±) (PVar _)                = ContHole Œ±
patternBwd (ElimHole Œ±) (PConstr c ps)          = argsBwd (ContHole Œ±) (Left <$> ps)
patternBwd (ElimConstr m) (PConstr c ps)        = argsBwd (mustLookup c m) (Left <$> ps)
patternBwd (ElimHole Œ±) (PListEmpty)            = ContHole Œ±
patternBwd (ElimConstr m) (PListEmpty)          = mustLookup cNil m
patternBwd (ElimHole Œ±) (PListNonEmpty p o)     = argsBwd (ContHole Œ±) (Left p : Right o : Nil)
patternBwd (ElimConstr m) (PListNonEmpty p o)   = argsBwd (mustLookup cCons m) (Left p : Right o : Nil)
patternBwd (ElimHole Œ±) (PRecord xps)           = recordBwd (ContHole Œ±) xps
patternBwd (ElimRecord xs Œ∫) (PRecord xps)      = recordBwd Œ∫ xps
patternBwd _ _                                  = error absurd

-- œÉ, o desugar_bwd Œ∫
listRestPatternBwd :: Elim ùîπ -> ListRestPattern -> Cont ùîπ
listRestPatternBwd (ElimVar _ _) _              = error absurd
listRestPatternBwd (ElimRecord _ _) _           = error absurd
listRestPatternBwd (ElimHole Œ±) PEnd            = ContHole Œ±
listRestPatternBwd (ElimConstr m) PEnd          = mustLookup cNil m
listRestPatternBwd (ElimHole Œ±) (PNext p o)     = argsBwd (ContHole Œ±) (Left p : Right o : Nil)
listRestPatternBwd (ElimConstr m) (PNext p o)   = argsBwd (mustLookup cCons m) (Left p : Right o : Nil)

argsBwd :: Cont ùîπ -> List (Pattern + ListRestPattern) -> Cont ùîπ
argsBwd Œ∫ Nil              = Œ∫
argsBwd Œ∫ (Left p : œÄs)    = argsBwd (patternBwd (asElim Œ∫) p) œÄs
argsBwd Œ∫ (Right o : œÄs)   = argsBwd (listRestPatternBwd (asElim Œ∫) o) œÄs

recordBwd :: Cont ùîπ -> Bindings Pattern -> Cont ùîπ
recordBwd Œ∫ Lin            = Œ∫
recordBwd œÉ (xps :- x ‚Ü¶ p) = recordBwd œÉ xps # (asElim >>> flip patternBwd p)

-- œÉ, c desugar_bwd c
branchBwd_curried :: Elim ùîπ -> Endo (Branch ùîπ)
branchBwd_curried œÉ (œÄs √ó s) = œÄs √ó exprBwd (patternsBwd œÉ œÄs) s

-- œÉ, c desugar_bwd c
branchBwd_uncurried :: Elim ùîπ -> Endo (Pattern √ó Expr ùîπ)
branchBwd_uncurried œÉ (p √ó s) = p √ó exprBwd (asExpr (patternBwd œÉ p)) s

-- œÉ, cs desugar_bwd cs
branchesBwd_curried :: Elim ùîπ -> Endo (NonEmptyList (Branch ùîπ))
branchesBwd_curried œÉ (NonEmptyList (b1 :| b2 : bs)) =
   NonEmptyList (branchBwd_curried œÉ b1 :| toList (branchesBwd_curried œÉ (NonEmptyList (b2 :| bs))))
branchesBwd_curried œÉ (NonEmptyList (b :| Nil)) =
   NonEmptyList (branchBwd_curried œÉ b :| Nil)

-- œÉ, cs desugar_bwd cs
branchesBwd_uncurried :: Elim ùîπ -> Endo (NonEmptyList (Pattern √ó Expr ùîπ))
branchesBwd_uncurried œÉ (NonEmptyList (b1 :| b2 : bs)) =
   NonEmptyList (branchBwd_uncurried œÉ b1 :| toList (branchesBwd_uncurried œÉ (NonEmptyList (b2 :| bs))))
branchesBwd_uncurried œÉ (NonEmptyList (b :| Nil)) =
   NonEmptyList (branchBwd_uncurried œÉ b :| Nil)

-- Œ∫, œÄs totalise_bwd Œ∫', Œ±
totaliseBwd :: Cont ùîπ -> List (Pattern + ListRestPattern) -> Cont ùîπ √ó ùîπ
totaliseBwd Œ∫ Nil = Œ∫ √ó false
totaliseBwd Œ∫ (Left (PVar x) : œÄs) =
   case expand Œ∫ (ContElim (ElimVar x (ContHole false))) of
      ContElim (ElimVar _ Œ∫') ->
         let Œ∫'' √ó Œ± = totaliseBwd Œ∫' œÄs in
         ContElim (ElimVar x Œ∫'') √ó Œ±
      _ -> error absurd
totaliseBwd Œ∫ (œÄ : œÄs) =
   let c √ó œÄs' = case œÄ of
         Left (PVar _)              -> error absurd
         Left (PRecord xps)         -> error absurd
         Left (PConstr c ps)        -> c √ó (Left <$> ps)
         Left PListEmpty            -> cNil √ó Nil
         Left (PListNonEmpty p o)   -> cCons √ó (Left p : Right o : Nil)
         Right PEnd                 -> cNil √ó Nil
         Right (PNext p o)          -> cCons √ó (Left p : Right o : Nil)
   -- use totaliseConstrFwd to construct "eliminator pattern" to match against
   in case expand Œ∫ (ContElim (ElimConstr (totaliseConstrFwd (c √ó ContHole false) false))) of
      ContElim (ElimConstr m) ->
         let Œ∫' √ó Œ± = totaliseConstrBwd m c
             Œ∫'' √ó Œ≤ = totaliseBwd Œ∫' (œÄs' <> œÄs) in
         ContElim (ElimConstr (fromFoldable (singleton (c √ó Œ∫'')))) √ó (Œ± ‚à® Œ≤)
      _ -> error absurd

-- Discard all synthesised branches, returning the original singleton branch for c, plus join of annotations
-- on the empty lists used for bodies of synthesised branches.
totaliseConstrBwd :: Map Ctr (Cont ùîπ) -> Ctr -> Cont ùîπ √ó ùîπ
totaliseConstrBwd m c = unsafePartial $
   let cs = ctrs (successful (dataTypeFor c)) \\ singleton c in
   mustLookup c m √ó foldl (‚à®) false (map (bodyAnn <<< body) cs)
   where
      body :: Partial => Ctr -> Cont ùîπ
      body c' = applyN unargument (successful (arity c')) (mustLookup c' m)

      unargument :: Partial => Cont ùîπ -> Cont ùîπ
      unargument (ContElim (ElimVar _ Œ∫)) = Œ∫

      bodyAnn :: Partial => Cont ùîπ -> ùîπ
      bodyAnn (ContExpr (E.Constr Œ± c' Nil)) | c' == cNil = Œ±
