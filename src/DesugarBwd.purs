module DesugarBwd where

import Prelude hiding (absurd)
import Data.Function (on)
import Data.List (List(..), (:), zip)
import Data.List.NonEmpty (NonEmptyList(..), groupBy, toList, appendFoldable, reverse)
import Data.Map (fromFoldable)
import Data.NonEmpty ((:|))
import Data.Traversable (traverse)
import Data.Tuple (uncurry, fst, snd)
import Bindings (Binding, Bindings(..), (‚Ü¶), (:+:))
import DataType (cPair, cCons, cNil, cTrue, cFalse)
import Expr (Cont(..), Elim(..))
import Expr (Expr(..), RawExpr(..), VarDef(..)) as E
import Pretty (render, pretty)
import SExpr (Expr(..), ListPatternRest(..), ListRest(..), Pattern(..), Qualifier(..), RawExpr(..), VarDef(..))
import Lattice (ùîπ, (‚àß))
import Util (MayFail, type (√ó), (√ó), (‚âû), (‚âú), absurd, mustLookup, lookupE, error)

qualTrue :: ùîπ -> Qualifier ùîπ
qualTrue Œ± = (Guard Œ± (Expr Œ± (Constr cTrue Nil)))

snil :: ùîπ -> Expr ùîπ
snil Œ± = Expr Œ± $ Constr cNil Nil

class DesugarBwd a b where
   desugarBwd :: a -> b -> MayFail b

-- data VarDef a = VarDef (Elim a) (Expr a)
instance desugarBwdVarDef  :: DesugarBwd (E.VarDef Boolean) (VarDef Boolean) where
   desugarBwd (E.VarDef œÉ e) (VarDef œÄ s) = VarDef œÄ <$> desugarBwd e s

instance desugarBwdVarDefs :: DesugarBwd (E.Expr Boolean)
                                         (Boolean √ó (NonEmptyList (VarDef Boolean) √ó Expr Boolean)) where
   desugarBwd (E.Expr Œ±1 (E.Let (E.VarDef œÉ e1@(E.Expr Œ±2 _)) e2@(E.Expr Œ±3 _)))
              (_ √ó (NonEmptyList (VarDef œÄ s1 :| Nil) √ó s2)) = do
              s1' <- desugarBwd e1 s1
              s2' <- desugarBwd e2 s2
              pure $ (Œ±1 ‚àß Œ±2 ‚àß Œ±3) √ó (NonEmptyList (VarDef œÄ s1' :| Nil) √ó s2')
   desugarBwd (E.Expr Œ±1 (E.Let (E.VarDef œÉ e1@(E.Expr Œ±2 _)) e2@(E.Expr Œ±3 _)))
              (_ √ó (NonEmptyList (VarDef œÄ s1 :| d : ds) √ó s2)) = do
              s1' <- desugarBwd e1 s1
              Œ±4 √ó (NonEmptyList (d' :| ds') √ó s2') <- desugarBwd e2 ((Œ±1 ‚àß Œ±2 ‚àß Œ±3) √ó (NonEmptyList (d :| ds) √ó s2))
              pure $ (Œ±1 ‚àß Œ±2 ‚àß Œ±3 ‚àß Œ±4) √ó (NonEmptyList (VarDef œÄ s1' :| d' : ds') √ó s2')
   desugarBwd e (_ √ó (vardefs √ó s_body)) =
      error $ "Desugar var defs (e, vardefs √ó s_body) match not found: \n" <>
              render (pretty e) <> "\n" <>
              render (pretty vardefs) <> " √ó " <> render (pretty s_body)

concatNonEmpty :: forall a. NonEmptyList (NonEmptyList a) -> NonEmptyList a
concatNonEmpty (NonEmptyList (x :| x' : xs)) = appendFoldable x (concatNonEmpty (NonEmptyList (x' :| xs)))
concatNonEmpty (NonEmptyList (x :| Nil))     = x


{-                 ‚Üí                        ‚Üí           -}
{-                                            ‚Üí         -}
{- let [f ‚Ü¶ œÉ] ‚Üò (f c)         [f ‚Ü¶ œÉ] ‚Üò (f, (p, s))    -}
instance desugarBwdRecDefs :: DesugarBwd (Bindings Elim Boolean)
                                         (NonEmptyList (String √ó ((NonEmptyList Pattern) √ó (Expr Boolean)))) where
   desugarBwd fœÉs fœÄes = concatNonEmpty <$> zipRecDefs fœÉs fœÄess --error "Desugar bwd for RecDefs not implemented"

      where

         fœÄess  = reverse $ (groupBy (eq `on` fst) fœÄes :: NonEmptyList (NonEmptyList (String √ó ((NonEmptyList Pattern) √ó (Expr Boolean)))))

         -- f a -> g b -> (a -> b -> b) -> (g b)
         zipRecDefs :: Bindings Elim ùîπ
                    -> NonEmptyList (NonEmptyList (String √ó ((NonEmptyList Pattern) √ó (Expr ùîπ))))
                    -> MayFail (NonEmptyList (NonEmptyList (String √ó ((NonEmptyList Pattern) √ó (Expr ùîπ)))))
         zipRecDefs (œÅ :+: f ‚Ü¶ œÉ) (NonEmptyList (fœÄes1 :| fœÄes2 : fœÄes_rest)) = do
            fœÄes1' <- fromRecDef (f ‚Ü¶ œÉ) fœÄes1
            fœÄess' <- toList <$> zipRecDefs œÅ (NonEmptyList (fœÄes2 :| fœÄes_rest))
            pure $ NonEmptyList (fœÄes1' :| fœÄess')
         zipRecDefs (Empty :+: f ‚Ü¶ œÉ) (NonEmptyList (fœÄes1 :| Nil)) = do
            fœÄes1'  <- fromRecDef (f ‚Ü¶ œÉ) fœÄes1
            pure $ NonEmptyList (fœÄes1' :| Nil)
         zipRecDefs œÅ fœÄs = error $ "zipRecDefs error: recdefs (œÅ, fœÄs) have different sizes \n" <>
                                    render (pretty œÅ) <> "\n" <>
                                    render (pretty fœÄs)
         -- backward slice the eliminator (containing different possible pattern matches of the f)
         -- and the set of branches (for each pattern match of f)
         --          ‚Üí       ‚Üí
         -- f ‚Ü¶ œÉ, (f c) ‚Üò (f c)
         fromRecDef :: Binding Elim ùîπ
                    -> NonEmptyList (String √ó (NonEmptyList Pattern √ó Expr ùîπ))
                    -> MayFail (NonEmptyList (String √ó (NonEmptyList Pattern √ó Expr ùîπ)))
         fromRecDef (f ‚Ü¶ œÉ) fœÄs@(NonEmptyList ((f' √ó (œÄs √ó e)) :| fœÄs')) =
            map ((√ó) f) <$> desugarBwd œÉ (snd <$> fœÄs)

instance desugarBwdExpr :: DesugarBwd (E.Expr Boolean) (Expr Boolean) where
   desugarBwd (E.Expr Œ± (E.Var x))   (Expr _ (Var x'))      = pure $ Expr Œ± (Var (x ‚âú x'))
   desugarBwd (E.Expr Œ± (E.Op op))   (Expr _ (Op op'))      = pure $ Expr Œ± (Op (op ‚âú op'))
   desugarBwd (E.Expr Œ± (E.Int n))   (Expr _ (Int n'))      = pure $ Expr Œ± (Int (n ‚âú n'))
   desugarBwd (E.Expr Œ± (E.Float n)) (Expr _ (Float n'))    = pure $ Expr Œ± (Float (n ‚âú n'))
   desugarBwd (E.Expr Œ± (E.Str s))   (Expr _ (Str s'))      = pure $ Expr Œ± (Str (s ‚âú s'))
   -- | Constr (this covers Cons)
   desugarBwd (E.Expr Œ± (E.Constr ctr args)) (Expr _ (Constr ctr' args')) =
      Expr Œ± <$> (Constr ctr <$> traverse (uncurry desugarBwd) (zip args args'))
   -- | Lambda
   desugarBwd (E.Expr Œ± (E.Lambda œÉ)) (Expr _ (Lambda bs))= Expr Œ± <$> (Lambda <$> desugarBwd œÉ bs)
   -- | Application
   desugarBwd (E.Expr Œ± (E.App e1 e2)) (Expr _ (App s1 s2)) =
      Expr Œ± <$> (App <$> desugarBwd e1 s1 <*> desugarBwd e2 s2)
   desugarBwd (E.Expr Œ± (E.BinaryApp e1 x e2)) (Expr _ (BinaryApp s1 x' s2)) =
      Expr Œ± <$> (BinaryApp <$> desugarBwd e1 s1 <@> x ‚âú x' <*> desugarBwd e2 s2)
   -- | Match-as
   desugarBwd (E.Expr Œ±2 (E.App (E.Expr Œ±1 (E.Lambda œÉ)) e))
              (Expr _ (MatchAs s bs)) =
      Expr (Œ±1 ‚àß Œ±2) <$> (MatchAs <$> desugarBwd e s <*> desugarBwd œÉ bs)
   -- | If-then-else
   desugarBwd (E.Expr Œ±2 (E.App (E.Expr Œ±1 (E.Lambda (ElimConstr m))) e1))
              (Expr _ (IfElse s1 s2 s3)) = do
      e2 <- liftM1 asExpr $ lookupE cTrue m
      e3 <- liftM1 asExpr $ lookupE cFalse m
      Expr (Œ±1 ‚àß Œ±2) <$> (IfElse <$> desugarBwd e1 s1 <*> desugarBwd e2 s2 <*> desugarBwd e3 s3)
   -- | Empty-list
   desugarBwd (E.Expr Œ± (E.Constr c Nil)) (Expr _ ListEmpty) | c == cNil =
      pure $ Expr Œ± ListEmpty
   -- | Non-empty-list
   desugarBwd (E.Expr Œ± (E.Constr c (e : e' : Nil))) (Expr _ (ListNonEmpty s l)) | c == cCons =
      Expr Œ± <$> (ListNonEmpty <$> desugarBwd e s <*> desugarBwd e' l)
   -- | List-enum
   desugarBwd (E.Expr Œ±2 (E.App (E.Expr Œ±1 (E.App (E.Expr _ (E.Var "enumFromTo")) e1)) e2))
              (Expr Œ± (ListEnum s1 s2)) =
      Expr (Œ±1 ‚àß Œ±2) <$> (ListEnum <$> desugarBwd e1 s1 <*> desugarBwd e2 s2)
   -- | List-comp-done
   desugarBwd (E.Expr Œ±2 (E.Constr c (e : (E.Expr Œ±1 (E.Constr c' Nil)) : Nil)))
              (Expr _ (ListComp s_body (NonEmptyList (Guard _ (Expr _ (Constr c'' Nil)) :| Nil))))
      | c == cCons , c' == cNil, c'' == cTrue =
      Expr (Œ±1 ‚àß Œ±2) <$> (ListComp <$> desugarBwd e s_body <*> (pure $ NonEmptyList (Guard (Œ±1 ‚àß Œ±2) (Expr (Œ±1 ‚àß Œ±2) (Constr cTrue Nil)) :| Nil)))
   -- | List-comp-qual
   desugarBwd e
              (Expr Œ± (ListComp s_body (NonEmptyList (q :| Nil)))) = do
      sListComp <- desugarBwd e (Expr Œ± (ListComp s_body (NonEmptyList (q :| (qualTrue true) : Nil))))
      case sListComp of
         Expr Œ±2 (ListComp s_body' (NonEmptyList (q' :| (Guard Œ±1 (Expr _ (Constr c Nil))) : Nil)))
         | c == cTrue
            -> pure $ Expr (Œ±1 ‚àß Œ±2) (ListComp s_body' (NonEmptyList (q' :| Nil)))
         sListComp'
            -> error $ "desugarBwd for List-comp-qual failed: \n" <>
                       render (pretty sListComp')
   -- | List-comp-guard
   desugarBwd (E.Expr Œ±2 (E.App (E.Expr Œ±1 (E.Lambda (ElimConstr m))) e1))
              (Expr _ (ListComp s1 (NonEmptyList ((Guard _ s2) :| q : qs)))) = do
      e2          <- liftM1 asExpr $ lookupE cTrue  m
      e3          <- liftM1 asExpr $ lookupE cFalse m
      s2'         <- desugarBwd e1 s2
      sListComp   <- desugarBwd e2 (Expr true (ListComp s1 (NonEmptyList (q :| qs))))
      sNil        <- desugarBwd e3 (snil true)
      case sListComp, sNil of
         Expr Œ±3 (ListComp s1' (NonEmptyList (q' :| qs'))), Expr Œ±4 (Constr c Nil)
         | c == cNil
               -> pure $ Expr (Œ±1 ‚àß Œ±2 ‚àß Œ±3 ‚àß Œ±4)
                              (ListComp s1' (NonEmptyList ((Guard (Œ±1 ‚àß Œ±2 ‚àß Œ±3 ‚àß Œ±4) s2') :| q' : qs')))
         sListComp', sNil'  -> error $ "desugarBwd for List-comp-guard failed: " <>
                                       render (pretty sListComp') <> "\n" <> render (pretty sNil')
   -- | List-comp-decl
   desugarBwd (E.Expr Œ±1 (E.App (E.Expr Œ±2 (E.Lambda œÉ)) e))
              (Expr _ (ListComp s2 (NonEmptyList ((Declaration _ (VarDef œÄ s1)) :| q : qs)))) = do
      (_ √ó s1') <- desugarBwd œÉ (NonEmptyList (œÄ :| Nil) √ó s1)
      sListComp  <- desugarBwd e (Expr true (ListComp s2 (NonEmptyList (q :| qs))))
      case sListComp of
         Expr Œ±3 (ListComp s2' (NonEmptyList (q' :| qs')))
            -> pure $ Expr (Œ±1 ‚àß Œ±2 ‚àß Œ±3)
                           (ListComp s2' (NonEmptyList ((Declaration (Œ±1 ‚àß Œ±2 ‚àß Œ±3) (VarDef œÄ s1')) :| q' : qs')))
         sListComp'
            -> error $ "desugarBwd for List-comp-decl failed: \n" <>
                       render (pretty sListComp')
   -- | List-comp-gen
   desugarBwd (E.Expr Œ±3 (E.App (E.Expr Œ±2 (E.App (E.Expr _  (E.Var "concatMap"))
                                                  (E.Expr Œ±1 (E.Lambda œÉ))))
                                 e1))
              (Expr _ (ListComp s2 (NonEmptyList ((Generator _ p s1) :| q : qs)))) = do
      s1'        <- desugarBwd e1 s1
      œÉ'         <- pure $ asElim $ untotalisePatt (Arg œÉ) p
      e2         <- liftM1 asExpr (desugarPatternBwd œÉ' p)
      sListComp  <- desugarBwd e2 (Expr true (ListComp s2 (NonEmptyList (q :| qs))))
      case sListComp of
         Expr Œ±4 (ListComp s2' (NonEmptyList (q' :| qs'))) ->
            pure $ Expr (Œ±1 ‚àß Œ±2 ‚àß Œ±3 ‚àß Œ±4)
                        (ListComp s2' (NonEmptyList ((Generator (Œ±1 ‚àß Œ±2 ‚àß Œ±3) p s1) :| q' : qs')))
         sListComp'
            -> error $ "desugarBwd for List-comp-gen failed: \n" <>
                       render (pretty sListComp')
   -- | Let
   desugarBwd (E.Expr Œ± (E.Let d e))
              (Expr _ (Let ds s)) = do
      Œ±' √ó (ds' √ó s') <- desugarBwd (E.Expr Œ± (E.Let d e)) (true √ó (ds √ó s))
      pure $ Expr Œ±' (Let ds' s')
   -- | LetRec (recursive function)
   desugarBwd (E.Expr Œ± (E.LetRec fœÄs e))
              (Expr _ (LetRec fœÄs' s)) =
      Expr Œ± <$> (LetRec <$> desugarBwd fœÄs fœÄs' <*> desugarBwd e s)

   desugarBwd e s = error $ "desugarBwd match not found: " <> render (pretty e) <> "\n" <> render (pretty s)

asElim :: Cont ùîπ -> Elim ùîπ
asElim (Arg œÉ) =  œÉ
asElim Œ∫ = error $ "Couldn't infer Elim from Cont: \n" <>
                   render (pretty Œ∫)

asExpr :: Cont ùîπ -> E.Expr ùîπ
asExpr (Body e) =  e
asExpr Œ∫ = error $ "Couldn't infer Expr from Cont: \n" <>
                   render (pretty Œ∫)

{- e, l ‚Üò l -}
instance desugarBwdListRest :: DesugarBwd (E.Expr Boolean) (ListRest Boolean) where
   desugarBwd (E.Expr Œ± (E.Constr c Nil)) (End _) | c == cNil =
      pure $ End Œ±
   desugarBwd (E.Expr Œ± (E.Constr c (e : e' : Nil))) (Next _ s l) | c == cCons =
      Next Œ± <$> desugarBwd e s <*> desugarBwd e' l
   desugarBwd e l = error $ "desugarBwdListRest (e, l) match not found: \n" <>
                            render (pretty e) <> "\n" <>
                            render (pretty l)

class DesugarPatternBwd a where
   desugarPatternBwd :: Elim Boolean -> a -> MayFail (Cont Boolean)

{-    ‚Üí     -}
{- œÉ, p ‚Üò Œ∫ -}
instance desugarPatternBwdPatterns :: DesugarPatternBwd (NonEmptyList Pattern) where
   desugarPatternBwd œÉ (NonEmptyList (œÄ :| Nil)) = desugarPatternBwd œÉ œÄ
   desugarPatternBwd œÉ (NonEmptyList (œÄ :| œÄ' : œÄs)) = do
      œÉ' <- liftM1 asElim $ desugarPatternBwd œÉ œÄ
      desugarPatternBwd œÉ' (NonEmptyList (œÄ' :| œÄs))

{- œÉ, p ‚Üò Œ∫ -}
instance desugarPatternBwdPattern :: DesugarPatternBwd Pattern where
   -- | Var
   desugarPatternBwd (ElimVar x Œ∫)  (PVar x') = (x ‚âû x') *> pure Œ∫
   -- | Nil
   desugarPatternBwd (ElimConstr m) (PConstr c Nil) | c == cNil = lookupE cNil m
   -- | Cons, Pair
   desugarPatternBwd (ElimConstr m) (PConstr ctr (œÄ:œÄ':_))
      | ctr == cNil || ctr == cPair = do
          œÉ  <- liftM1 asElim $ lookupE ctr m
          œÉ' <- liftM1 asElim $ desugarPatternBwd œÉ œÄ
          desugarPatternBwd œÉ' œÄ'
   -- | Empty-list
   desugarPatternBwd (ElimConstr m) (PListEmpty) = lookupE cNil m
   -- | Non-empty-list
   desugarPatternBwd œÉ (PListNonEmpty œÄ o)  = do
      œÉ' <- liftM1 asElim $ desugarPatternBwd œÉ œÄ
      desugarPatternBwd œÉ' o
   desugarPatternBwd œÉ œÄ = error $ "desugarPatternBwdPattern (œÉ, œÄ) match not found: \n" <>
                                   render (pretty œÉ) <> "\n" <>
                                   render (pretty œÄ)

{- œÉ, o ‚Üò Œ∫ -}
instance desugarPatternBwdListPatternRest :: DesugarPatternBwd ListPatternRest where
   desugarPatternBwd (ElimConstr m) PEnd        = lookupE cCons m
   desugarPatternBwd (ElimConstr m) (PNext œÄ o) = do
      œÉ  <- liftM1 asElim $ lookupE cCons m
      œÉ' <- liftM1 asElim $ desugarPatternBwd œÉ œÄ
      desugarPatternBwd œÉ' o
   desugarPatternBwd œÉ l = error $ "desugarPatternBwdListPatternRest (œÉ, l) match not found: \n" <>
                                   render (pretty œÉ) <> "\n" <>
                                   render (pretty l)
{- œÉ, c ‚Üò c -}
instance desugarBwdBranch :: DesugarBwd (Elim Boolean) (NonEmptyList Pattern √ó Expr Boolean) where
   desugarBwd œÉ (œÄs √ó s) = do
      e  <- liftM1 asExpr $ desugarPatternBwd œÉ œÄs
      s' <- desugarBwd e s
      pure $ œÄs √ó s'

instance desugarBwdBranchUncurried :: DesugarBwd (Elim Boolean) (Pattern √ó Expr Boolean) where
   desugarBwd œÉ (œÄs √ó s) = do
      e  <- liftM1 asExpr $ desugarPatternBwd œÉ œÄs
      s' <- desugarBwd e s
      pure $ œÄs √ó s'

{-    ‚Üí   ‚Üí -}
{- œÉ, c ‚Üò c -}
instance desugarBwdBranches :: DesugarBwd (Elim Boolean) (NonEmptyList (NonEmptyList Pattern √ó Expr Boolean)) where
   desugarBwd œÉ (NonEmptyList (b1 :| b2 : bs)) = do
      b'  <- desugarBwd œÉ b1
      bs' <- desugarBwd œÉ (NonEmptyList (b2 :| bs))
      pure $ NonEmptyList (b' :| (toList bs'))
   desugarBwd œÉ (NonEmptyList (b :| Nil)) = do
      b' <- desugarBwd œÉ b
      pure $ NonEmptyList (b' :| Nil)

instance desugarBwdBranchesUncurried :: DesugarBwd (Elim Boolean) (NonEmptyList (Pattern √ó Expr Boolean)) where
   desugarBwd œÉ (NonEmptyList (b1 :| b2 : bs)) = do
      b'  <- desugarBwd œÉ b1
      bs' <- desugarBwd œÉ (NonEmptyList (b2 :| bs))
      pure $ NonEmptyList (b' :| (toList bs'))
   desugarBwd œÉ (NonEmptyList (b :| Nil)) = do
      b' <- desugarBwd œÉ b
      pure $ NonEmptyList (b' :| Nil)

{- untotalise Œ∫ p ‚Üó Œ∫' -}
untotalisePatt :: Cont ùîπ -> Pattern -> Cont ùîπ
untotalisePatt (Arg œÉ) p =
   case œÉ, p of
      -- | var
      ElimVar x Œ∫, PVar x'            ->
         if x == x' then Arg (ElimVar x Œ∫) else error absurd
      -- | true, false, pair, nil, cons
      ElimConstr m, PConstr ctr ps    ->
         let Œ∫ = mustLookup ctr m
         in  Arg $ ElimConstr (fromFoldable [ctr √ó untotaliseListPatt Œ∫ ps])
      -- | patt-list-empty
      ElimConstr m, PListEmpty        ->
         let Œ∫ = mustLookup cNil m
         in  Arg $ ElimConstr (fromFoldable [cNil √ó Œ∫])
      -- | patt-list-non-empty
      ElimConstr m, PListNonEmpty p' o ->
         let Œ∫ = mustLookup cCons m
         in  Arg $ ElimConstr (fromFoldable [cCons √ó untotaliseListPattRest (untotalisePatt Œ∫ p') o])
      œÉ', p' -> error $ "untotalisePatt (œÉ, œÄ) match not found: \n" <>
                      render (pretty œÉ') <> "\n" <>
                      render (pretty p')
untotalisePatt Œ∫ œÄ = error $ "untotalisePatt (Œ∫, œÄ) match not found: \n" <>
                             render (pretty Œ∫) <> "\n" <>
                             render (pretty œÄ)

untotaliseListPatt :: Cont ùîπ -> List Pattern -> Cont ùîπ
untotaliseListPatt Œ∫ Nil = Œ∫
untotaliseListPatt Œ∫ (p:ps) =
   untotaliseListPatt (untotalisePatt Œ∫ p) ps

{- untotalise Œ∫ o ‚Üó Œ∫' -}
untotaliseListPattRest :: Cont ùîπ -> ListPatternRest -> Cont ùîπ
untotaliseListPattRest (Arg (ElimConstr m)) PEnd =
   let Œ∫ = mustLookup cNil m
   in  Arg $ ElimConstr (fromFoldable [cNil √ó Œ∫])
untotaliseListPattRest (Arg (ElimConstr m)) (PNext p o) =
   let Œ∫ = mustLookup cCons m
   in  Arg $ ElimConstr (fromFoldable [cCons √ó untotaliseListPattRest (untotalisePatt Œ∫ p) o])
untotaliseListPattRest Œ∫ o = error $ "untotaliseListPattRest (Œ∫, o) not found: \n" <>
                                     render (pretty Œ∫) <> "\n" <>
                                     render (pretty o)