module DesugarBwd where

import Prelude hiding (absurd)

import Data.Either (Either(..))
import Data.Foldable (foldl)
import Data.Function (applyN, on)
import Data.List (List(..), (:), (\\), reverse, singleton, unzip, zip, zipWith)
import Data.List.NonEmpty (NonEmptyList(..), groupBy, toList)
import Data.Map (Map, fromFoldable, lookup)
import Data.Maybe (Maybe(..))
import Data.NonEmpty ((:|))
import Data.Profunctor.Strong ((&&&))
import Data.Tuple (uncurry, fst, snd)
import Partial.Unsafe (unsafePartial)
import Bindings (Bind, (‚Ü¶), key, val)
import DataType (Ctr, arity, cCons, cNil, cTrue, cFalse, ctrs, dataTypeFor)
import Expr (Cont(..), Elim(..), asElim, asExpr)
import Expr (Expr(..), RecDefs, VarDef(..)) as E
import Lattice (ùîπ, (‚à®), botOf)
import SExpr (
      Branch, Clause, Expr(..), ListRest(..), Pattern(..), ListRestPattern(..), Qualifier(..), RecDefs, VarDef(..),
      VarDefs
   )
import Util (Endo, type (+), type (√ó), (√ó), absurd, error, mustLookup, successful)

desugarBwd :: E.Expr ùîπ -> Expr ùîπ -> Expr ùîπ
desugarBwd = exprBwd

varDefsBwd :: E.Expr ùîπ -> VarDefs ùîπ √ó Expr ùîπ -> VarDefs ùîπ √ó Expr ùîπ
varDefsBwd (E.Let (E.VarDef _ e1) e2) (NonEmptyList (VarDef œÄ s1 :| Nil) √ó s2) =
   NonEmptyList (VarDef œÄ (exprBwd e1 s1) :| Nil) √ó exprBwd e2 s2
varDefsBwd (E.Let (E.VarDef _ e1) e2) (NonEmptyList (VarDef œÄ s1 :| d : ds) √ó s2) =
   let NonEmptyList (d' :| ds') √ó s2' = varDefsBwd e2 (NonEmptyList (d :| ds) √ó s2) in
   NonEmptyList (VarDef œÄ (exprBwd e1 s1) :| d' : ds') √ó s2'
varDefsBwd _ (NonEmptyList (_ :| _) √ó _) = error absurd

recDefsBwd :: E.RecDefs ùîπ -> RecDefs ùîπ -> RecDefs ùîπ
recDefsBwd xœÉs xcs = join (recDefsBwd' xœÉs (groupBy (eq `on` fst) xcs))

recDefsBwd' :: E.RecDefs ùîπ -> NonEmptyList (RecDefs ùîπ) -> NonEmptyList (RecDefs ùîπ)
recDefsBwd' Nil _                                              = error absurd
recDefsBwd' (x ‚Ü¶ œÉ : Nil) (NonEmptyList (xcs :| Nil))          = NonEmptyList (recDefBwd (x ‚Ü¶ œÉ) xcs :| Nil)
recDefsBwd' (_ : _ : _) (NonEmptyList (_ :| Nil))              = error absurd
recDefsBwd' (x ‚Ü¶ œÉ : œÅ) (NonEmptyList (xcs1 :| xcs2 : xcss))  =
   NonEmptyList (recDefBwd (x ‚Ü¶ œÉ) xcs1 :| toList (recDefsBwd' œÅ (NonEmptyList (xcs2 :| xcss))))

recDefBwd :: Bind (Elim ùîπ) -> NonEmptyList (Clause ùîπ) -> NonEmptyList (Clause ùîπ)
recDefBwd (x ‚Ü¶ œÉ) = map (x √ó _) <<< branchesBwd_curried œÉ <<< map snd

exprBwd :: E.Expr ùîπ -> Expr ùîπ -> Expr ùîπ
exprBwd (E.Var _) (Var x) = Var x
exprBwd (E.Op _) (Op op) = Op op
exprBwd (E.Int Œ± _) (Int _ n) = Int Œ± n
exprBwd (E.Float Œ± _) (Float _ n) = Float Œ± n
exprBwd (E.Str Œ± _) (Str _ str) = Str Œ± str
exprBwd (E.Constr Œ± _ es) (Constr _ c ss) = Constr Œ± c (uncurry exprBwd <$> zip es ss)
exprBwd (E.Record Œ± xes) (Record _ xss) =
   Record Œ± $ xss <#> \(x ‚Ü¶ s) -> x ‚Ü¶ case lookup x xes of
      Nothing -> botOf s
      Just e -> exprBwd e s
exprBwd (E.Matrix Œ± e1 _ e2) (Matrix _ s (x √ó y) s') =
   Matrix Œ± (exprBwd e1 s) (x √ó y) (exprBwd e2 s')
exprBwd (E.Lambda œÉ) (Lambda bs) = Lambda (branchesBwd_curried œÉ bs)
exprBwd (E.Project e _) (Project s x) = Project (exprBwd e s) x
exprBwd (E.App e1 e2) (App s1 s2) = App (exprBwd e1 s1) (exprBwd e2 s2)
exprBwd (E.App (E.Lambda œÉ) e) (MatchAs s bs) =
   MatchAs (exprBwd e s) (branchesBwd_uncurried œÉ bs)
exprBwd (E.App (E.Lambda (ElimConstr m)) e1) (IfElse s1 s2 s3) =
   IfElse (exprBwd e1 s1)
            (exprBwd (asExpr (mustLookup cTrue m)) s2)
            (exprBwd (asExpr (mustLookup cFalse m)) s3)
exprBwd (E.App (E.App (E.Op _) e1) e2) (BinaryApp s1 op s2) =
   BinaryApp (exprBwd e1 s1) op (exprBwd e2 s2)
exprBwd (E.Let d e) (Let ds s) = uncurry Let (varDefsBwd (E.Let d e) (ds √ó s))
exprBwd (E.LetRec xœÉs e') (LetRec xcs s) = LetRec (recDefsBwd xœÉs xcs) (exprBwd e' s)
exprBwd (E.Constr Œ± _ Nil) (ListEmpty _) = ListEmpty Œ±
exprBwd (E.Constr Œ± _ (e1 : e2 : Nil)) (ListNonEmpty _ s l) =
   ListNonEmpty Œ± (exprBwd e1 s) (listRestBwd e2 l)
exprBwd (E.App (E.App (E.Var "enumFromTo") e1) e2) (ListEnum s1 s2) =
   ListEnum (exprBwd e1 s1) (exprBwd e2 s2)
-- list-comp-done
exprBwd (E.Constr Œ±2 _ (e' : E.Constr Œ±1 _ Nil : Nil))
        (ListComp _ s_body (NonEmptyList (Guard (Constr _ c Nil) :| Nil))) | c == cTrue =
   ListComp (Œ±1 ‚à® Œ±2) (exprBwd e' s_body)
                     (NonEmptyList (Guard (Constr (Œ±1 ‚à® Œ±2) cTrue Nil) :| Nil))
-- list-comp-last
exprBwd e (ListComp Œ± s (NonEmptyList (q :| Nil))) =
   case exprBwd e (ListComp Œ± s (NonEmptyList (q :| Guard (Constr true cTrue Nil) : Nil))) of
      ListComp Œ≤ s' (NonEmptyList (q' :| (Guard (Constr _ c Nil)) : Nil)) | c == cTrue ->
         (ListComp Œ≤ s' (NonEmptyList (q' :| Nil)))
      _ -> error absurd
-- list-comp-guard
exprBwd (E.App (E.Lambda (ElimConstr m)) e2) (ListComp Œ±0 s1 (NonEmptyList (Guard s2 :| q : qs))) =
   case exprBwd (asExpr (mustLookup cTrue m)) (ListComp Œ±0 s1 (NonEmptyList (q :| qs))) √ó
         exprBwd (asExpr (mustLookup cFalse m)) (Constr true cNil Nil) of
      ListComp Œ≤ s1' (NonEmptyList (q' :| qs')) √ó Constr Œ± c Nil | c == cNil ->
         ListComp (Œ± ‚à® Œ≤) s1' (NonEmptyList (Guard (exprBwd e2 s2) :| q' : qs'))
      _ √ó _ -> error absurd
-- list-comp-decl
exprBwd (E.App (E.Lambda œÉ) e1) (ListComp Œ±0 s2 (NonEmptyList (Declaration (VarDef œÄ s1) :| q : qs))) =
   case branchBwd_curried œÉ (NonEmptyList (œÄ :| Nil) √ó (ListComp Œ±0 s2 (NonEmptyList (q :| qs)))) of
      _ √ó ListComp Œ≤ s2' (NonEmptyList (q' :| qs')) ->
         ListComp Œ≤ s2' (NonEmptyList ((Declaration (VarDef œÄ (exprBwd e1 s1))) :| q' : qs'))
      _ √ó _ -> error absurd
-- list-comp-gen
exprBwd (E.App (E.App (E.Var "concatMap") (E.Lambda œÉ)) e1)
        (ListComp Œ± s2 (NonEmptyList (Generator p s1 :| q : qs))) =
   let œÉ' √ó Œ≤ = totaliseBwd (ContElim œÉ) (Left p : Nil) in
   case exprBwd (asExpr (patternBwd (asElim œÉ') p)) (ListComp Œ± s2 (NonEmptyList (q :| qs))) of
      ListComp Œ≤' s2' (NonEmptyList (q' :| qs')) ->
         ListComp (Œ≤ ‚à® Œ≤') s2' (NonEmptyList (Generator p (exprBwd e1 s1) :| q' : qs'))
      _ -> error absurd
exprBwd _ _ = error absurd

-- e, l desugar_bwd l
listRestBwd :: E.Expr ùîπ -> Endo (ListRest ùîπ)
listRestBwd (E.Constr Œ± _ _) (End _) = End Œ±
listRestBwd (E.Constr Œ± _ (e1 : e2 : Nil)) (Next _ s l) =
   Next Œ± (exprBwd e1 s) (listRestBwd e2 l)
listRestBwd _ _ = error absurd

-- œÉ, ps desugar_bwd e
patternsBwd :: Elim ùîπ -> NonEmptyList Pattern -> E.Expr ùîπ
patternsBwd œÉ (NonEmptyList (p :| Nil))      = asExpr (patternBwd œÉ p)
patternsBwd œÉ (NonEmptyList (p :| p' : ps))  = patternsBwd_rest (asExpr (patternBwd œÉ p))
   where
      patternsBwd_rest (E.Lambda œÑ) = patternsBwd œÑ (NonEmptyList (p' :| ps))
      patternsBwd_rest _            = error absurd

-- œÉ, p desugar_bwd Œ∫
patternBwd :: Elim ùîπ -> Pattern -> Cont ùîπ
patternBwd (ElimVar _ Œ∫) (PVar _)               = Œ∫
patternBwd (ElimConstr m) (PConstr c ps)        = argsBwd (mustLookup c m) (Left <$> ps)
patternBwd (ElimConstr m) (PListEmpty)          = mustLookup cNil m
patternBwd (ElimConstr m) (PListNonEmpty p o)   = argsBwd (mustLookup cCons m) (Left p : Right o : Nil)
patternBwd (ElimRecord _ Œ∫) (PRecord xps)       = recordBwd Œ∫ (reverse xps)
patternBwd _ _                                  = error absurd

-- œÉ, o desugar_bwd Œ∫
listRestPatternBwd :: Elim ùîπ -> ListRestPattern -> Cont ùîπ
listRestPatternBwd (ElimVar _ _) _              = error absurd
listRestPatternBwd (ElimRecord _ _) _           = error absurd
listRestPatternBwd (ElimConstr m) PEnd          = mustLookup cNil m
listRestPatternBwd (ElimConstr m) (PNext p o)   = argsBwd (mustLookup cCons m) (Left p : Right o : Nil)

argsBwd :: Cont ùîπ -> List (Pattern + ListRestPattern) -> Cont ùîπ
argsBwd Œ∫ Nil              = Œ∫
argsBwd Œ∫ (Left p : œÄs)    = argsBwd (patternBwd (asElim Œ∫) p) œÄs
argsBwd Œ∫ (Right o : œÄs)   = argsBwd (listRestPatternBwd (asElim Œ∫) o) œÄs

recordBwd :: Cont ùîπ -> List (Bind Pattern) -> Cont ùîπ
recordBwd Œ∫ Nil            = Œ∫
recordBwd œÉ (_ ‚Ü¶ p : xps) = recordBwd œÉ xps # (asElim >>> flip patternBwd p)

-- œÉ, c desugar_bwd c
branchBwd_curried :: Elim ùîπ -> Endo (Branch ùîπ)
branchBwd_curried œÉ (œÄs √ó s) = œÄs √ó exprBwd (patternsBwd œÉ œÄs) s

-- œÉ, c desugar_bwd c
branchBwd_uncurried :: Elim ùîπ -> Endo (Pattern √ó Expr ùîπ)
branchBwd_uncurried œÉ (p √ó s) = p √ó exprBwd (asExpr (patternBwd œÉ p)) s

-- œÉ, cs desugar_bwd cs
branchesBwd_curried :: Elim ùîπ -> Endo (NonEmptyList (Branch ùîπ))
branchesBwd_curried œÉ (NonEmptyList (b1 :| b2 : bs)) =
   NonEmptyList (branchBwd_curried œÉ b1 :| toList (branchesBwd_curried œÉ (NonEmptyList (b2 :| bs))))
branchesBwd_curried œÉ (NonEmptyList (b :| Nil)) =
   NonEmptyList (branchBwd_curried œÉ b :| Nil)

-- œÉ, cs desugar_bwd cs
branchesBwd_uncurried :: Elim ùîπ -> Endo (NonEmptyList (Pattern √ó Expr ùîπ))
branchesBwd_uncurried œÉ (NonEmptyList (b1 :| b2 : bs)) =
   NonEmptyList (branchBwd_uncurried œÉ b1 :| toList (branchesBwd_uncurried œÉ (NonEmptyList (b2 :| bs))))
branchesBwd_uncurried œÉ (NonEmptyList (b :| Nil)) =
   NonEmptyList (branchBwd_uncurried œÉ b :| Nil)

-- Œ∫, œÄs totalise_bwd Œ∫', Œ±
totaliseBwd :: Cont ùîπ -> List (Pattern + ListRestPattern) -> Cont ùîπ √ó ùîπ
totaliseBwd Œ∫ Nil = Œ∫ √ó false
totaliseBwd ContNone _ = error absurd
totaliseBwd (ContElim (ElimVar _ Œ∫')) (Left (PVar x) : œÄs) =
   let Œ∫'' √ó Œ± = totaliseBwd Œ∫' œÄs in
   ContElim (ElimVar x Œ∫'') √ó Œ±
totaliseBwd (ContElim (ElimRecord _ Œ∫')) (Left (PRecord xps) : œÄs) =
   let ps = xps <#> (val >>> Left)
       Œ∫'' √ó Œ± = totaliseBwd Œ∫' (ps <> œÄs) in
   ContElim (ElimRecord (xps <#> key) Œ∫'') √ó Œ±
totaliseBwd (ContElim (ElimConstr m)) (œÄ : œÄs) =
   let c √ó œÄs' = case œÄ of
         -- TODO: refactor so these two cases aren't necessary
         Left (PVar _)              -> error absurd
         Left (PRecord _)           -> error absurd
         Left (PConstr c ps)        -> c √ó (Left <$> ps)
         Left PListEmpty            -> cNil √ó Nil
         Left (PListNonEmpty p o)   -> cCons √ó (Left p : Right o : Nil)
         Right PEnd                 -> cNil √ó Nil
         Right (PNext p o)          -> cCons √ó (Left p : Right o : Nil)
   -- use totaliseConstrFwd to construct "eliminator pattern" to match against
   in
   let Œ∫' √ó Œ± = totaliseConstrBwd m c
       Œ∫'' √ó Œ≤ = totaliseBwd Œ∫' (œÄs' <> œÄs) in
   ContElim (ElimConstr (fromFoldable (singleton (c √ó Œ∫'')))) √ó (Œ± ‚à® Œ≤)
totaliseBwd _ _ = error absurd

-- Discard all synthesised branches, returning the original singleton branch for c, plus join of annotations
-- on the empty lists used for bodies of synthesised branches.
totaliseConstrBwd :: Map Ctr (Cont ùîπ) -> Ctr -> Cont ùîπ √ó ùîπ
totaliseConstrBwd m c = unsafePartial $
   let cs = ctrs (successful (dataTypeFor c)) \\ singleton c in
   mustLookup c m √ó foldl (‚à®) false (map (bodyAnn <<< body) cs)
   where
      body :: Partial => Ctr -> Cont ùîπ
      body c' = applyN unargument (successful (arity c')) (mustLookup c' m)

      unargument :: Partial => Cont ùîπ -> Cont ùîπ
      unargument (ContElim (ElimVar _ Œ∫)) = Œ∫

      bodyAnn :: Partial => Cont ùîπ -> ùîπ
      bodyAnn (ContExpr (E.Constr Œ± c' Nil)) | c' == cNil = Œ±

