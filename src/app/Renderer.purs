module App.Renderer where

import Prelude
import Control.Apply (lift2)
import Data.Array ((:)) as A
import Data.Array (zip, zipWith)
import Data.List (List(..), (:))
import Data.Tuple (fst)
import Data.Profunctor.Strong (first)
import Bindings (Bindings, Bind, Var, (‚Ü¶), find)
import DataType (cBarChart, cCons, cNil)
import Effect (Effect)
import Lattice (ùîπ, expand)
import Primitive (Slice, class ToFrom, as, match, match_bwd, match_fwd)
import Util (type (√ó), (√ó), type (+), successful)
import Util.SnocList (SnocList(..), (:-))
import Val (Array2, MatrixRep, Val)
import Val (Val(..)) as V

foreign import drawFigure :: String -> Array Fig -> Effect Unit

-- For each user-level datatype of interest, a representation containing appropriate implementation types.
-- Record types are hardcoded to specific examples for now. Matrices are assumed to have element type Int.
type IntMatrix = Array2 (Int √ó ùîπ) √ó Int √ó Int
type EnergyRecord = { year :: Int √ó ùîπ, country :: String √ó ùîπ, energyType :: String √ó ùîπ, output :: Number √ó ùîπ }
type BarChart = { caption :: String √ó ùîπ, data_ :: Array BarChartRecord }
type BarChartRecord = { x :: String √ó ùîπ, y :: Number √ó ùîπ }

data Fig =
   MatrixFig { title :: String, cellFillSelected :: String, matrix :: IntMatrix } |
   EnergyTable { title :: String, cellFillSelected :: String, table :: Array EnergyRecord } |
   LineChart { title :: String } |
   BarChart { caption :: String, data :: Array BarChartRecord }

-- Convert sliced value to appropriate Fig, discarding top-level annotations for now.
type MakeFig = Partial => String -> String -> Slice (Val ùîπ) -> Fig

matrixFig :: MakeFig
matrixFig title cellFillSelected (u √ó v) =
   let vss2 = fst (match_fwd (u √ó v)) √ó fst (match v) in
   MatrixFig { title, cellFillSelected, matrix: matrixRep vss2 }

-- Convert list slice to array of slices, with hole expansion as necessary, discarding list-level annotations.
toArray :: Partial => Slice (Val ùîπ) -> Array (Slice (Val ùîπ))
toArray (vs √ó V.Constr _ c Nil) | c == cNil =
   case expand vs (V.Constr false cNil Nil) of
      V.Constr _ _ Nil -> []
toArray (us √ó V.Constr _ c (v1 : v2 : Nil)) | c == cCons =
   case expand us (V.Constr false cCons (V.Hole false : V.Hole false : Nil)) of
      V.Constr _ _ (u1 : u2 : Nil) -> (u1 √ó v1) A.: toArray (u2 √ó v2)

makeEnergyTable :: MakeFig
makeEnergyTable title cellFillSelected (u √ó v) =
   EnergyTable { title, cellFillSelected, table: record energyRecord <$> toArray (u √ó v) }

makeBarChart :: MakeFig
makeBarChart title _ (u √ó V.Constr _ c (v1 : Nil)) | c == cBarChart =
   case expand u (V.Constr false cBarChart (V.Hole false : Nil)) of
      V.Constr _ _ (u1 : Nil) ->
         let { caption: caption √ó _, data_ } = record barChart (u1 √ó v1) in BarChart { caption, data: data_ }

lineChart :: MakeFig
lineChart title _ _ = LineChart { title }

record :: forall a . (Slice (Bindings (Val ùîπ)) -> a) -> Slice (Val ùîπ) -> a
record toRecord (u √ó v) = toRecord (fst (match_fwd (u √ó v)) √ó fst (match v))

energyRecord :: Slice (Bindings (Val ùîπ)) -> EnergyRecord
energyRecord r = {
   year: get_prim "year" r,
   country: get_prim "country" r,
   energyType: get_prim "energyType" r,
   output: get_intNumber "output" r
}

barChart :: Partial => Slice (Bindings (Val ùîπ)) -> BarChart
barChart r = {
   caption: get_prim "caption" r,
   data_: record from <$> toArray (get "data" r)
}

matrixRep :: Slice (MatrixRep ùîπ) -> IntMatrix
matrixRep ((vss √ó _ √ó _) √ó (uss √ó (i √ó _) √ó (j √ó _))) =
   ((<$>) ((<$>) match_fwd)) (zipWith zip vss uss) √ó i √ó j

get_prim :: forall a . ToFrom a => Var -> Slice (Bindings (Val ùîπ)) -> a √ó ùîπ
get_prim x = match_fwd <<< get x

get_intNumber :: Var -> Slice (Bindings (Val ùîπ)) -> Number √ó ùîπ
get_intNumber x r = first as (get_prim x r :: (Int + Number) √ó ùîπ)

get :: Var -> Slice (Bindings (Val ùîπ)) -> Slice (Val ùîπ)
get x (r √ó r') = successful $ find x r `lift2 (√ó)` find x r'

class Reflect a b | a -> b where
   from :: Slice a -> b
   to :: b -> a

instance reflectBarChartRecord :: Reflect (SnocList (Bind (Val Boolean)))
                                  { x :: String √ó Boolean, y :: Number √ó Boolean } where
   from r = {
      x: get_prim "x" r,
      y: get_intNumber "y" r
   }

   to { x, y } = Lin :- "x" ‚Ü¶ match_bwd x :- "y" ‚Ü¶ match_bwd y
