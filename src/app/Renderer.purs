module App.Renderer where

import Prelude
import Data.Array (zip, zipWith)
import Data.Tuple (fst)
import Effect (Effect)
import Lattice (ùîπ)
import Primitive (match, match_fwd)
import Util (type (√ó), (√ó))
import Val (Array2, MatrixRep, Val)

-- Similar to MatrixRep ùîπ, but with elements converted from values to the underlying data type.
type MatrixRep' = Array2 (Int √ó ùîπ) √ó Int √ó Int
type MatrixFig = { title :: String, cellFillSelected :: String, matrix :: MatrixRep' }

foreign import drawFigure :: String -> Array MatrixFig -> Effect Unit

-- Will want to generalise to arrays of "drawable values". Second component of elements is original value.
toIntMatrix :: Array2 (Val ùîπ √ó Val ùîπ) -> Array2 (Int √ó ùîπ)
toIntMatrix = (<$>) ((<$>) match_fwd)

bits :: MatrixRep ùîπ √ó MatrixRep ùîπ -> MatrixRep'
bits ((vss √ó _ √ó _) √ó (vss' √ó (i √ó _) √ó (j √ó _))) = toIntMatrix (zipWith zip vss vss') √ó i √ó j

-- Inputs are pairs of matrices; second component is original (unsliced) matrix.
renderFigures :: String -> Array (Val ùîπ √ó Val ùîπ) -> Effect Unit
renderFigures divId uvs =
   drawFigure divId (uvs <#> renderFigure)
      where
      renderFigure :: Val ùîπ √ó Val ùîπ -> MatrixFig
      renderFigure (u √ó v) =
         let v' √ó _ = match_fwd (u √ó v) in
         { title: "output", cellFillSelected: "LightGreen", matrix: bits (v' √ó fst (match v)) }
