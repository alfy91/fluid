module App.Demo where

import Prelude hiding (absurd)
import Data.Array (zip)
import Data.Either (Either(..))
import Data.List (List(..), (:), singleton)
import Data.Traversable (sequence)
import Effect (Effect)
import Effect.Aff (Aff, runAff_)
import Effect.Console (log)
import Partial.Unsafe (unsafePartial)
import App.Renderer (Fig, MakeFig, drawFigure, makeBarChart, makeEnergyTable, matrixFig)
import Bindings (Var, (‚Ü¶), find, update)
import DataType (cBarChart, cCons)
import DesugarFwd (desugarFwd, desugarModuleFwd)
import Eval (eval, eval_module)
import EvalBwd (evalBwd)
import EvalFwd (evalFwd)
import Lattice (ùîπ, botOf, neg)
import Module (openWithDefaultImports, openDatasetAs)
import Primitive (Slice)
import SExpr (Expr(..), Module(..), RecDefs, VarDefs) as S
import Util (MayFail, type (√ó), (√ó), type (+), successful)
import Util.SnocList (SnocList(..), (:-))
import Val (Env, Val(..), holeMatrix, insertMatrix)

selectCell :: Int -> Int -> Int -> Int -> Val ùîπ
selectCell i j i' j' = Matrix false (insertMatrix i j (Hole true) (holeMatrix i' j'))

selectNth :: Int -> Val ùîπ -> Val ùîπ
selectNth 0 v = Constr false cCons (v : Hole false : Nil)
selectNth n v = Constr false cCons (Hole false : selectNth (n - 1) v : Nil)

select_y :: Val ùîπ
select_y = Record false (Lin :- "x" ‚Ü¶ Hole false :- "y" ‚Ü¶ Hole true)

select_barChart_data :: Val ùîπ -> Val ùîπ
select_barChart_data v = Constr false cBarChart (Record false (Lin :- "caption" ‚Ü¶ Hole false :- "data" ‚Ü¶ v) : Nil)

-- Rewrite example of the form (let <defs> in expr) to a "module" and expr, so we can treat defs as part of
-- the environment that we can easily inspect.
splitDefs :: Partial => Env ùîπ -> S.Expr ùîπ -> MayFail (Env ùîπ √ó S.Expr ùîπ)
splitDefs œÅ s' =
   let defs √ó s = unpack s' in
   (desugarModuleFwd (S.Module (singleton defs)) >>= eval_module œÅ) <#> (_ √ó s)
   where unpack :: S.Expr ùîπ -> (S.VarDefs ùîπ + S.RecDefs ùîπ) √ó S.Expr ùîπ
         unpack (S.LetRec defs s)   = Right defs √ó s
         unpack (S.Let defs s)      = Left defs √ó s

type Example = Env ùîπ -> S.Expr ùîπ -> MayFail (Array Fig)
type VarSpec = {
   var :: Var,
   fig :: MakeFig
}

example_needed :: Array VarSpec -> MakeFig -> Val ùîπ -> Example
example_needed x_figs o_fig o' œÅ s0 = unsafePartial $ do
   œÅ' √ó s <- splitDefs œÅ s0
   e <- desugarFwd s
   let œÅœÅ' = œÅ <> œÅ'
   t √ó o <- eval œÅœÅ' e
   let œÅœÅ'' √ó _ √ó _ = evalBwd o' t
       xs = _.var <$> x_figs
   vs <- sequence (flip find œÅœÅ' <$> xs)
   vs' <- sequence (flip find œÅœÅ'' <$> xs)
   pure $ [ o_fig "output" "LightGreen" (o' √ó o) ] <> (varFig <$> zip x_figs (zip vs' vs))
   where
      varFig :: Partial => VarSpec √ó Slice (Val ùîπ) -> Fig
      varFig ({var: x, fig} √ó (v √ó u)) = fig x "Yellow" (v √ó u)

example_neededBy :: Example
example_neededBy œÅ s0 = unsafePartial $ do
   œÅ' √ó s <- splitDefs œÅ s0
   e <- desugarFwd s
   t √ó o <- eval (œÅ <> œÅ') e
   let œâ' = selectCell 1 1 3 3
       œÅ'' = update (botOf œÅ') ("filter" ‚Ü¶ œâ')
       o' = neg (evalFwd (neg (botOf œÅ <> œÅ'')) (const true <$> e) true t)
   œâ <- find "filter" œÅ'
   i <- find "image" œÅ'
   i' <- find "image" œÅ''
   pure [
      matrixFig "output" "Yellow" (o' √ó o),
      matrixFig "filter" "LightGreen" (œâ' √ó œâ),
      matrixFig "input" "Yellow" (i' √ó i)
   ]

makeFigure :: String -> Example -> String -> Effect Unit
makeFigure file example divId =
   flip runAff_ (burble file)
   case _ of
      Left e -> log ("Open failed: " <> show e)
      Right (œÅ √ó s) -> do
         drawFigure divId (successful (example œÅ s))

-- TODO: rename; consolidate with similar test util code/move to Module; not every example should run in
-- context of renewables data.
burble :: String -> Aff (Env ùîπ √ó S.Expr ùîπ)
burble file = do
   œÅ0 √ó s <- openWithDefaultImports file
   œÅ <- openDatasetAs ("example/linking/" <> "renewables") "data"
   pure ((œÅ0 <> œÅ) √ó s)

convolutionFigs :: Effect Unit
convolutionFigs = do
   makeFigure "slicing/conv-wrap"
              (example_needed [{ var: "filter", fig: matrixFig }, { var: "image", fig: matrixFig }]
                             matrixFig
                             (selectCell 2 1 5 5))
              "fig-1"
   makeFigure "slicing/conv-wrap" example_neededBy "fig-2"
   makeFigure "slicing/conv-zero"
              (example_needed [{ var: "filter", fig: matrixFig }, { var: "image", fig: matrixFig }]
                              matrixFig
                              (selectCell 2 1 5 5))
              "fig-3"
   makeFigure "slicing/conv-zero" example_neededBy "fig-4"

linkingFigs :: Effect Unit
linkingFigs = do
   makeFigure "linking/bar-chart"
              (example_needed [{ var: "data", fig: makeEnergyTable }]
                              makeBarChart
                              (select_barChart_data (selectNth 1 (select_y))))
              "table-1"
   makeFigure "linking/bar-chart"
              (example_needed [{ var: "data", fig: makeEnergyTable }]
                              makeBarChart
                              (select_barChart_data (selectNth 0 (select_y))))
              "table-2"

main :: Effect Unit
main = do
   linkingFigs
--   convolutionFigs
