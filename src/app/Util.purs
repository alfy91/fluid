module App.Util where

import Prelude hiding (absurd)
import Control.Apply (lift2)
import Data.Array ((:)) as A
import Data.List (List(..), (:))
import Data.Profunctor.Strong (first)
import Data.Tuple (fst)
import Effect (Effect)
import Web.Event.Event (Event)
import Web.Event.EventTarget (EventListener)
import Bindings (Bindings, Var, (‚Ü¶), find, update)
import DataType (cBarChart, cCons, cNil, cPair)
import Lattice (Slice, ùîπ, expand, neg)
import Primitive (class ToFrom, as, match, match_fwd)
import Util (type (√ó), type (+), (√ó), (!), absurd, error, successful)
import Util.SnocList (SnocList(..), (:-))
import Val (Val(..), holeMatrix, insertMatrix)

type HTMLId = String
type Renderer a = HTMLId -> Int -> a -> EventListener -> Effect Unit
type Selector = Slice (Val ùîπ) -> Val ùîπ
type OnSel = Selector -> Effect Unit -- redraw based on modified output selection
type Handler = Event -> Selector

doNothing :: OnSel
doNothing = const $ pure unit

get_prim :: forall a . ToFrom a => Var -> Slice (Bindings (Val ùîπ)) -> a √ó ùîπ
get_prim x = match_fwd <<< get x

get_intOrNumber :: Var -> Slice (Bindings (Val ùîπ)) -> Number √ó ùîπ
get_intOrNumber x r = first as (get_prim x r :: (Int + Number) √ó ùîπ)

get :: Var -> Slice (Bindings (Val ùîπ)) -> Slice (Val ùîπ)
get x (r' √ó r) = successful $ find x r' `lift2 (√ó)` find x r

-- Assumes fields are all of primitive type.
record :: forall a . (Slice (Bindings (Val ùîπ)) -> a) -> Slice (Val ùîπ) -> a
record toRecord (u √ó v) = toRecord (fst (match_fwd (u √ó v)) √ó fst (match v))

class Reflect a b where
   from :: Partial => Slice a -> b

-- Perform hole expansion as necessary, and discard any constructor-level annotations.
instance reflectArray :: Reflect (Val Boolean) (Array (Val Boolean √ó Val Boolean)) where
   from (vs √ó Constr _ c Nil) | c == cNil =
      case expand vs (Constr false cNil Nil) of
         Constr _ _ Nil -> []
   from (us √ó Constr _ c (v1 : v2 : Nil)) | c == cCons =
      case expand us (Constr false cCons (Hole false : Hole false : Nil)) of
         Constr _ _ (u1 : u2 : Nil) -> (u1 √ó v1) A.: from (u2 √ó v2)

-- Selection helpers.
selectCell :: ùîπ -> Int -> Int -> Int -> Int -> Val ùîπ
selectCell Œ± i j i' j' = Matrix false (insertMatrix i j (Hole Œ±) (holeMatrix i' j'))

selectNth :: Int -> Val ùîπ -> Val ùîπ
selectNth 0 v = Constr false cCons (v : Hole false : Nil)
selectNth n v = Constr false cCons (Hole false : selectNth (n - 1) v : Nil)

select_y :: Val ùîπ
select_y = Record false (Lin :- "x" ‚Ü¶ Hole false :- "y" ‚Ü¶ Hole true)

selectBarChart_data :: Val ùîπ -> Val ùîπ
selectBarChart_data v = Constr false cBarChart (Record false (Lin :- "caption" ‚Ü¶ Hole false :- "data" ‚Ü¶ v) : Nil)

selectPair :: ùîπ -> Val ùîπ -> Val ùîπ -> Val ùîπ
selectPair Œ± v1 v2 = Constr Œ± cPair (v1 : v2 : Nil)

-- Togglers.
toggleCell :: Int -> Int -> Selector
toggleCell i j (u √ó Matrix _ (_ √ó (i' √ó _) √ó (j' √ó _))) = 
   case expand u (Matrix false (holeMatrix i' j')) of
      Matrix Œ± (vss √ó (_ √ó Œ≤) √ó (_ √ó Œ≤')) ->
         Matrix Œ± (insertMatrix i j (neg vss!(i - 1)!(j - 1)) (vss √ó (i' √ó Œ≤) √ó (j' √ó Œ≤')))
      _ -> error absurd
toggleCell _ _ _ = error absurd

toggleNth :: Int -> Selector
toggleNth n (u √ó Constr _ c (v1 : v2 : Nil)) | c == cCons =
   case expand u (Constr false cCons (Hole false : Hole false : Nil)) of
      Constr Œ± _ (u1 : u2 : Nil) ->
         case n of 
            0 -> Constr Œ± cCons (neg u1 : u2 : Nil)
            _ -> Constr Œ± cCons (u1 : toggleNth (n - 1) (u2 √ó v2) : Nil)
      _ -> error absurd
toggleNth _ _ = error absurd

toggleField :: Var -> Selector -> Selector
toggleField f selector (u √ó Record _ xvs) = 
   case expand u (Record false (map (const (Hole false)) <$> xvs)) of
      Record Œ± xus -> Record Œ± (update xus (f ‚Ü¶ selector (get f (xus √ó xvs))))
      _ -> error absurd
toggleField _ _ _ = error absurd
