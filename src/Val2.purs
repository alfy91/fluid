module Val2 where

import Prelude hiding (absurd)
import Control.Apply (lift2)
import Data.List (List)
import Bindings2 (Bindings)
import DataType2 (Ctr)
import Expr2 (Elim, RecDefs)
import Lattice2 (
   class BoundedSlices, class JoinSemilattice, class Slices, ùîπ, (‚à®), bot, botOf, definedJoin, maybeJoin, neg
)
import Util2 (Endo, type (√ó), (√ó), (‚âû), (!), report, unsafeUpdateAt)

type Op a = a √ó ùîπ -> Val ùîπ

data Val a =
   Int a Int |
   Float a Number |
   Str a String |
   Record a (Bindings (Val a)) |             -- always saturated
   Constr a Ctr (List (Val a)) |             -- potentially unsaturated
   Matrix a (MatrixRep a) |
   Primitive PrimOp (List (Val a)) |         -- never saturated
   Closure (Env a) (RecDefs a) a (Elim a)

-- op_fwd will be provided with original arguments, op_bwd with original output and arguments
newtype PrimOp = PrimOp {
   arity :: Int,
   op :: List (Val ùîπ) -> Val ùîπ,
   op_fwd :: List (Val ùîπ) -> Val ùîπ,
   op_bwd :: Val ùîπ -> Endo (List (Val ùîπ))
}

type Env a = Bindings (Val a)

-- Matrices.
type Array2 a = Array (Array a)
type MatrixRep a = Array2 (Val a) √ó (Int √ó a) √ó (Int √ó a)

insertMatrix :: Int -> Int -> Val ùîπ -> Endo (MatrixRep ùîπ)
insertMatrix i j v (vss √ó h √ó w) =
   let vs_i = vss!(i - 1)
       vss' = unsafeUpdateAt (i - 1) (unsafeUpdateAt (j - 1) v vs_i) vss
   in  vss' √ó h √ó w

-- ======================
-- boilerplate
-- ======================
instance functorVal :: Functor Val where
   map f (Int Œ± n)                  = Int (f Œ±) n
   map f (Float Œ± n)                = Float (f Œ±) n
   map f (Str Œ± str)                = Str (f Œ±) str
   map f (Record Œ± xvs)             = Record (f Œ±) (map (map f) <$> xvs)
   map f (Constr Œ± c vs)            = Constr (f Œ±) c (map f <$> vs)
   -- PureScript can't derive this case
   map f (Matrix Œ± (r √ó iŒ± √ó jŒ≤))   = Matrix (f Œ±) ((map (map f) <$> r) √ó (f <$> iŒ±) √ó (f <$> jŒ≤))
   map f (Primitive œÜ vs)           = Primitive œÜ ((map f) <$> vs)
   map f (Closure œÅ h Œ± œÉ)          = Closure (map (map f) <$> œÅ) (map (map f) <$> h) (f Œ±) (f <$> œÉ)

instance joinSemilatticeVal :: JoinSemilattice (Val Boolean) where
   join = definedJoin
   neg = (<$>) neg

instance slicesVal :: Slices (Val Boolean) where
   maybeJoin (Int Œ± n) (Int Œ±' n')                    = Int (Œ± ‚à® Œ±') <$> (n ‚âû n')
   maybeJoin (Float Œ± n) (Float Œ±' n')                = Float (Œ± ‚à® Œ±') <$> (n ‚âû n')
   maybeJoin (Str Œ± str) (Str Œ±' str')                = Str (Œ± ‚à® Œ±') <$> (str ‚âû str')
   maybeJoin (Record Œ± xvs) (Record Œ±' xvs')          = Record (Œ± ‚à® Œ±') <$> maybeJoin xvs xvs'
   maybeJoin (Constr Œ± c vs) (Constr Œ±' c' us)        = Constr (Œ± ‚à® Œ±') <$> (c ‚âû c') <*> maybeJoin vs us
   maybeJoin (Matrix Œ± (vss √ó (i √ó Œ≤) √ó (j √ó Œ≥))) (Matrix Œ±' (vss' √ó (i' √ó Œ≤') √ó (j' √ó Œ≥'))) =
      Matrix (Œ± ‚à® Œ±') <$> (
         maybeJoin vss vss' `lift2 (√ó)`
         ((flip (√ó) (Œ≤ ‚à® Œ≤')) <$> (i ‚âû i')) `lift2 (√ó)`
         ((flip (√ó) (Œ≥ ‚à® Œ≥')) <$> (j ‚âû j'))
      )
   maybeJoin (Closure œÅ Œ¥ Œ± œÉ) (Closure œÅ' Œ¥' Œ±' œÉ')  =
      Closure <$> maybeJoin œÅ œÅ' <*> maybeJoin Œ¥ Œ¥' <@> Œ± ‚à® Œ±' <*> maybeJoin œÉ œÉ'
   maybeJoin (Primitive œÜ vs) (Primitive _ vs')       = Primitive œÜ <$> maybeJoin vs vs' -- TODO: require œÜ == œÜ'
   maybeJoin _ _                                      = report "Incompatible values"

instance boundedSlices :: BoundedSlices (Val Boolean) where
   botOf (Int _ n)                  = Int bot n
   botOf (Float _ n)                = Float bot n
   botOf (Str _ str)                = Str bot str
   botOf (Record _ xvs)             = Record bot (botOf <$> xvs)
   botOf (Constr _ c vs)            = Constr bot c (botOf <$> vs)
   -- PureScript can't derive this case
   botOf (Matrix _ (r √ó (i √ó _) √ó (j √ó _))) = Matrix bot ((((<$>) botOf) <$> r) √ó (i √ó bot) √ó (j √ó bot))
   botOf (Primitive œÜ vs)           = Primitive œÜ (botOf <$> vs)
   botOf (Closure Œ≥ œÅ _ œÉ)          = Closure (botOf <$> Œ≥) (botOf <$> œÅ) bot (botOf œÉ)
