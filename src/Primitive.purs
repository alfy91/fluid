module Primitive where

import Prelude hiding (absurd, apply)
import Data.Either (Either(..))
import Data.Foldable (foldl)
import Data.Int (ceil, floor, toNumber)
import Data.List (List(..), (:))
import Data.Map (Map, fromFoldable)
import Data.Profunctor.Choice ((|||))
import Data.Tuple (fst)
import Debug.Trace (trace)
import Math (log, pow)
import Text.Parsing.Parser.Expr (Assoc(..))
import Bindings (Bindings(..), Var, (:+:), (‚Ü¶))
import DataType (cCons, cFalse, cPair, cTrue)
import Lattice (ùîπ, (‚àß))
import Util (type (√ó), (√ó), type (+), (!), absurd, error, unsafeUpdateAt)
import Val (Env, MatrixRep, PrimOp(..), Val(..))

-- name in user land, precedence 0 from 9 (similar from Haskell 98), associativity
type OpDef = {
   op    :: Var,
   prec  :: Int,
   assoc :: Assoc
}

opDef :: Var -> Int -> Assoc -> Var √ó OpDef
opDef op prec assoc = op √ó { op, prec, assoc }

-- Syntactic information only. No guarantee that any of these will be defined.
opDefs :: Map String OpDef
opDefs = fromFoldable [
   opDef "!"   8 AssocLeft,
   opDef "**"  8 AssocRight,
   opDef "*"   7 AssocLeft,
   opDef "/"   7 AssocLeft,
   opDef "+"   6 AssocLeft,
   opDef "-"   6 AssocLeft,
   opDef ":"   6 AssocRight,
   opDef "++"  5 AssocRight,
   opDef "=="  4 AssocNone,
   opDef "/="  4 AssocNone,
   opDef "<"   4 AssocLeft,
   opDef ">"   4 AssocLeft,
   opDef "<="  4 AssocLeft,
   opDef ">="  4 AssocLeft
]

class ToFrom a where
   to :: a √ó ùîπ -> Val ùîπ
   from :: Val ùîπ -> a √ó ùîπ          -- only defined for non-holes
   expand :: a -> Val ùîπ            -- use just enough information from supplied value to construct an argument to 'from'

from_fwd :: forall a . ToFrom a => Val ùîπ √ó a -> a √ó ùîπ
from_fwd (Hole √ó v') = from (expand v')
from_fwd (v √ó _)     = from v

-- REVISIT: This instance is a bit weird. Former is only needed for debugLog, latter for debugLog and matrix lookup.
instance toFromVal :: ToFrom (Val Boolean) where
   to = fst
   from = (_ √ó false) -- if return value is already a Val it's not being constructed
   expand = identity

instance toFromInt :: ToFrom Int where
   from (Int Œ± n)   = n √ó Œ±
   from _           = error "Int expected"

   to (n √ó Œ±) = Int Œ± n
   expand = Int false

instance toFromNumber :: ToFrom Number where
   from (Float Œ± n) = n √ó Œ±
   from _           = error "Float expected"

   to (n √ó Œ±) = Float Œ± n
   expand = Float false

instance toFromString :: ToFrom String where
   from (Str Œ± str) = str √ó Œ±
   from _           = error "Str expected"

   to (str √ó Œ±) = Str Œ± str
   expand = Str false

instance toFromIntOrNumber :: ToFrom (Int + Number) where
   to (Left n √ó Œ±)    = Int Œ± n
   to (Right n √ó Œ±)   = Float Œ± n

   from (Int Œ± n)    = Left n √ó Œ±
   from (Float Œ± n)  = Right n √ó Œ±
   from _            = error "Int or Float expected"

   expand (Left n)  = Int false n
   expand (Right n) = Float false n

instance toFromIntOrNumberOrString :: ToFrom (Either (Either Int Number) String) where
   to _ = error "todo"

   from (Int Œ± n)   = Left (Left n) √ó Œ±
   from (Float Œ± n) = Left (Right n) √ó Œ±
   from (Str Œ± n)   = Right n √ó Œ±
   from _           = error "Int, Float or Str expected"

   expand (Left (Left n))    = Int false n
   expand (Left (Right n))   = Float false n
   expand (Right str)        = Str false str

instance toFromIntAndInt :: ToFrom (Int √ó Boolean √ó (Int √ó Boolean)) where
   from (Constr Œ± c (v : v' : Nil)) | c == cPair  = from v √ó from v' √ó Œ±
   from _                                         = error "Pair expected"

   to _ = error "todo"
   expand _ = Constr false cPair (Hole : Hole : Nil)

instance toFromMatrixRep :: ToFrom (Array (Array (Val Boolean)) √ó (Int √ó Boolean) √ó (Int √ó Boolean)) where
   from (Matrix Œ± r) = r √ó Œ±
   from _            = error "Matrix expected"

   to (r √ó Œ±) = Matrix Œ± r
   expand (vss √ó (i √ó _) √ó (j √ó _)) = Matrix false (((<$>) (const Hole) <$> vss) √ó (i √ó false) √ó (j √ó false))

instance toFromPair :: ToFrom (Val Boolean √ó Val Boolean) where
   from (Constr Œ± c (v : v' : Nil)) | c == cPair   = v √ó v' √ó Œ±
   from _                                          = error "Pair expected"

   to (v √ó v' √ó Œ±) = Constr Œ± cPair (v : v' : Nil)
   expand _ = Constr false cPair (Hole : Hole : Nil)

instance toFromBoolean :: ToFrom Boolean where
   from (Constr Œ± c Nil )
      | c == cTrue   = true √ó Œ±
      | c == cFalse  = false √ó Œ±
   from _ = error absurd

   to (true √ó Œ±)   = Constr Œ± cTrue Nil
   to (false √ó Œ±)  = Constr Œ± cFalse Nil

   expand = \_ -> error "todo"

unary' :: forall a b . ToFrom a => ToFrom b => (a √ó ùîπ -> b √ó ùîπ) -> List (Val ùîπ) {-[a]-} -> Val ùîπ {-b-}
unary' op (v : Nil) = to (op (from v))
unary' _ _          = error absurd

unary_fwd :: forall a b . ToFrom a => ToFrom b => (a √ó ùîπ -> b √ó ùîπ) -> List (Val ùîπ √ó Val ùîπ) {-[(a, a)]-} -> Val ùîπ {-b-}
unary_fwd op (v √ó u : Nil) = to (op (from_fwd (v √ó fst (from u))))
unary_fwd _ _              = error absurd

unary_bwd :: forall a b . ToFrom a => ToFrom b => (b √ó ùîπ -> a -> a √ó ùîπ) ->
             Val ùîπ {-b-} -> List (Val ùîπ) {-[a]-} -> List (Val ùîπ) {-[a]-}
unary_bwd op_bwd v (v1 : Nil) = to (op_bwd (from v) (fst (from v1))) : Nil
unary_bwd _ _ _               = error absurd

binary' :: forall a b c . ToFrom a => ToFrom b => ToFrom c =>
           (a √ó ùîπ -> b √ó ùîπ -> c √ó ùîπ) -> List (Val ùîπ) {-[a, b]-} -> Val ùîπ {-c-}
binary' op (v : vs)   = unary' (op (from v)) vs
binary' _ _           = error absurd

binary_fwd :: forall a b c . ToFrom a => ToFrom b => ToFrom c =>
              (a √ó ùîπ -> b √ó ùîπ -> c √ó ùîπ) -> List (Val ùîπ √ó Val ùîπ) {-[(a, a), (b, b)]-} -> Val ùîπ {-c-}
binary_fwd op (v √ó u : vus)   = unary_fwd (op (from_fwd (v √ó fst (from u)))) vus
binary_fwd _ _                = error absurd

unary :: forall a b . ToFrom a => ToFrom b => UnarySpec a b -> Val ùîπ
unary (fwd √ó bwd) = flip Primitive Nil $ PrimOp {
   arity: 1,
   op: unary' fwd,
   op_fwd: unary_fwd fwd,
   op_bwd: unary_bwd bwd
}

binary :: forall a b c . ToFrom a => ToFrom b => ToFrom c => BinarySpec a b c -> Val ùîπ
binary (fwd √ó bwd) = flip Primitive Nil $ PrimOp {
   arity: 2,
   op: binary' fwd,
   op_fwd: binary_fwd fwd,
   op_bwd: \_ vs -> vs
}

type UnarySpec a b = (a √ó ùîπ -> b √ó ùîπ) √ó (b √ó ùîπ -> a -> a √ó ùîπ)
type BinarySpec a b c = (a √ó ùîπ -> b √ó ùîπ -> c √ó ùîπ) √ó (ùîπ -> a √ó b -> ùîπ √ó ùîπ)

depends :: forall a b . (a -> b) -> UnarySpec a b
depends op = fwd √ó bwd
   where
   fwd (x √ó Œ±)    = op x √ó Œ±
   bwd (_ √ó Œ±) x  = x √ó Œ±

dependsBoth :: forall a b c . (a -> b -> c) -> BinarySpec a b c
dependsBoth op = fwd √ó bwd
   where
   fwd (x √ó Œ±) (y √ó Œ≤) = x `op` y √ó (Œ± ‚àß Œ≤)
   bwd Œ± _ = Œ± √ó Œ±

dependsNeither :: forall a b c . (a -> b -> c) -> BinarySpec a b c
dependsNeither op = fwd √ó bwd
   where
   fwd (x √ó _) (y √ó _) = x `op` y √ó true
   bwd _ _ = false √ó false

class IsZero a where
   isZero :: a -> Boolean

instance isZeroInt :: IsZero Int where
   isZero = ((==) 0)

instance isZeroNumber :: IsZero Number where
   isZero = ((==) 0.0)

instance isZeroEither :: (IsZero a, IsZero b) => IsZero (a + b) where
   isZero = isZero ||| isZero

-- If both are zero, we depend only on the first.
dependsNonZero :: forall a b . IsZero a => (a -> a -> b) -> BinarySpec a a b
dependsNonZero op = fwd √ó bwd
   where
   fwd :: a √ó ùîπ -> a √ó ùîπ -> b √ó ùîπ
   fwd (x √ó Œ±) (y √ó Œ≤)
      | isZero x  = x `op` y √ó Œ±
      | isZero y  = x `op` y √ó Œ≤
      | otherwise = x `op` y √ó (Œ± ‚àß Œ≤)
   bwd :: ùîπ -> a √ó a -> ùîπ √ó ùîπ
   bwd Œ± (x √ó y)
      | isZero x  = Œ± √ó false
      | isZero y  = false √ó Œ±
      | otherwise = Œ± √ó Œ±

primitives :: Env ùîπ
primitives = foldl (:+:) Empty [
   -- some signatures are specified for clarity or from drive instance resolution
   -- PureScript's / and pow aren't defined at Int -> Int -> Number, so roll our own
   ":"         ‚Ü¶ Constr false cCons Nil,
   "+"         ‚Ü¶ binary (dependsBoth ((+) `union2` (+))),
   "-"         ‚Ü¶ binary (dependsBoth ((-) `union2` (-))),
   "*"         ‚Ü¶ binary (dependsNonZero ((*) `union2` (*))),
   "**"        ‚Ü¶ binary (dependsNonZero ((\x y -> toNumber x `pow` toNumber y) `union2'` pow)),
   "/"         ‚Ü¶ binary (dependsNonZero ((\x y -> toNumber x / toNumber y)  `union2'` (/))),
   "=="        ‚Ü¶ binary (dependsBoth ((==) `union2'` (==) `unionDisj` (==))),
   "/="        ‚Ü¶ binary (dependsBoth ((/=) `union2'` (/=) `unionDisj` (==))),
   "<"         ‚Ü¶ binary (dependsBoth ((<)  `union2'` (<)  `unionDisj` (==))),
   ">"         ‚Ü¶ binary (dependsBoth ((>)  `union2'` (>)  `unionDisj` (==))),
   "<="        ‚Ü¶ binary (dependsBoth ((<=) `union2'` (<=) `unionDisj` (==))),
   ">="        ‚Ü¶ binary (dependsBoth ((>=) `union2'` (>=) `unionDisj` (==))),
   "++"        ‚Ü¶ binary (dependsBoth ((<>) :: String -> String -> String)),
   "!"         ‚Ü¶ binary (dependsNeither matrixLookup),
   "ceiling"   ‚Ü¶ unary (depends ceil),
   "debugLog"  ‚Ü¶ unary (depends debugLog),
   "dims"      ‚Ü¶ unary (depends dims),
   "div"       ‚Ü¶ binary (dependsNonZero (div :: Int -> Int -> Int)),
   "error"     ‚Ü¶ unary (depends (error :: String -> Val ùîπ)),
   "floor"     ‚Ü¶ unary (depends floor),
   "log"       ‚Ü¶ unary (depends ((toNumber >>> log) `union` log)),
   "numToStr"  ‚Ü¶ unary (depends (show `union` show))
]

debugLog :: Val ùîπ -> Val ùîπ
debugLog x = trace x (const x)

dims :: MatrixRep ùîπ -> Val ùîπ √ó Val ùîπ
dims (_ √ó (i √ó Œ±) √ó (j √ó Œ≤)) = Int Œ± i √ó Int Œ≤ j

dims_bwd :: Val ùîπ √ó Val ùîπ -> MatrixRep ùîπ -> MatrixRep ùîπ
dims_bwd (Int Œ± i' √ó Int Œ≤ j') (vss √ó (i √ó _) √ó (j √ó _)) | i == i' && j == j' = vss √ó (i √ó Œ±) √ó (j √ó Œ≤)
dims_bwd _ _                                                                  = error absurd

matrixLookup :: MatrixRep ùîπ -> (Int √ó ùîπ) √ó (Int √ó ùîπ) -> Val ùîπ
matrixLookup (vss √ó _ √ó _) ((i √ó _) √ó (j √ó _)) = vss!(i - 1)!(j - 1)

matrixLookup_bwd :: Val ùîπ -> MatrixRep ùîπ √ó (Int √ó ùîπ) √ó (Int √ó ùîπ) -> MatrixRep ùîπ √ó (Int √ó ùîπ) √ó (Int √ó ùîπ)
matrixLookup_bwd v ((vss √ó (i' √ó _) √ó (j' √ó _)) √ó (i √ó _) √ó (j √ó _)) =
   vss'' √ó (i' √ó false) √ó (j' √ó false) √ó (i √ó false) √ó (j √ó false)
   where vss'  = (((<$>) (const Hole)) <$> vss)
         vs_i  = vss'!(i - 1)
         vss'' = unsafeUpdateAt (i - 1) (unsafeUpdateAt (j - 1) (vs_i!(j - 1)) vs_i) vss'

-- Could improve this a bit with some type class shenanigans, but not straightforward.
union :: forall a . (Int -> a) -> (Number -> a) -> Int + Number -> a
union f _ (Left x)   = f x
union _ f (Right x)  = f x

union2 :: (Int -> Int -> Int) -> (Number -> Number -> Number) -> Int + Number -> Int + Number -> Int + Number
union2 f _ (Left x) (Left y)     = Left $ f x y
union2 _ f (Left x) (Right y)    = Right $ f (toNumber x) y
union2 _ f (Right x) (Right y)   = Right $ f x y
union2 _ f (Right x) (Left y)    = Right $ f x (toNumber y)

union2' :: forall a . (Int -> Int -> a) -> (Number -> Number -> a) -> Int + Number -> Int + Number -> a
union2' f _ (Left x) (Left y)    = f x y
union2' _ f (Left x) (Right y)   = f (toNumber x) y
union2' _ f (Right x) (Right y)  = f x y
union2' _ f (Right x) (Left y)   = f x (toNumber y)

unionDisj :: forall a b . (b -> b -> a) -> (String -> String -> a) -> b + String -> b + String -> a
unionDisj f _ (Left x) (Left y)   = f x y
unionDisj _ _ (Left _) (Right _)  = error "Non-uniform argument types"
unionDisj _ f (Right x) (Right y) = f x y
unionDisj _ _ (Right _) (Left _)  = error "Non-uniform argument types"
