module DesugarFwd where

import Prelude hiding (absurd)
import Control.Apply (lift2)
import Data.Either (Either(..))
import Data.Foldable (foldM)
import Data.Function (on)
import Data.List (List(..), (:), (\\), length)
import Data.List (head) as L
import Data.List.NonEmpty (NonEmptyList(..), groupBy, head, reverse, toList)
import Data.Map (Map, fromFoldable, insert, lookup, singleton, toUnfoldable, update)
import Data.Maybe (Maybe(..))
import Data.NonEmpty ((:|))
import Data.Traversable (traverse)
import Data.Tuple (fst, snd)
import Bindings (Binding, Bindings, (‚Ü¶), fromList)
import DataType (Ctr, DataType'(..), checkArity, checkDataType, ctrToDataType, cCons, cNil, cTrue, cFalse)
import Expr (Cont(..), Elim(..))
import Expr (Expr(..), Module(..), VarDef(..)) as E
import Lattice (ùîπ)
import SExpr (
   Clause, Expr(..), ListPatternRest(..), ListRest(..), Module(..), Pattern(..), VarDefs, VarDef(..), RecDefs, Qualifier(..)
)
import Util (MayFail, type (√ó), (√ó), (‚âû), absurd, fromJust, mustLookup, report)


enil :: ùîπ -> E.Expr ùîπ
enil Œ± = E.Constr Œ± cNil Nil

econs :: ùîπ -> E.Expr ùîπ -> E.Expr ùîπ -> E.Expr ùîπ
econs Œ± e e' = E.Constr Œ± cCons (e : e' : Nil)

class DesugarFwd a b | a -> b where
   desugarFwd :: a -> MayFail b

-- Surface language supports "blocks" of variable declarations; core does not.
-- No need to pass "Œ± = true" because desugarFwd is called on VarDef, not VarDefs?
instance desugarFwdModule :: DesugarFwd (Module Boolean) (E.Module Boolean) where
   desugarFwd (Module ds) = E.Module <$> traverse desugarFwd (join $ (ds <#> desugarDefs))
      where
      desugarDefs :: Either (VarDefs Boolean) (RecDefs Boolean)
                  -> List (Either (VarDef Boolean) (RecDefs Boolean))
      desugarDefs (Left ds')  = (toList ds' <#> Left)
      desugarDefs (Right Œ¥)   = pure $ Right Œ¥

{- p, e ‚Üó œÉ      specialisation of    p, Œ∫ ‚Üó œÉ -}
-- data E.VarDef a = E.VarDef (Elim a) (E.Expr a) -- where elim has codomain unit
instance desugarFwdVarDef :: DesugarFwd (VarDef Boolean) (E.VarDef Boolean) where
   desugarFwd (VarDef œÄ s) = E.VarDef <$> desugarFwd (œÄ √ó (None :: Cont ùîπ)) <*> desugarFwd s

{-        ‚Üí                  -}
{- (Œ±, (p , s), s_body) ‚Üó e  -}
-- | The first boolean represents the Œ± of the outer expression which contains the var defs
instance desugarFwdVarDefs :: DesugarFwd (NonEmptyList (VarDef Boolean) √ó Expr Boolean)
                                         (E.Expr Boolean) where
   desugarFwd (NonEmptyList (d :| Nil) √ó s) =
      E.Let <$> desugarFwd d <*> desugarFwd s
   desugarFwd (NonEmptyList (d :| d' : ds) √ó s) =
      E.Let <$> desugarFwd d <*> desugarFwd (NonEmptyList (d' :| ds) √ó s)

{-       ‚Üí                      ‚Üí                 -}
{- let f c ‚Üó [f ‚Ü¶ œÉ]       (f, (p, s))  ‚Üó [f ‚Ü¶ œÉ] -}
instance desugarFwdRecDefs :: DesugarFwd (NonEmptyList (String √ó (NonEmptyList Pattern √ó Expr Boolean)))
                                         (Bindings Elim Boolean) where
   desugarFwd fœÄs = fromList <$> toList <$> reverse <$> traverse toRecDef fœÄss
      where
      fœÄss = groupBy (eq `on` fst) fœÄs :: NonEmptyList (NonEmptyList (Clause ùîπ))

      toRecDef :: NonEmptyList (Clause ùîπ) -> MayFail (Binding Elim ùîπ)
      toRecDef fœÄs' = ((‚Ü¶) (fst $ head fœÄs')) <$> desugarFwd (snd <$> fœÄs')

{- s ‚Üó e -}
instance desugarFwdExpr :: DesugarFwd (Expr Boolean) (E.Expr Boolean) where
   desugarFwd (Var x)                  = pure $ E.Var x
   desugarFwd (Op op)                  = pure $ E.Op op
   desugarFwd (Int Œ± n)                = pure $ E.Int Œ± n
   desugarFwd (Float Œ± n)              = pure $ E.Float Œ± n
   desugarFwd (Str Œ± s)                = pure $ E.Str Œ± s
   desugarFwd (Constr Œ± c ss)          = E.Constr Œ± c <$> traverse desugarFwd ss
   desugarFwd (Matrix Œ± s (x √ó y) s')  = E.Matrix Œ± <$> desugarFwd s <@> x √ó y <*> desugarFwd s'
   desugarFwd (Lambda bs)              = E.Lambda <$> desugarFwd bs
   desugarFwd (App s1 s2)              = E.App <$> desugarFwd s1 <*> desugarFwd s2
   desugarFwd (BinaryApp s1 op s2)     = E.BinaryApp <$> desugarFwd s1 <@> op <*> desugarFwd s2
   desugarFwd (MatchAs s bs)           = E.App <$> (E.Lambda <$> desugarFwd bs) <*> desugarFwd s
   desugarFwd (IfElse s1 s2 s3) = do
      e2 <- desugarFwd s2
      e3 <- desugarFwd s3
      let œÉ = ElimConstr (fromFoldable [cTrue √ó Body e2, cFalse √ó Body e3])
      E.App (E.Lambda œÉ) <$> desugarFwd s1
   desugarFwd (ListEmpty Œ±)            = pure $ enil Œ±
   desugarFwd (ListNonEmpty Œ± s l)     = econs Œ± <$> desugarFwd s <*> desugarFwd l
   desugarFwd (ListEnum s1 s2)         = E.App <$> ((E.App (E.Var "enumFromTo")) <$> desugarFwd s1) <*> desugarFwd s2
   -- | List-comp-done
   desugarFwd (ListComp Œ± s_body (NonEmptyList (Guard _ (Constr Œ±2 c Nil) :| Nil))) | c == cTrue = do
      econs Œ±2 <$> desugarFwd s_body <@> enil Œ±2
   -- | List-comp-last
   desugarFwd (ListComp Œ± s_body (NonEmptyList (q :| Nil))) =
      desugarFwd $ ListComp Œ± s_body $ NonEmptyList $ q :| (Guard Œ± (Constr Œ± cTrue Nil)) : Nil
   -- | List-comp-guard
   desugarFwd (ListComp Œ± s_body (NonEmptyList (Guard Œ±1 s :| q : qs))) = do
      e <- desugarFwd $ ListComp Œ± s_body $ NonEmptyList $ q :| qs
      let œÉ = ElimConstr (fromFoldable [cTrue √ó Body e, cFalse √ó Body (enil Œ±1)])
      E.App (E.Lambda œÉ) <$> desugarFwd s
   -- | List-comp-decl
   desugarFwd (ListComp Œ± s_body (NonEmptyList (Declaration Œ±1 (VarDef œÄ s) :| q : qs))) = do
      e <- desugarFwd $ ListComp Œ± s_body (NonEmptyList $ q :| qs)
      œÉ <- desugarFwd $ œÄ √ó (Body e :: Cont ùîπ)
      E.App (E.Lambda œÉ) <$> desugarFwd s
   -- | List-comp-gen
   desugarFwd (ListComp Œ± s_body (NonEmptyList (Generator Œ±1 p slist :| q : qs))) = do
      e <- desugarFwd $ ListComp Œ± s_body $ NonEmptyList $ q :| qs
      œÉ <- desugarFwd $ p √ó Body e
      E.App (E.App (E.Var "concatMap") (E.Lambda $ totalise œÉ (enil Œ±1))) <$> desugarFwd slist
   desugarFwd (Let ds s)            = desugarFwd $ ds √ó s
   desugarFwd (LetRec fœÄs s)        = E.LetRec <$> desugarFwd fœÄs <*> desugarFwd s

{- l ‚Üó e -}
instance desugarFwdListRest :: DesugarFwd (ListRest Boolean) (E.Expr Boolean) where
   desugarFwd (End Œ±)       = pure (enil Œ±)
   desugarFwd (Next Œ± s l)  = lift2 (econs Œ±) (desugarFwd s) (desugarFwd l)

{- ‚Üí        -}
{- p, Œ∫ ‚Üó œÉ -}
instance desugarFwdPatternsCont :: DesugarFwd (NonEmptyList Pattern √ó Expr Boolean) (Elim Boolean) where
   desugarFwd (NonEmptyList (œÄ :| Nil) √ó Œ∫)     = desugarFwd $ œÄ √ó Œ∫
   desugarFwd (NonEmptyList (œÄ :| œÄ' : œÄs) √ó Œ∫) = do
      Œ∫' <- Body <$> E.Lambda <$> desugarFwd (NonEmptyList (œÄ' :| œÄs) √ó Œ∫)
      desugarFwd $ œÄ √ó Œ∫'

{- p, Œ∫ ‚Üó œÉ -}
-- Cont arguments here act as an accumulator.
instance desugarFwdPatternCont :: DesugarFwd (Pattern √ó Cont Boolean) (Elim Boolean) where
   desugarFwd (PVar x √ó Œ∫)             = pure $ ElimVar x Œ∫
   desugarFwd (PConstr c œÄs √ó Œ∫)       = checkArity c (length œÄs) *> (ElimConstr <$> singleton c <$> toCont œÄs)
      where
      toCont :: List Pattern -> MayFail (Cont ùîπ)
      toCont Nil        = pure Œ∫
      toCont (œÄ : œÄs')  = Arg <$> do
         Œ∫' <- toCont œÄs'
         desugarFwd $ œÄ √ó Œ∫'
   desugarFwd (PListEmpty √ó Œ∫)         = pure $ ElimConstr $ singleton cNil Œ∫
   desugarFwd (PListNonEmpty œÄ o √ó Œ∫)  = do
      Œ∫' <- Arg <$> desugarFwd (o √ó Œ∫)
      ElimConstr <$> singleton cCons <$> Arg <$> desugarFwd (œÄ √ó Œ∫')

{- o, Œ∫ ‚Üó œÉ -}
instance desugarFwdListPatternRestCont :: DesugarFwd (ListPatternRest √ó Cont Boolean) (Elim Boolean) where
   desugarFwd (PEnd √ó Œ∫)      = pure $ ElimConstr $ singleton cNil Œ∫
   desugarFwd (PNext œÄ o √ó Œ∫) = do
      Œ∫' <- Arg <$> desugarFwd (o √ó Œ∫)
      ElimConstr <$> singleton cCons <$> Arg <$> desugarFwd (œÄ √ó Œ∫')

{-                ‚Üí        -}
{- c ‚Üó œÉ   i.e.   p, s ‚Üó œÉ -}
instance desugarFwdBranchUncurried :: DesugarFwd (Pattern √ó Expr Boolean) (Elim Boolean) where
   desugarFwd (œÄ √ó s) = do
      Œ∫ <- Body <$> desugarFwd s
      desugarFwd $ œÄ √ó Œ∫

-- To consolidate these without overlapping instances, probably need RecDefs to be a data type.
{- ‚Üí     -}
{- c ‚Üó œÉ -}
instance desugarFwdBranches :: DesugarFwd (NonEmptyList (NonEmptyList Pattern √ó Expr Boolean)) (Elim Boolean) where
   desugarFwd bs = do
      NonEmptyList (œÉ :| œÉs) <- traverse desugarFwd bs
      foldM maybeJoin œÉ œÉs

instance desugarFwdBranchesUncurried :: DesugarFwd (NonEmptyList (Pattern √ó Expr Boolean)) (Elim Boolean) where
   desugarFwd bs = do
      NonEmptyList (œÉ :| œÉs) <- traverse desugarFwd bs
      foldM maybeJoin œÉ œÉs

instance desugarFwdEither :: (DesugarFwd a b, DesugarFwd c d) => DesugarFwd (Either a c) (Either b d) where
   desugarFwd (Left x) = Left <$> desugarFwd x
   desugarFwd (Right x) = Right <$> desugarFwd x

{- totalise Œ∫, e ‚Üó Œ∫' -}
totalise :: Elim ùîπ -> E.Expr ùîπ -> Elim ùîπ
totalise (ElimConstr m) e =
   let c √ó Œ∫            = fromJust absurd $ L.head $ toUnfoldable m
       bs               = toUnfoldable m
       DataType _ sigs  = mustLookup c ctrToDataType
       bs'              = (_ √ó Body e) <$> ((fst <$> toUnfoldable sigs) \\ (fst <$> bs))
       bs''             = bs <#> \(c √ó Œ∫) -> case mustLookup c m of
                           Arg œÉ   -> c √ó Arg (totalise œÉ e)
                           Body e' -> c √ó Body e'
                           None    -> c √ó Body e -- should the None cases should be undefined instead?
     in   ElimConstr (fromFoldable (bs'' <> bs'))
totalise (ElimVar e Œ∫) e' = case Œ∫ of
   Arg œÉ  -> ElimVar e (Arg (totalise œÉ e'))
   Body _ -> ElimVar e Œ∫
   None   -> ElimVar e (Body e')

class Joinable a where
   maybeJoin :: a -> a -> MayFail a

instance joinableElim :: Joinable (Elim Boolean) where
   maybeJoin (ElimVar x Œ∫) (ElimVar y Œ∫')       = ElimVar <$> x ‚âû y <*> maybeJoin Œ∫ Œ∫'
   maybeJoin (ElimConstr Œ∫s) (ElimConstr Œ∫s')   = ElimConstr <$> maybeJoin Œ∫s Œ∫s'
   maybeJoin _ _                                = report "Can't join variable and constructor patterns"

instance joinableCont :: Joinable (Cont Boolean) where
   maybeJoin None None                                = pure None
   maybeJoin (Arg œÉ) (Arg œÉ')                         = Arg <$> maybeJoin œÉ œÉ'
   maybeJoin (Body (E.Lambda œÉ)) (Body (E.Lambda œÉ')) = Body <$> (E.Lambda <$> maybeJoin œÉ œÉ')
   maybeJoin _ _                                      = report "Incompatible continuations"

instance joinableMap :: Joinable (Map Ctr (Cont Boolean)) where
   maybeJoin Œ∫s1 Œ∫s2 = do
      foldM maybeUpdate Œ∫s1 (toUnfoldable Œ∫s2 :: List (Ctr √ó Cont ùîπ))
      where
      maybeUpdate :: Map Ctr (Cont ùîπ) -> Ctr √ó Cont ùîπ -> MayFail (Map Ctr (Cont ùîπ))
      maybeUpdate Œ∫s (c √ó Œ∫) =
         case lookup c Œ∫s of
            Nothing -> do
               checkDataType "Non-uniform patterns: " c Œ∫s
               pure $ insert c Œ∫ Œ∫s
            Just Œ∫' ->
               update <$> (const <$> pure <$> maybeJoin Œ∫' Œ∫) <@> c <@> Œ∫s
