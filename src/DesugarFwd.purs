module DesugarFwd where

import Prelude hiding (absurd, otherwise)
import Data.Either (Either(..))
import Data.Foldable (foldM)
import Data.Function (applyN, on)
import Data.List (List(..), (:), (\\), length)
import Data.List (head, singleton) as L
import Data.List.NonEmpty (NonEmptyList(..), groupBy, head, toList)
import Data.Map (Map, fromFoldable, singleton, size, toUnfoldable)
import Data.NonEmpty ((:|))
import Data.Traversable (traverse)
import Data.Tuple (fst, snd, uncurry)
import Bindings (Binding, (‚Ü¶), fromList, varAnon)
import DataType (Ctr, arity, checkArity, ctrs, cCons, cFalse, cNil, cTrue, dataTypeFor)
import Expr (Cont(..), Elim(..), asElim)
import Expr (Expr(..), Module(..), RecDefs, VarDef(..)) as E
import Lattice (ùîπ, maybeJoin)
import SExpr (
   Branch, Clause, Expr(..), ListRestPattern(..), ListRest(..), Module(..), Pattern(..), VarDefs, VarDef(..), RecDefs, Qualifier(..)
)
import Util (MayFail, type (+), type (√ó), (√ó), absurd, assert, error, fromJust, successful)

desugarFwd :: Expr ùîπ -> MayFail (E.Expr ùîπ)
desugarFwd = exprFwd

desugarModuleFwd :: Module ùîπ -> MayFail (E.Module ùîπ)
desugarModuleFwd = moduleFwd

enil :: ùîπ -> E.Expr ùîπ
enil Œ± = E.Constr Œ± cNil Nil

econs :: ùîπ -> E.Expr ùîπ -> E.Expr ùîπ -> E.Expr ùîπ
econs Œ± e e' = E.Constr Œ± cCons (e : e' : Nil)

elimBool :: Cont ùîπ -> Cont ùîπ -> Elim ùîπ
elimBool Œ∫ Œ∫' = ElimConstr (fromFoldable [cTrue √ó Œ∫, cFalse √ó Œ∫'])

-- Surface language supports "blocks" of variable declarations; core does not.
moduleFwd :: Module ùîπ -> MayFail (E.Module ùîπ)
moduleFwd (Module ds) = E.Module <$> traverse varDefOrRecDefsFwd (join (desugarDefs <$> ds))
   where
   varDefOrRecDefsFwd :: VarDef ùîπ + RecDefs ùîπ -> MayFail (E.VarDef ùîπ + E.RecDefs ùîπ)
   varDefOrRecDefsFwd (Left d)      = Left <$> varDefFwd d
   varDefOrRecDefsFwd (Right xcs)   = Right <$> recDefsFwd xcs

   desugarDefs :: VarDefs ùîπ + RecDefs ùîπ -> List (VarDef ùîπ + RecDefs ùîπ)
   desugarDefs (Left ds')  = Left <$> toList ds'
   desugarDefs (Right Œ¥)   = pure (Right Œ¥)

varDefFwd :: VarDef ùîπ -> MayFail (E.VarDef ùîπ)
varDefFwd (VarDef œÄ s) = E.VarDef <$> patternFwd œÄ (ContHole :: Cont ùîπ) <*> exprFwd s

varDefsFwd :: VarDefs ùîπ √ó Expr ùîπ -> MayFail (E.Expr ùîπ)
varDefsFwd (NonEmptyList (d :| Nil) √ó s) =
   E.Let <$> varDefFwd d <*> exprFwd s
varDefsFwd (NonEmptyList (d :| d' : ds) √ó s) =
   E.Let <$> varDefFwd d <*> varDefsFwd (NonEmptyList (d' :| ds) √ó s)

-- In the formalism, "group by name" is part of the syntax.
-- cs desugar_fwd œÉ
recDefsFwd :: RecDefs ùîπ -> MayFail (E.RecDefs ùîπ)
recDefsFwd xcs = fromList <$> toList <$> traverse recDefFwd xcss
   where
   xcss = groupBy (eq `on` fst) xcs :: NonEmptyList (NonEmptyList (Clause ùîπ))

recDefFwd :: NonEmptyList (Clause ùîπ) -> MayFail (Binding Elim ùîπ)
recDefFwd xcs = (fst (head xcs) ‚Ü¶ _) <$> branchesFwd_curried (snd <$> xcs)

-- s desugar_fwd e
exprFwd :: Expr ùîπ -> MayFail (E.Expr ùîπ)
exprFwd (Var x)                  = pure (E.Var x)
exprFwd (Op op)                  = pure (E.Op op)
exprFwd (Int Œ± n)                = pure (E.Int Œ± n)
exprFwd (Float Œ± n)              = pure (E.Float Œ± n)
exprFwd (Str Œ± s)                = pure (E.Str Œ± s)
exprFwd (Constr Œ± c ss)          = E.Constr Œ± c <$> traverse exprFwd ss
exprFwd (Matrix Œ± s (x √ó y) s')  = E.Matrix Œ± <$> exprFwd s <@> x √ó y <*> exprFwd s'
exprFwd (Lambda bs)              = E.Lambda <$> branchesFwd_curried bs
exprFwd (App s1 s2)              = E.App <$> exprFwd s1 <*> exprFwd s2
exprFwd (BinaryApp s1 op s2)     = E.App <$> (E.App (E.Op op) <$> exprFwd s1) <*> exprFwd s2
exprFwd (MatchAs s bs)           = E.App <$> (E.Lambda <$> branchesFwd_uncurried bs) <*> exprFwd s
exprFwd (IfElse s1 s2 s3) = do
   e2 <- exprFwd s2
   e3 <- exprFwd s3
   E.App (E.Lambda (elimBool (ContExpr e2) (ContExpr e3))) <$> exprFwd s1
exprFwd (ListEmpty Œ±)            = pure (enil Œ±)
exprFwd (ListNonEmpty Œ± s l)     = econs Œ± <$> exprFwd s <*> listRestFwd l
exprFwd (ListEnum s1 s2)         = E.App <$> ((E.App (E.Var "enumFromTo")) <$> exprFwd s1) <*> exprFwd s2
-- | List-comp-done
exprFwd (ListComp Œ± s_body (NonEmptyList (Guard (Constr Œ±2 c Nil) :| Nil))) | c == cTrue = do
   econs Œ±2 <$> exprFwd s_body <@> enil Œ±2
-- | List-comp-last
exprFwd (ListComp Œ± s_body (NonEmptyList (q :| Nil))) =
   exprFwd (ListComp Œ± s_body (NonEmptyList (q :| Guard (Constr Œ± cTrue Nil) : Nil)))
-- | List-comp-guard
exprFwd (ListComp Œ± s_body (NonEmptyList (Guard s :| q : qs))) = do
   e <- exprFwd (ListComp Œ± s_body (NonEmptyList (q :| qs)))
   E.App (E.Lambda (elimBool (ContExpr e) (ContExpr (enil Œ±)))) <$> exprFwd s
-- | List-comp-decl
exprFwd (ListComp Œ± s_body (NonEmptyList (Declaration (VarDef œÄ s) :| q : qs))) = do
   e <- exprFwd (ListComp Œ± s_body (NonEmptyList (q :| qs)))
   œÉ <- patternFwd œÄ (ContExpr e :: Cont ùîπ)
   E.App (E.Lambda œÉ) <$> exprFwd s
-- | List-comp-gen
exprFwd (ListComp Œ± s_body (NonEmptyList (Generator p s :| q : qs))) = do
   e <- exprFwd (ListComp Œ± s_body (NonEmptyList (q :| qs)))
   œÉ <- patternFwd p (ContExpr e)
   E.App (E.App (E.Var "concatMap") (E.Lambda (asElim (totaliseFwd (ContElim œÉ) Œ±)))) <$> exprFwd s
exprFwd (Let ds s)               = varDefsFwd (ds √ó s)
exprFwd (LetRec xcs s)           = E.LetRec <$> recDefsFwd xcs <*> exprFwd s

-- l desugar_fwd e
listRestFwd :: ListRest ùîπ -> MayFail (E.Expr ùîπ)
listRestFwd (End Œ±)       = pure (enil Œ±)
listRestFwd (Next Œ± s l)  = econs Œ± <$> exprFwd s <*> listRestFwd l

-- ps, e desugar_fwd œÉ
patternsFwd :: NonEmptyList Pattern √ó Expr ùîπ -> MayFail (Elim ùîπ)
patternsFwd (NonEmptyList (p :| Nil) √ó e) = branchFwd_uncurried p e
patternsFwd (NonEmptyList (p :| p' : ps) √ó e) =
   patternFwd p =<< ContExpr <$> E.Lambda <$> patternsFwd (NonEmptyList (p' :| ps) √ó e)

patternFwd :: Pattern -> Cont ùîπ -> MayFail (Elim ùîπ)
patternFwd (PVar x) Œ∫              = pure (ElimVar x Œ∫)
patternFwd (PConstr c ps) Œ∫        =
   checkArity c (length ps) *> (ElimConstr <$> singleton c <$> argPatternFwd (Left <$> ps) Œ∫)
patternFwd PListEmpty Œ∫            = pure (ElimConstr (singleton cNil Œ∫))
patternFwd (PListNonEmpty p o) Œ∫   = ElimConstr <$> singleton cCons <$> argPatternFwd (Left p : Right o : Nil) Œ∫

-- o, Œ∫ desugar_fwd œÉ
listRestPatternFwd :: ListRestPattern -> Cont ùîπ -> MayFail (Elim ùîπ)
listRestPatternFwd PEnd Œ∫          = pure (ElimConstr (singleton cNil Œ∫))
listRestPatternFwd (PNext p o) Œ∫   = ElimConstr <$> singleton cCons <$> argPatternFwd (Left p : Right o : Nil) Œ∫

argPatternFwd :: List (Pattern + ListRestPattern) -> Cont ùîπ -> MayFail (Cont ùîπ)
argPatternFwd Nil Œ∫             = pure Œ∫
argPatternFwd (Left p : œÄs) Œ∫   = ContElim <$> (argPatternFwd œÄs Œ∫ >>= patternFwd p)
argPatternFwd (Right o : œÄs) Œ∫  = ContElim <$> (argPatternFwd œÄs Œ∫ >>= listRestPatternFwd o)

branchFwd_uncurried :: Pattern -> Expr ùîπ -> MayFail (Elim ùîπ)
branchFwd_uncurried p s = (ContExpr <$> exprFwd s) >>= patternFwd p

branchesFwd_curried :: NonEmptyList (Branch ùîπ) -> MayFail (Elim ùîπ)
branchesFwd_curried bs = do
   NonEmptyList (œÉ :| œÉs) <- traverse patternsFwd bs
   foldM maybeJoin œÉ œÉs

branchesFwd_uncurried :: NonEmptyList (Pattern √ó Expr ùîπ) -> MayFail (Elim ùîπ)
branchesFwd_uncurried bs = do
   NonEmptyList (œÉ :| œÉs) <- traverse (uncurry branchFwd_uncurried) bs
   foldM maybeJoin œÉ œÉs

-- holes used to represent var defs, but otherwise surface programs never contain holes
totaliseFwd :: Cont ùîπ -> ùîπ -> Cont ùîπ
totaliseFwd ContHole _                    = error absurd
totaliseFwd (ContExpr e) _                = ContExpr e
totaliseFwd (ContElim ElimHole) _         = error absurd
totaliseFwd (ContElim (ElimConstr m)) Œ±   = ContElim (ElimConstr (totaliseConstrFwd (c √ó totaliseFwd Œ∫ Œ±) Œ±))
   where c √ó Œ∫ = assert (size m == 1) (fromJust absurd (L.head (toUnfoldable m)))
totaliseFwd (ContElim (ElimVar x Œ∫)) Œ±    = ContElim (ElimVar x (totaliseFwd Œ∫ Œ±))

-- Extend singleton branch to set of branches where any missing constructors have been mapped to the empty list,
-- using anonymous variables in any generated patterns.
totaliseConstrFwd :: Ctr √ó Cont ùîπ -> ùîπ -> Map Ctr (Cont ùîπ)
totaliseConstrFwd (c √ó Œ∫) Œ± =
   let defaultBranch c' = c' √ó applyN (ContElim <<< ElimVar varAnon) (successful (arity c')) (ContExpr (enil Œ±))
       cŒ∫s = defaultBranch <$> (ctrs (successful (dataTypeFor c)) \\ L.singleton c)
   in fromFoldable (c √ó Œ∫ : cŒ∫s)
