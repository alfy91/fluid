module DesugarFwd where

import Prelude hiding (absurd)
import Data.Either (Either(..))
import Data.Foldable (foldM)
import Data.Function (on)
import Data.List (List(..), (:), (\\), length)
import Data.List (head) as L
import Data.List.NonEmpty (NonEmptyList(..), groupBy, head, reverse, toList)
import Data.Map (Map, fromFoldable, insert, lookup, singleton, toUnfoldable, update)
import Data.Maybe (Maybe(..))
import Data.NonEmpty ((:|))
import Data.Traversable (traverse)
import Data.Tuple (fst, snd)
import Bindings (Binding, Bindings, (‚Ü¶), fromList)
import DataType (Ctr, DataType'(..), checkArity, checkDataType, ctrToDataType, cCons, cNil, cTrue, cFalse)
import Expr (Cont(..), Elim(..), asElim)
import Expr (Expr(..), Module(..), VarDef(..)) as E
import Lattice (ùîπ)
import SExpr (
   Clause, Expr(..), ListPatternRest(..), ListRest(..), Module(..), Pattern(..), VarDefs, VarDef(..), RecDefs, Qualifier(..)
)
import Util (MayFail, type (+), type (√ó), (√ó), (‚âû), absurd, error, fromJust, mustLookup, report)

enil :: ùîπ -> E.Expr ùîπ
enil Œ± = E.Constr Œ± cNil Nil

econs :: ùîπ -> E.Expr ùîπ -> E.Expr ùîπ -> E.Expr ùîπ
econs Œ± e e' = E.Constr Œ± cCons (e : e' : Nil)

-- "Vanilla" desugaring is just forward-slicing where we disregard annotations, so user errors may occur during
-- forward slicing.
class DesugarFwd a b | a -> b where
   desugarFwd :: a -> MayFail b

-- Surface language supports "blocks" of variable declarations; core does not.
instance module_ :: DesugarFwd (Module Boolean) (E.Module Boolean) where
   desugarFwd (Module ds) = E.Module <$> traverse desugarFwd (join $ (ds <#> desugarDefs))
      where
      desugarDefs :: VarDefs Boolean + RecDefs Boolean -> List (VarDef Boolean + RecDefs Boolean)
      desugarDefs (Left ds')  = toList ds' <#> Left
      desugarDefs (Right Œ¥)   = pure $ Right Œ¥

instance varDef :: DesugarFwd (VarDef Boolean) (E.VarDef Boolean) where
   desugarFwd (VarDef œÄ s) = E.VarDef <$> desugarFwd (œÄ √ó (ContHole :: Cont ùîπ)) <*> desugarFwd s

instance varDefs :: DesugarFwd (NonEmptyList (VarDef Boolean) √ó Expr Boolean) (E.Expr Boolean) where
   desugarFwd (NonEmptyList (d :| Nil) √ó s) =
      E.Let <$> desugarFwd d <*> desugarFwd s
   desugarFwd (NonEmptyList (d :| d' : ds) √ó s) =
      E.Let <$> desugarFwd d <*> desugarFwd (NonEmptyList (d' :| ds) √ó s)

instance recDefs :: DesugarFwd (NonEmptyList (String √ó (NonEmptyList Pattern √ó Expr Boolean))) (Bindings Elim Boolean) where
   desugarFwd fœÄs = fromList <$> toList <$> reverse <$> traverse toRecDef fœÄss
      where
      fœÄss = groupBy (eq `on` fst) fœÄs :: NonEmptyList (NonEmptyList (Clause ùîπ))

      toRecDef :: NonEmptyList (Clause ùîπ) -> MayFail (Binding Elim ùîπ)
      toRecDef fœÄs' = ((‚Ü¶) (fst (head fœÄs'))) <$> desugarFwd (snd <$> fœÄs')

instance expr :: DesugarFwd (Expr Boolean) (E.Expr Boolean) where
   desugarFwd (Var x)                  = pure (E.Var x)
   desugarFwd (Op op)                  = pure (E.Op op)
   desugarFwd (Int Œ± n)                = pure (E.Int Œ± n)
   desugarFwd (Float Œ± n)              = pure (E.Float Œ± n)
   desugarFwd (Str Œ± s)                = pure (E.Str Œ± s)
   desugarFwd (Constr Œ± c ss)          = E.Constr Œ± c <$> traverse desugarFwd ss
   desugarFwd (Matrix Œ± s (x √ó y) s')  = E.Matrix Œ± <$> desugarFwd s <@> x √ó y <*> desugarFwd s'
   desugarFwd (Lambda bs)              = E.Lambda <$> desugarFwd bs
   desugarFwd (App s1 s2)              = E.App <$> desugarFwd s1 <*> desugarFwd s2
   desugarFwd (BinaryApp s1 op s2)     = E.BinaryApp <$> desugarFwd s1 <@> op <*> desugarFwd s2
   desugarFwd (MatchAs s bs)           = E.App <$> (E.Lambda <$> desugarFwd bs) <*> desugarFwd s
   desugarFwd (IfElse s1 s2 s3) = do
      e2 <- desugarFwd s2
      e3 <- desugarFwd s3
      let œÉ = ElimConstr (fromFoldable [cTrue √ó ContExpr e2, cFalse √ó ContExpr e3])
      E.App (E.Lambda œÉ) <$> desugarFwd s1
   desugarFwd (ListEmpty Œ±)            = pure (enil Œ±)
   desugarFwd (ListNonEmpty Œ± s l)     = econs Œ± <$> desugarFwd s <*> desugarFwd l
   desugarFwd (ListEnum s1 s2)         = E.App <$> ((E.App (E.Var "enumFromTo")) <$> desugarFwd s1) <*> desugarFwd s2
   -- | List-comp-done
   desugarFwd (ListComp Œ± s_body (NonEmptyList (Guard (Constr Œ±2 c Nil) :| Nil))) | c == cTrue = do
      econs Œ±2 <$> desugarFwd s_body <@> enil Œ±2
   -- | List-comp-last
   desugarFwd (ListComp Œ± s_body (NonEmptyList (q :| Nil))) =
      desugarFwd (ListComp Œ± s_body (NonEmptyList (q :| Guard (Constr Œ± cTrue Nil) : Nil)))
   -- | List-comp-guard
   desugarFwd (ListComp Œ± s_body (NonEmptyList (Guard s :| q : qs))) = do
      e <- desugarFwd (ListComp Œ± s_body (NonEmptyList (q :| qs)))
      let œÉ = ElimConstr (fromFoldable [cTrue √ó ContExpr e, cFalse √ó ContExpr (enil Œ±)])
      E.App (E.Lambda œÉ) <$> desugarFwd s
   -- | List-comp-decl
   desugarFwd (ListComp Œ± s_body (NonEmptyList (Declaration (VarDef œÄ s) :| q : qs))) = do
      e <- desugarFwd (ListComp Œ± s_body (NonEmptyList (q :| qs)))
      œÉ <- desugarFwd (œÄ √ó (ContExpr e :: Cont ùîπ))
      E.App (E.Lambda œÉ) <$> desugarFwd s
   -- | List-comp-gen
   desugarFwd (ListComp Œ± s_body (NonEmptyList (Generator p slist :| q : qs))) = do
      e <- desugarFwd (ListComp Œ± s_body (NonEmptyList (q :| qs)))
      œÉ <- desugarFwd (p √ó ContExpr e)
      E.App (E.App (E.Var "concatMap") (E.Lambda (asElim (totalise (ContElim œÉ) Œ±)))) <$> desugarFwd slist
   desugarFwd (Let ds s)               = desugarFwd (ds √ó s)
   desugarFwd (LetRec fœÄs s)           = E.LetRec <$> desugarFwd fœÄs <*> desugarFwd s

instance listRest :: DesugarFwd (ListRest Boolean) (E.Expr Boolean) where
   desugarFwd (End Œ±)       = pure (enil Œ±)
   desugarFwd (Next Œ± s l)  = econs Œ± <$> desugarFwd s <*> desugarFwd l

instance patternsExpr :: DesugarFwd (NonEmptyList Pattern √ó Expr Boolean) (Elim Boolean) where
   desugarFwd (NonEmptyList (p :| Nil) √ó e) = desugarFwd (p √ó e)
   desugarFwd (NonEmptyList (p :| p' : ps) √ó e) =
      (desugarFwd <<< (p √ó _)) =<< ContExpr <$> E.Lambda <$> desugarFwd (NonEmptyList (p' :| ps) √ó e)

-- Cont argument here acts as an accumulator.
instance patternCont :: DesugarFwd (Pattern √ó Cont Boolean) (Elim Boolean) where
   desugarFwd (PVar x √ó Œ∫) = pure (ElimVar x Œ∫)
   desugarFwd (PConstr c œÄs √ó Œ∫) = checkArity c (length œÄs) *> (ElimConstr <$> singleton c <$> toCont œÄs)
      where
      toCont :: List Pattern -> MayFail (Cont ùîπ)
      toCont Nil = pure Œ∫
      toCont (œÄ : œÄs') = ContElim <$> (desugarFwd <<< (œÄ √ó _) =<< toCont œÄs')
   desugarFwd (PListEmpty √ó Œ∫) = pure (ElimConstr (singleton cNil Œ∫))
   desugarFwd (PListNonEmpty œÄ o √ó Œ∫)  = do
      Œ∫' <- ContElim <$> desugarFwd (o √ó Œ∫)
      ElimConstr <$> singleton cCons <$> ContElim <$> desugarFwd (œÄ √ó Œ∫')

instance listPatternRestCont :: DesugarFwd (ListPatternRest √ó Cont Boolean) (Elim Boolean) where
   desugarFwd (PEnd √ó Œ∫) = pure (ElimConstr (singleton cNil Œ∫))
   desugarFwd (PNext œÄ o √ó Œ∫) = do
      Œ∫' <- ContElim <$> desugarFwd (o √ó Œ∫)
      ElimConstr <$> singleton cCons <$> ContElim <$> desugarFwd (œÄ √ó Œ∫')

instance branchUncurried :: DesugarFwd (Pattern √ó Expr Boolean) (Elim Boolean) where
   desugarFwd (œÄ √ó s) = (ContExpr <$> desugarFwd s) >>= (desugarFwd <<< (œÄ √ó _))

-- To consolidate these without overlapping instances, probably need RecDefs to be a data type.
instance branches :: DesugarFwd (NonEmptyList (NonEmptyList Pattern √ó Expr Boolean)) (Elim Boolean) where
   desugarFwd bs = do
      NonEmptyList (œÉ :| œÉs) <- traverse desugarFwd bs
      foldM maybeJoin œÉ œÉs

instance branchesUncurried :: DesugarFwd (NonEmptyList (Pattern √ó Expr Boolean)) (Elim Boolean) where
   desugarFwd bs = do
      NonEmptyList (œÉ :| œÉs) <- traverse desugarFwd bs
      foldM maybeJoin œÉ œÉs

instance either :: (DesugarFwd a b, DesugarFwd c d) => DesugarFwd (a + c) (b + d) where
   desugarFwd (Left x) = Left <$> desugarFwd x
   desugarFwd (Right x) = Right <$> desugarFwd x

-- holes used to represent var defs, but otherwise surface programs never contain holes
totalise :: Cont ùîπ -> ùîπ -> Cont ùîπ
totalise ContHole _                    = error absurd
totalise (ContExpr e) _                = ContExpr e
totalise (ContElim ElimHole) _         = error absurd
totalise (ContElim (ElimConstr m)) Œ±   =
   let c √ó Œ∫ = fromJust absurd (L.head (toUnfoldable m))
       bs = toUnfoldable m
       DataType _ sigs = mustLookup c ctrToDataType
       bs' = (_ √ó ContExpr (enil Œ±)) <$> ((fst <$> toUnfoldable sigs) \\ (fst <$> bs))
   in ContElim (ElimConstr (fromFoldable ((bs <#> \(c √ó Œ∫) -> c √ó totalise Œ∫ Œ±) <> bs')))
totalise (ContElim (ElimVar x Œ∫)) Œ±    = ContElim (ElimVar x (totalise Œ∫ Œ±))

-- TODO: subsume with (or distinguish from) Lattice instance on Elim
class Joinable a where
   maybeJoin :: a -> a -> MayFail a

instance joinableElim :: Joinable (Elim Boolean) where
   maybeJoin (ElimVar x Œ∫) (ElimVar y Œ∫')       = ElimVar <$> x ‚âû y <*> maybeJoin Œ∫ Œ∫'
   maybeJoin (ElimConstr Œ∫s) (ElimConstr Œ∫s')   = ElimConstr <$> maybeJoin Œ∫s Œ∫s'
   maybeJoin _ _                                = report "Unmergable function branches"

instance joinableCont :: Joinable (Cont Boolean) where
   maybeJoin (ContElim œÉ) (ContElim œÉ')                        = ContElim <$> maybeJoin œÉ œÉ'
   maybeJoin (ContExpr (E.Lambda œÉ)) (ContExpr (E.Lambda œÉ'))  = ContExpr <$> (E.Lambda <$> maybeJoin œÉ œÉ')
   maybeJoin _ _                                               = report "Unmergable function branches"

instance joinableMap :: Joinable (Map Ctr (Cont Boolean)) where
   maybeJoin Œ∫s1 Œ∫s2 = do
      foldM maybeUpdate Œ∫s1 (toUnfoldable Œ∫s2 :: List (Ctr √ó Cont ùîπ))
      where
      maybeUpdate :: Map Ctr (Cont ùîπ) -> Ctr √ó Cont ùîπ -> MayFail (Map Ctr (Cont ùîπ))
      maybeUpdate Œ∫s (c √ó Œ∫) =
         case lookup c Œ∫s of
            Nothing -> do
               checkDataType "Non-uniform patterns: " c Œ∫s
               pure $ insert c Œ∫ Œ∫s
            Just Œ∫' ->
               update <$> (const <$> pure <$> maybeJoin Œ∫' Œ∫) <@> c <@> Œ∫s
