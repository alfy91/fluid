module Eval where

import Prelude hiding (absurd)

import Data.Array (fromFoldable)
import Data.Bifunctor (bimap)
import Data.Either (Either(..), note)
import Data.List (List(..), (:), length, range, reverse, singleton, unzip, zipWith)
import Data.Map (empty, lookup)
import Data.Map (singleton) as M
import Data.Map.Internal (keys)
import Data.Profunctor.Strong ((&&&), second)
import Data.Set (union)
import Data.Traversable (sequence, traverse)
import Bindings ((‚Ü¶), asMap, find, key, val, varAnon)
import DataType (Ctr, arity, cPair, dataTypeFor)
import Expr (Cont(..), Elim(..), Expr(..), Module(..), VarDef(..), asExpr, fv)
import Lattice (ùîπ, checkConsistent)
import Pretty (prettyP)
import Primitive (match) as P
import Trace (Trace(..), VarDef(..)) as T
import Trace (Trace, Match(..))
import Util (MayFail, type (√ó), (√ó), absurd, check, disjUnion, error, report, successful)
import Val (Env, FunEnv, PrimOp(..), (<+>), Val, dom, for, lookup', restrict)
import Val (Val(..)) as V

patternMismatch :: String -> String -> String
patternMismatch s s' = "Pattern mismatch: found " <> s <> ", expected " <> s'

match :: Val ùîπ -> Elim ùîπ -> MayFail (Env ùîπ √ó Cont ùîπ √ó Match ùîπ)
match v (ElimVar x Œ∫)  | x == varAnon    = pure (empty √ó Œ∫ √ó MatchVarAnon v)
                       | otherwise       = pure (M.singleton x v √ó Œ∫ √ó MatchVar x v)
match (V.Constr _ c vs) (ElimConstr m) = do
   checkConsistent "Pattern mismatch: " c (keys m)
   Œ∫ <- note ("Incomplete patterns: no branch for " <> show c) (lookup c m)
   second (MatchConstr c) <$> matchMany vs Œ∫
match v (ElimConstr m) = do
   d <- dataTypeFor (keys m)
   report $ patternMismatch (prettyP v) (show d)
match (V.Record _ xvs) (ElimRecord xs Œ∫)  = do
   check (xs == (xvs <#> key)) (patternMismatch (show $ xvs <#> key) (show xs))
   second (zipWith (‚Ü¶) (reverse xs) >>> MatchRecord) <$> matchMany (reverse xvs <#> val) Œ∫
match v (ElimRecord xs _) = report (patternMismatch (prettyP v) (show xs))

matchMany :: List (Val ùîπ) -> Cont ùîπ -> MayFail (Env ùîπ √ó Cont ùîπ √ó List (Match ùîπ))
matchMany Nil Œ∫ = pure (empty √ó Œ∫ √ó Nil)
matchMany (v : vs) (ContElim œÉ) = do
   Œ≥  √ó Œ∫'  √ó w  <- match v œÉ
   Œ≥' √ó Œ∫'' √ó ws <- matchMany vs Œ∫'
   pure $ Œ≥ `disjUnion` Œ≥' √ó Œ∫'' √ó (w : ws)
matchMany (_ : vs) (ContExpr _) = report $
   show (length vs + 1) <> " extra argument(s) to constructor; did you forget parentheses in lambda pattern?"
matchMany _ _ = error absurd

closeDefs :: Env ùîπ -> FunEnv ùîπ -> Env ùîπ
closeDefs Œ≥ œÅ = œÅ <#> \œÉ ->
   let xs = fv (œÅ `for` œÉ) `union` fv œÉ
   in V.Closure false (Œ≥ `restrict` xs) œÅ œÉ

checkArity :: Ctr -> Int -> MayFail Unit
checkArity c n = do
   n' <- arity c
   check (n' >= n) (show c <> " got " <> show n <> " argument(s), expects at most " <> show n')

eval :: Env ùîπ -> Expr ùîπ -> MayFail (Trace ùîπ √ó Val ùîπ)
eval Œ≥ (Var x)       = (T.Var x √ó _) <$> lookup' x Œ≥
eval Œ≥ (Op op)       = (T.Op op √ó _) <$> lookup' op Œ≥
eval _ (Int _ n)     = pure (T.Int n √ó V.Int false n)
eval _ (Float _ n)   = pure (T.Float n √ó V.Float false n)
eval _ (Str _ str)   = pure (T.Str str √ó V.Str false str)
eval Œ≥ (Record _ xes) = do
   let xs √ó es = xes <#> (key &&& val) # unzip
   ts √ó vs <- traverse (eval Œ≥) es <#> unzip
   pure (T.Record Œ≥ (zipWith (‚Ü¶) xs ts) √ó V.Record false (zipWith (‚Ü¶) xs vs))
eval Œ≥ (Constr _ c es) = do
   checkArity c (length es)
   ts √ó vs <- traverse (eval Œ≥) es <#> unzip
   pure (T.Constr Œ≥ c ts √ó V.Constr false c vs)
eval Œ≥ (Matrix _ e (x √ó y) e') = do
   t √ó v <- eval Œ≥ e'
   case v of
      V.Constr _ c (v1 : v2 : Nil) | c == cPair -> do
         let (i' √ó _) √ó (j' √ó _) = P.match v1 √ó P.match v2
         check (i' √ó j' >= 1 √ó 1) ("array must be at least (" <> show (1 √ó 1) <> "); got (" <> show (i' √ó j') <> ")")
         tss √ó vss <- unzipToArray <$> ((<$>) unzipToArray) <$> (sequence $ do
            i <- range 1 i'
            singleton $ sequence $ do
               j <- range 1 j'
               let Œ≥' = M.singleton x (V.Int false i) `disjUnion` (M.singleton y (V.Int false j))
               singleton (eval (Œ≥ <+> Œ≥') e))
         pure (T.Matrix tss (x √ó y) (i' √ó j') t √ó V.Matrix false (vss √ó (i' √ó false) √ó (j' √ó false)))
      v' -> report ("Array dimensions must be pair of ints; got " <> prettyP v')
   where
   unzipToArray :: forall a b . List (a √ó b) -> Array a √ó Array b
   unzipToArray = unzip >>> bimap fromFoldable fromFoldable
eval Œ≥ (Lambda œÉ) =
   pure (T.Lambda œÉ √ó V.Closure false (Œ≥ `restrict` fv œÉ) empty œÉ)
eval Œ≥ (Project e x) = do
   t √ó v <- eval Œ≥ e
   case v of
      V.Record _ xvs -> (T.Project t xvs x √ó _) <$> find x xvs
      _ -> report "Expected record"
eval Œ≥ (App e e') = do
   t √ó v <- eval Œ≥ e
   t' √ó v' <- eval Œ≥ e'
   case v of
      V.Closure _ Œ≥1 œÅ œÉ -> do
         let Œ≥2 = closeDefs Œ≥1 œÅ
         Œ≥3 √ó e'' √ó w <- match v' œÉ
         t'' √ó v'' <- eval (Œ≥1 <+> Œ≥2 <+> Œ≥3) (asExpr e'')
         pure (T.App (t √ó dom œÅ √ó œÉ) t' w t'' √ó v'')
      V.Primitive (PrimOp œÜ) vs ->
         let vs' = vs <> singleton v'
             v'' = if œÜ.arity > length vs' then V.Primitive (PrimOp œÜ) vs' else œÜ.op vs' in
         pure (T.AppPrim (t √ó PrimOp œÜ √ó vs) (t' √ó v') √ó v'')
      V.Constr _ c vs -> do
         check (successful (arity c) > length vs) ("Too many arguments to " <> show c)
         pure (T.AppConstr (t √ó c √ó length vs) t' √ó V.Constr false c (vs <> singleton v'))
      _ -> report "Expected closure, operator or unsaturated constructor"
eval Œ≥ (Let (VarDef œÉ e) e') = do
   t √ó v <- eval Œ≥ e
   Œ≥' √ó _ √ó w <- match v œÉ -- terminal meta-type of eliminator is meta-unit
   t' √ó v' <- eval (Œ≥ <+> Œ≥') e'
   pure (T.Let (T.VarDef w t) t' √ó v')
eval Œ≥ (LetRec xœÉs e) = do
   let Œ≥' = closeDefs Œ≥ (asMap xœÉs)
   t √ó v <- eval (Œ≥ <+> Œ≥') e
   pure (T.LetRec xœÉs t √ó v)

eval_module :: Env ùîπ -> Module ùîπ -> MayFail (Env ùîπ)
eval_module Œ≥ = go empty
   where
   go :: Env ùîπ -> Module ùîπ -> MayFail (Env ùîπ)
   go Œ≥' (Module Nil) = pure Œ≥'
   go y' (Module (Left (VarDef œÉ e) : ds)) = do
      _  √ó v <- eval (Œ≥ <+> y') e
      Œ≥'' √ó _ √ó _  <- match v œÉ
      go (y' <+> Œ≥'') (Module ds)
   go Œ≥' (Module (Right xœÉs : ds)) =
      go (Œ≥' <+> closeDefs (Œ≥ <+> Œ≥') (asMap xœÉs)) (Module ds)
