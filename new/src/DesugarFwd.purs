module DesugarFwd where

import Prelude hiding (absurd)
import Control.Apply (lift2)
import Data.Either (Either(..))
import Data.Foldable (foldM)
import Data.Function (on)
import Data.List (List(..), (:), (\\), length)
import Data.List (head) as L
import Data.List.NonEmpty (NonEmptyList(..), groupBy, head, reverse, toList)
import Data.Map (Map, fromFoldable, insert, lookup, singleton, toUnfoldable, update)
import Data.Maybe (Maybe(..))
import Data.NonEmpty ((:|))
import Data.Traversable (traverse)
import Data.Tuple (Tuple, fst, snd)
import Bindings (Binding, Bindings, (‚Ü¶), fromList)
import DataType (Ctr, DataType'(..), checkArity, checkDataType, ctrToDataType, cCons, cNil, cTrue, cFalse)
import Expr (Cont(..), Elim(..), Var)
import Expr (Expr(..), Module(..), RawExpr(..), VarDef(..), expr) as E
import SExprX (
   Clause, Expr(..), ListPatternRest(..), ListRest(..), RawListRest(..), Module(..), Pattern(..), VarDefs, VarDef, RecDefs, RawQualifier(..), Qualifier(..), RawExpr(..)
)
import Lattice (ùîπ, (‚àß), bot)
import Util (MayFail, type (√ó), (√ó), (‚âû), absurd, fromJust, mustLookup, report)

eapp :: ùîπ -> E.Expr ùîπ -> E.Expr ùîπ -> E.Expr ùîπ
eapp Œ± f = E.Expr Œ± <<< E.App f

enil :: ùîπ -> E.Expr ùîπ
enil Œ± = E.Expr Œ± $ E.Constr cNil Nil

econs :: ùîπ -> E.Expr ùîπ -> E.Expr ùîπ -> E.Expr ùîπ
econs Œ± e e' = E.Expr Œ± $ E.Constr cCons (e : e' : Nil)

evar :: ùîπ -> Var -> E.Expr ùîπ
evar Œ± = E.Expr Œ± <<< E.Var

class DesugarFwd a b | a -> b where
   desugarFwd :: a -> MayFail b

-- | data Module a  = Module (List (VarDefs a + RecDefs a))
-- | type VarDefs a = NonEmptyList (VarDef a)
-- | type RecDefs a = NonEmptyList (Clause a)
-- | type Clause a = Var √ó Branch a
-- | type VarDef a = Pattern √ó Expr a
-- | traverse :: (a -> m b) -> t a -> m (t b)

-- Surface language supports "blocks" of variable declarations; core does not.
-- No need to pass "Œ± = true" because desugarFwd is called on VarDef, not VarDefs?
instance desugarFwdModule :: DesugarFwd (Module Boolean) (E.Module Boolean) where
   desugarFwd (Module ds) = E.Module <$> traverse desugarFwd (join $ (ds <#> desugarDefs))
      where
      desugarDefs :: Either (VarDefs Boolean) (RecDefs Boolean)
                  -> List (Either (VarDef Boolean) (RecDefs Boolean))
      desugarDefs (Left ds')  = (toList ds' <#> Left)
      desugarDefs (Right Œ¥)   = pure $ Right Œ¥

{- p, e ‚Üó œÉ      specialisation of    p, Œ∫ ‚Üó œÉ -}
-- data E.VarDef a = E.VarDef (Elim a) (E.Expr a) -- where elim has codomain unit
instance desugarFwdVarDef :: DesugarFwd (Pattern √ó (Expr Boolean)) (E.VarDef Boolean) where
   desugarFwd (œÄ √ó s) = E.VarDef <$> desugarFwd (œÄ √ó (None :: Cont ùîπ)) <*> desugarFwd s

{-        ‚Üí                  -}
{- (Œ±, (p , s), s_body) ‚Üó e  -}
-- | The first boolean represents the Œ± of the outer expression which contains the var defs
instance desugarFwdVarDefs :: DesugarFwd (Boolean √ó (NonEmptyList (Pattern √ó Expr Boolean) √ó Expr Boolean))
                                         (E.Expr Boolean) where
   desugarFwd  (Œ±1 √ó (NonEmptyList (d@(_ √ó Expr Œ±2 t) :| Nil) √ó s))     =
      E.Expr (Œ±1 ‚àß Œ±2) <$> (E.Let <$> desugarFwd d <*> desugarFwd s)
   desugarFwd  (Œ±1 √ó (NonEmptyList (d@(_ √ó Expr Œ±2 t) :| d' : ds) √ó s)) =
      E.Expr (Œ±1 ‚àß Œ±2) <$> (E.Let <$> desugarFwd d <*> desugarFwd ((Œ±1 ‚àß Œ±2) √ó (NonEmptyList (d' :| ds) √ó s)))

{-       ‚Üí                      ‚Üí                 -}
{- let f c ‚Üó [f ‚Ü¶ œÉ]       (f, (p, s))  ‚Üó [f ‚Ü¶ œÉ] -}
instance desugarFwdRecDefs :: DesugarFwd (NonEmptyList (String √ó (NonEmptyList Pattern √ó Expr Boolean)))
                                         (Bindings Elim Boolean) where
   desugarFwd fœÄs = fromList <$> toList <$> reverse <$> traverse toRecDef fœÄss
      where
      fœÄss = groupBy (eq `on` fst) fœÄs :: NonEmptyList (NonEmptyList (Clause ùîπ))

      toRecDef :: NonEmptyList (Clause ùîπ) -> MayFail (Binding Elim ùîπ)
      toRecDef fœÄs' = ((‚Ü¶) (fst $ head fœÄs')) <$> desugarFwd (snd <$> fœÄs')

{- s ‚Üó e -}
instance desugarFwdExpr :: DesugarFwd (Expr Boolean) (E.Expr Boolean) where
   desugarFwd (Expr Œ± (Int n))               = pure $ E.Expr Œ± (E.Int n)
   desugarFwd (Expr Œ± (Float n))             = pure $ E.Expr Œ± (E.Float n)
   desugarFwd (Expr Œ± (Var x))               = pure $ E.Expr Œ± (E.Var x)
   desugarFwd (Expr Œ± (Op op))               = pure $ E.Expr Œ± (E.Op op)
   desugarFwd (Expr Œ± (Str s))               = pure $ E.Expr Œ± (E.Str s)
   desugarFwd (Expr Œ± (Constr ctr args))     = E.Expr Œ± <$> (E.Constr ctr <$> traverse desugarFwd args)
   desugarFwd (Expr Œ± (Lambda bs))           = E.Expr Œ± <$> (E.Lambda <$> desugarFwd bs)
   desugarFwd (Expr Œ± (App s1 s2))           = E.Expr Œ± <$> (E.App <$> desugarFwd s1 <*> desugarFwd s2)
   desugarFwd (Expr Œ± (BinaryApp s1 op s2))  = E.Expr Œ± <$> (E.BinaryApp <$> desugarFwd s1 <@> op <*> desugarFwd s2)
   desugarFwd (Expr Œ± (MatchAs s bs))        = E.Expr Œ± <$> (E.App <$> (E.Expr Œ± <$> E.Lambda <$> desugarFwd bs) <*> desugarFwd s)
   -- Calls desugarVarDefs
   desugarFwd (Expr Œ± (Let ds s))            = desugarFwd $ Œ± √ó (ds √ó s)
   desugarFwd (Expr Œ± (LetRec fœÄs s))        = E.Expr Œ± <$> (E.LetRec <$> desugarFwd fœÄs <*> desugarFwd s)
   desugarFwd (Expr Œ± (IfElse s1 s2 s3)) = do
      e2 <- desugarFwd s2
      e3 <- desugarFwd s3
      let œÉ = ElimConstr (fromFoldable [cTrue √ó Body e2, cFalse √ó Body e3])
      E.Expr Œ± <$> (E.App (E.Expr Œ± $ E.Lambda œÉ) <$> desugarFwd s1)
   desugarFwd (Expr Œ± (ListEmpty))           = pure $ enil Œ±
   desugarFwd (Expr Œ± (ListNonEmpty s l))    = lift2 (econs Œ±) (desugarFwd s) (desugarFwd l)
   desugarFwd (Expr Œ± (ListRange s1 s2)) =
      eapp Œ± <$> ((eapp Œ± (evar Œ± "range")) <$> desugarFwd s1) <*> desugarFwd s2
   desugarFwd (Expr Œ±1 (ListComp s_body (NonEmptyList (Qualifier _ (Guard (Expr Œ±2 (Constr c Nil))) :| Nil)))) | c == cTrue = do
      e <- desugarFwd s_body
      pure $ econs (Œ±1 ‚àß Œ±2) e (enil (Œ±1 ‚àß Œ±2))
   desugarFwd (Expr Œ± (ListComp s_body (NonEmptyList (q :| Nil)))) =
      desugarFwd $ Expr Œ± $ ListComp s_body $ NonEmptyList $ q :| (Qualifier Œ± (Guard (Expr Œ± $ Constr cTrue Nil))) : Nil
   desugarFwd (Expr Œ±2 (ListComp s_body (NonEmptyList ((Qualifier Œ±1 (Guard s)) :| q : qs)))) = do
      e <- desugarFwd $ Expr Œ±2 $ ListComp s_body $ NonEmptyList $ q :| qs
      let œÉ = ElimConstr (fromFoldable [cTrue √ó Body e, cFalse √ó Body (enil (Œ±1 ‚àß Œ±2))])
      E.Expr (Œ±1 ‚àß Œ±2) <$> (E.App (E.Expr (Œ±1 ‚àß Œ±2) $ E.Lambda œÉ) <$> desugarFwd s)

   -- List-comp-decl looks correct, but not sure about why this choice of implementation is used
   desugarFwd (Expr Œ±2 (ListComp s_body (NonEmptyList ((Qualifier Œ±1 (Declaration (p √ó s))) :| q : qs)))) = do
      œÉ <- desugarFwd $ p √ó (None :: Cont ùîπ)
      E.Expr (Œ±1 ‚àß Œ±2) <$> (E.Let <$> (E.VarDef œÉ <$> desugarFwd s)
                                  <*> (desugarFwd $ Expr Œ±2 (ListComp s_body (NonEmptyList $ q :| qs))))

   desugarFwd (Expr Œ±2 (ListComp s_body (NonEmptyList ((Qualifier Œ±1 (Generator p slist)) :| q : qs)))) = do
      e <- desugarFwd $ Expr Œ±2 $ ListComp s_body $ NonEmptyList $ q :| qs
      œÉ <- desugarFwd $ p √ó Body e
      let Œª = E.Expr (Œ±1 ‚àß Œ±2) $ E.Lambda $ totalise œÉ (enil (Œ±1 ‚àß Œ±2))
      eapp (Œ±1 ‚àß Œ±2) (evar (Œ±1 ‚àß Œ±2) "concat") <$> (eapp (Œ±1 ‚àß Œ±2) (eapp (Œ±1 ‚àß Œ±2) (evar (Œ±1 ‚àß Œ±2) "map") Œª) <$> desugarFwd slist)

{- l ‚Üó e -}
instance desugarFwdListRest :: DesugarFwd (ListRest Boolean) (E.Expr Boolean) where
   desugarFwd (ListRest Œ± End)         = pure (enil Œ±)
   desugarFwd (ListRest Œ± (Next s l))  = lift2 (econs Œ±) (desugarFwd s) (desugarFwd l)

{- ‚Üí        -}
{- p, Œ∫ ‚Üó œÉ -}
instance desugarFwdPatternsCont :: DesugarFwd (NonEmptyList Pattern √ó Cont Boolean) (Elim Boolean) where
   desugarFwd (NonEmptyList (œÄ :| Nil) √ó Œ∫)     = desugarFwd $ œÄ √ó Œ∫
   desugarFwd (NonEmptyList (œÄ :| œÄ' : œÄs) √ó Œ∫) = do
      Œ∫' <- Body <$> E.expr <$> E.Lambda <$> desugarFwd (NonEmptyList (œÄ' :| œÄs) √ó Œ∫)
      desugarFwd $ œÄ √ó Œ∫'

{- p, Œ∫ ‚Üó œÉ -}
-- Cont arguments here act as an accumulator.
instance desugarFwdPatternCont :: DesugarFwd (Pattern √ó Cont Boolean) (Elim Boolean) where
   desugarFwd (PVar x √ó Œ∫)             = pure $ ElimVar x Œ∫
   desugarFwd (PConstr c œÄs √ó Œ∫)       = checkArity c (length œÄs) *> (ElimConstr <$> singleton c <$> toCont œÄs)
      where
      toCont :: List Pattern -> MayFail (Cont ùîπ)
      toCont Nil        = pure Œ∫
      toCont (œÄ : œÄs')  = Arg <$> do
         Œ∫' <- toCont œÄs'
         desugarFwd $ œÄ √ó Œ∫'
   desugarFwd (PListEmpty √ó Œ∫)         = pure $ ElimConstr $ singleton cNil Œ∫
   desugarFwd (PListNonEmpty œÄ o √ó Œ∫)  = do
      Œ∫' <- Arg <$> desugarFwd (o √ó Œ∫)
      ElimConstr <$> singleton cCons <$> Arg <$> desugarFwd (œÄ √ó Œ∫')

{- o, Œ∫ ‚Üó œÉ -}
instance desugarFwdListPatternRestCont :: DesugarFwd (ListPatternRest √ó (Cont Boolean)) (Elim Boolean) where
   desugarFwd (PEnd √ó Œ∫)      = pure $ ElimConstr $ singleton cNil Œ∫
   desugarFwd (PNext œÄ o √ó Œ∫) = do
      Œ∫' <- Arg <$> desugarFwd (o √ó Œ∫)
      ElimConstr <$> singleton cCons <$> Arg <$> desugarFwd (œÄ √ó Œ∫')

{-                ‚Üí        -}
{- c ‚Üó œÉ   i.e.   p, s ‚Üó œÉ -}
instance desugarFwdBranch :: DesugarFwd (NonEmptyList Pattern √ó Expr Boolean) (Elim Boolean) where
   desugarFwd (œÄs √ó s) = do
      Œ∫ <- Body <$> desugarFwd s
      desugarFwd $ œÄs √ó Œ∫

{- ‚Üí     -}
{- c ‚Üó œÉ -}
instance desugarFwdBranches :: DesugarFwd (NonEmptyList (NonEmptyList Pattern √ó Expr Boolean))
                                          (Elim Boolean) where
   desugarFwd bs = do
      NonEmptyList (œÉ :| œÉs) <- traverse desugarFwd bs
      foldM maybeJoin œÉ œÉs

instance desugarFwdEither :: (DesugarFwd a b, DesugarFwd c d) => DesugarFwd (Either a c) (Either b d) where
   desugarFwd (Left x) = Left <$> desugarFwd x
   desugarFwd (Right x) = Right <$> desugarFwd x

{- totalise Œ∫ ‚Üó Œ∫'       totalise (singleton œÉ) enil = œÉ -}
totalise :: Elim ùîπ -> E.Expr ùîπ -> Elim ùîπ
totalise (ElimConstr m) e =
   let c √ó Œ∫            = fromJust absurd $ L.head $ toUnfoldable m
       bs               = toUnfoldable m
       DataType _ sigs  = mustLookup c ctrToDataType
       bs'              = (_ √ó Body e) <$> ((fst <$> toUnfoldable sigs) \\ (fst <$> bs))
       bs''             = bs <#> \(c √ó Œ∫) -> case mustLookup c m of
                           Arg œÉ   -> c √ó Arg (totalise œÉ e)
                           Body e' -> c √ó Body e'
                           None    -> c √ó Body e
     in   ElimConstr $ fromFoldable $ bs'' <> bs'
totalise (ElimVar e Œ∫) e' = case Œ∫ of
   Arg œÉ  -> ElimVar e $ Arg $ totalise œÉ e'
   Body _ -> ElimVar e Œ∫
   None   -> ElimVar e $ Body e'

class Joinable a where
   maybeJoin :: a -> a -> MayFail a

instance joinableElim :: Joinable (Elim Boolean) where
   maybeJoin (ElimVar x Œ∫) (ElimVar y Œ∫')       = ElimVar <$> x ‚âû y <*> maybeJoin Œ∫ Œ∫'
   maybeJoin (ElimConstr Œ∫s) (ElimConstr Œ∫s')   = ElimConstr <$> maybeJoin Œ∫s Œ∫s'
   maybeJoin _ _                                = report "Can't join variable and constructor patterns"

instance joinableCont :: Joinable (Cont Boolean) where
   maybeJoin None None                       = pure None
   maybeJoin (Arg œÉ) (Arg œÉ')                = Arg <$> maybeJoin œÉ œÉ'
   maybeJoin (Body (E.Expr _ (E.Lambda œÉ)))
             (Body (E.Expr _ (E.Lambda œÉ'))) = Body<$> (E.expr <$> (E.Lambda <$> maybeJoin œÉ œÉ'))
   maybeJoin _ _                             = report "Incompatible continuations"

instance joinableMap :: Joinable (Map Ctr (Cont Boolean)) where
   maybeJoin Œ∫s1 Œ∫s2 = do
      foldM maybeUpdate Œ∫s1 (toUnfoldable Œ∫s2 :: List (Ctr √ó Cont ùîπ))
      where
      maybeUpdate :: Map Ctr (Cont ùîπ) -> Ctr √ó Cont ùîπ -> MayFail (Map Ctr (Cont ùîπ))
      maybeUpdate Œ∫s (c √ó Œ∫) =
         case lookup c Œ∫s of
            Nothing -> do
               checkDataType "Non-uniform patterns: " c Œ∫s
               pure $ insert c Œ∫ Œ∫s
            Just Œ∫' ->
               update <$> (const <$> pure <$> maybeJoin Œ∫' Œ∫) <@> c <@> Œ∫s
