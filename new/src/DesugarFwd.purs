module DesugarFwd where

import Prelude hiding (absurd)
import Control.Apply (lift2)
import Data.Either (Either(..))
import Data.Foldable (foldM)
import Data.Function (on)
import Data.List (List(..), (:), (\\), length)
import Data.List (head) as L
import Data.List.NonEmpty (NonEmptyList(..), groupBy, head, reverse, toList)
import Data.Map (Map, fromFoldable, insert, lookup, singleton, toUnfoldable, update)
import Data.Maybe (Maybe(..))
import Data.NonEmpty ((:|))
import Data.Traversable (traverse)
import Data.Tuple (Tuple, fst, snd)
import Bindings (Binding, Bindings, (‚Ü¶), fromList)
import DataType (Ctr, DataType'(..), checkArity, checkDataType, ctrToDataType, cCons, cNil, cTrue, cFalse)
import Expr (Cont(..), Elim(..), Var)
import Expr (Expr(..), Module(..), RawExpr(..), VarDef(..), expr) as E
import SExprX (
   Clause, Expr(..), ListPatternRest(..), ListRest(..), Module(..), Pattern(..), RawQualifier(..), Qualifier(..), RawExpr(..), expr
)
import Lattice (ùîπ, (‚àß))
import Util (MayFail, type (√ó), (√ó), (‚âû), absurd, fromJust, mustLookup, report)

eapp :: ùîπ -> E.Expr ùîπ -> E.Expr ùîπ -> E.Expr ùîπ
eapp Œ± f = E.Expr Œ± <<< E.App f

enil :: ùîπ -> E.Expr ùîπ
enil Œ± = E.Expr Œ± $ E.Constr cNil Nil

econs :: ùîπ -> E.Expr ùîπ -> E.Expr ùîπ -> E.Expr ùîπ
econs Œ± e e' = E.Expr Œ± $ E.Constr cCons (e : e' : Nil)

evar :: ùîπ -> Var -> E.Expr ùîπ
evar Œ± = E.Expr Œ± <<< E.Var

class DesugarFwd a b | a -> b where
   desugarFwd :: a -> MayFail b

instance desugarFwdExpr :: DesugarFwd (Expr Boolean) (E.Expr Boolean) where
   desugarFwd (Expr Œ± (Int n))               = pure $ E.Expr Œ± (E.Int n)
   desugarFwd (Expr Œ± (Float n))             = pure $ E.Expr Œ± (E.Float n)
   desugarFwd (Expr Œ± (Var x))               = pure $ E.Expr Œ± (E.Var x)
   desugarFwd (Expr Œ± (Op op))               = pure $ E.Expr Œ± (E.Op op)
   desugarFwd (Expr Œ± (Str s))               = pure $ E.Expr Œ± (E.Str s)
   desugarFwd (Expr Œ± (Constr ctr args))     = E.Expr Œ± <$> (E.Constr ctr <$> traverse desugarFwd args)
   desugarFwd (Expr Œ± (Lambda bs))           = E.Expr Œ± <$> (E.Lambda <$> desugarFwd bs)
   desugarFwd (Expr Œ± (App s1 s2))           = E.Expr Œ± <$> (E.App <$> desugarFwd s1 <*> desugarFwd s2)
   desugarFwd (Expr Œ± (BinaryApp s1 op s2))  = E.Expr Œ± <$> (E.BinaryApp <$> desugarFwd s1 <@> op <*> desugarFwd s2)
   desugarFwd (Expr Œ± (MatchAs s bs))        = E.Expr Œ± <$> (E.App <$> (E.Expr Œ± <$> E.Lambda <$> desugarFwd bs) <*> desugarFwd s)
   -- | The Œ± here is not propagated due to how desugarVarDefs is defined
   desugarFwd (Expr Œ± (Let ds s))            = desugarFwd $ ds √ó s
   desugarFwd (Expr Œ± (LetRec fœÄs s))        = E.Expr Œ± <$> (E.LetRec <$> desugarFwd fœÄs <*> desugarFwd s)
   desugarFwd (Expr Œ± (IfElse s1 s2 s3)) = do
      e2 <- desugarFwd s2
      e3 <- desugarFwd s3
      let œÉ = ElimConstr (fromFoldable [cTrue √ó Body e2, cFalse √ó Body e3])
      E.Expr Œ± <$> (E.App (E.Expr Œ± $ E.Lambda œÉ) <$> desugarFwd s1)
   desugarFwd (Expr Œ± (ListEmpty))           = pure $ enil Œ±
   desugarFwd (Expr Œ± (ListNonEmpty s l))    = lift2 (econs Œ±) (desugarFwd s) (desugarFwd l)
   desugarFwd (Expr Œ± (ListRange s1 s2)) =
      eapp Œ± <$> ((eapp Œ± (evar Œ± "range")) <$> desugarFwd s1) <*> desugarFwd s2
   desugarFwd (Expr Œ±1 (ListComp s_body (NonEmptyList (Qualifier _ (Guard (Expr Œ±2 (Constr c Nil))) :| Nil)))) | c == cTrue = do
      e <- desugarFwd s_body
      pure $ econs (Œ±1 ‚àß Œ±2) e (enil (Œ±1 ‚àß Œ±2))
   desugarFwd (Expr Œ± (ListComp s_body (NonEmptyList (q :| Nil)))) =
      desugarFwd $ Expr Œ± $ ListComp s_body $ NonEmptyList $ q :| (Qualifier Œ± (Guard (Expr Œ± $ Constr cTrue Nil))) : Nil
   -- | The definition of list-comp-guard is different than that of the paper; need to check annotations
   desugarFwd (Expr Œ±2 (ListComp s_body (NonEmptyList ((Qualifier Œ±1 (Guard s)) :| q : qs)))) = do
      e <- desugarFwd $ Expr Œ±2 $ ListComp s_body $ NonEmptyList $ q :| qs
      let œÉ = ElimConstr (fromFoldable [cTrue √ó Body e, cFalse √ó Body (enil (Œ±1 ‚àß Œ±2))])
      E.Expr (Œ±1 ‚àß Œ±2) <$> (E.App (E.Expr (Œ±1 ‚àß Œ±2) $ E.Lambda œÉ) <$> desugarFwd s)
   -- | The definition of list-comp-decl is different than that of the paper; need to check annotations
   desugarFwd (Expr Œ±2 (ListComp s_body (NonEmptyList ((Qualifier Œ±1 (Declaration (p √ó s))) :| q : qs)))) = do
      œÉ <- desugarFwd $ p √ó (None :: Cont ùîπ)
      e <- desugarFwd $ Expr Œ±2 (ListComp s_body (NonEmptyList $ q :| qs))
      E.Expr (Œ±1 ‚àß Œ±2) <$> (E.Let <$> (E.VarDef œÉ <$> desugarFwd s) <*> e)
   desugarFwd (Expr Œ±2 (ListComp s_body (NonEmptyList ((Qualifier Œ±1 (Generator p slist)) :| q : qs)))) = do
      e <- desugarFwd $ Expr Œ±2 $ ListComp s_body $ NonEmptyList $ q :| qs
      œÉ <- desugarFwd $ p √ó Body e
      -- | What annotation should enil have here?
      let Œª = E.Expr (Œ±1 ‚àß Œ±2) $ E.Lambda $ totalise œÉ (enil (Œ±1 ‚àß Œ±2))
      eapp (Œ±1 ‚àß Œ±2) (evar (Œ±1 ‚àß Œ±2) "concat") <$> (eapp (Œ±1 ‚àß Œ±2) (eapp (Œ±1 ‚àß Œ±2) (evar (Œ±1 ‚àß Œ±2) "map") Œª) <$> desugarFwd slist)

totalise :: Elim ùîπ -> E.Expr ùîπ -> Elim ùîπ
totalise (ElimConstr m) e =
   let c √ó Œ∫            = fromJust absurd $ L.head $ toUnfoldable m
       bs               = toUnfoldable m
       DataType _ sigs  = mustLookup c ctrToDataType
       bs'              = (_ √ó Body e) <$> ((fst <$> toUnfoldable sigs) \\ (fst <$> bs))
       bs''             = bs <#> \(c √ó Œ∫) -> case mustLookup c m of
                           Arg œÉ   -> c √ó Arg (totalise œÉ e)
                           Body e' -> c √ó Body e'
                           None    -> c √ó Body e
     in   ElimConstr $ fromFoldable $ bs'' <> bs'
totalise (ElimVar e Œ∫) e' = case Œ∫ of
   Arg œÉ  -> ElimVar e $ Arg $ totalise œÉ e'
   Body _ -> ElimVar e Œ∫
   None   -> ElimVar e $ Body e'