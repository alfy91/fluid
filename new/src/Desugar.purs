module Desugar where

import Prelude hiding (absurd)
import Data.Either (Either(..))
import Data.Foldable (foldM)
import Data.Function (on)
import Data.List (List(..), (:), (\\), length)
import Data.List (head) as L
import Data.List.NonEmpty (NonEmptyList(..), groupBy, head, reverse, toList)
import Data.Map (Map, fromFoldable, insert, lookup, singleton, toUnfoldable, update)
import Data.Map.Internal (keys)
import Data.Maybe (Maybe(..))
import Data.NonEmpty ((:|))
import Data.Traversable (traverse)
import Data.Tuple (Tuple, fst, snd)
import Bindings (Binding, Bindings, (‚Ü¶), fromList)
import DataType (Ctr, DataType, DataType'(..), arity, ctrToDataType, cCons, cNil, cTrue, cFalse, dataTypeFor)
import Expr (Cont(..), Elim(..), Var)
import Expr (Expr(..), Module(..), RawExpr(..), VarDef(..), expr) as E
import Lattice (ùîπ, class BoundedJoinSemilattice, bot)
import Util (
   MayFail, type (√ó), (√ó), type (+), (=<<<), (‚âû), absurd, error, fromJust, mustLookup, report, successfulWith, with
)

data RawExpr a =
   Var Var |
   Op Var |
   Int Int |
   Float Number |
   Str String |
   Constr Ctr (List (Expr a)) |
   Lambda (NonEmptyList (Branch a)) |
   App (Expr a) (Expr a) |
   BinaryApp (Expr a) Var (Expr a) |
   MatchAs (Expr a) (NonEmptyList (Branch a)) |
   IfElse (Expr a) (Expr a) (Expr a) |
   ListRange (Expr a) (Expr a) |
   ListComp (Expr a) (List (Qualifier a)) |
   Let (VarDef a) (Expr a) |
   LetRec (RecDefs a) (Expr a)

data Pattern =
   PVar Var |
   PConstr Ctr (List Pattern)

type Branch a = NonEmptyList Pattern √ó Expr a
type Clause a = Var √ó Branch a
type RecDefs a = NonEmptyList (Clause a)
type VarDef a = Pattern √ó Expr a
type VarDefs a = List (VarDef a)

data Qualifier a =
   Guard (Expr a) |
   Generator Pattern (Expr a) |
   Declaration Pattern (Expr a)

data Expr a =
   Expr a (RawExpr a)

data Module a = Module (List (VarDef a + RecDefs a))

expr :: forall a . BoundedJoinSemilattice a => RawExpr a -> Expr a
expr = Expr bot

eapp :: E.Expr ùîπ -> E.Expr ùîπ -> E.Expr ùîπ
eapp f = E.expr <<< E.App f

enil :: E.Expr ùîπ
enil = E.expr $ E.Constr cNil Nil

evar :: Var -> E.Expr ùîπ
evar = E.expr <<< E.Var

class Desugarable a b where
   desugar :: a -> MayFail b

instance desugarVarDef :: Desugarable (Tuple Pattern (Expr Boolean)) (E.VarDef Boolean) where
   desugar (p √ó s) = E.VarDef (patternToElim p None) <$> desugar s

instance desugarRecDefs :: Desugarable (NonEmptyList (Tuple String (Tuple (NonEmptyList Pattern) (Expr Boolean))))
                                       (Bindings Elim Boolean) where
   desugar fœÄs = pure Œ¥
      where
      fœÄss = groupBy (eq `on` fst) fœÄs :: NonEmptyList (NonEmptyList (Clause ùîπ))
      Œ¥ = fromList $ toList $ reverse $ toRecDef <$> fœÄss

      toRecDef :: NonEmptyList (Clause ùîπ) -> Binding Elim ùîπ
      toRecDef fœÄs' =
         let f = fst $ head fœÄs' in
         f ‚Ü¶ successfulWith ("Bad branches for '" <> f <> "'") (desugar $ snd <$> fœÄs')

instance desugarExpr :: Desugarable (Expr Boolean) (E.Expr Boolean) where
   desugar (Expr Œ± (Int n))               = pure $ E.Expr Œ± (E.Int n)
   desugar (Expr Œ± (Float n))             = pure $ E.Expr Œ± (E.Float n)
   desugar (Expr Œ± (Var x))               = pure $ E.Expr Œ± (E.Var x)
   desugar (Expr Œ± (Op op))               = pure $ E.Expr Œ± (E.Op op)
   desugar (Expr Œ± (Str s))               = pure $ E.Expr Œ± (E.Str s)
   desugar (Expr Œ± (Constr ctr args))     = E.Expr Œ± <$> (E.Constr ctr <$> traverse desugar args)
   desugar (Expr Œ± (Lambda bs))           = E.Expr Œ± <$> (E.Lambda <$> desugar bs)
   desugar (Expr Œ± (App s1 s2))           = E.Expr Œ± <$> (E.App <$> desugar s1 <*> desugar s2)
   desugar (Expr Œ± (BinaryApp s1 op s2))  = E.Expr Œ± <$> (E.BinaryApp <$> desugar s1 <@> op <*> desugar s2)
   desugar (Expr Œ± (MatchAs s bs))        = E.Expr Œ± <$> (E.MatchAs <$> desugar s <*> desugar bs)
   desugar (Expr Œ± (Let d s'))            = E.Expr Œ± <$> (E.Let <$> desugar d <*> desugar s')
   desugar (Expr Œ± (LetRec fœÄs s))        = E.Expr Œ± <$> (E.LetRec <$> desugar fœÄs <*> desugar s)
   desugar (Expr Œ± (IfElse s1 s2 s3)) = do
      e2 <- desugar s2
      e3 <- desugar s3
      let œÉ = ElimConstr (fromFoldable [cTrue √ó Body e2, cFalse √ó Body e3])
      E.Expr Œ± <$> (E.MatchAs <$> desugar s1 <@> œÉ)
   desugar (Expr Œ± (ListRange s1 s2)) =
      eapp <$> (eapp (evar "range") <$> desugar s1) <*> desugar s2
   desugar (Expr Œ± (ListComp s_body (Guard (Expr _ (Constr cTrue Nil)) : Nil))) = do
      e <- desugar s_body
      pure $ E.expr $ E.Constr cCons (e : enil : Nil)
   desugar (Expr Œ± (ListComp s_body (q:Nil))) =
      desugar $ expr $ ListComp s_body $ q : Guard (expr $ Constr cTrue Nil) : Nil
   desugar (Expr Œ± (ListComp s_body (Guard s : qs))) = do
      e <- desugar $ Expr Œ± $ ListComp s_body qs
      let œÉ = ElimConstr (fromFoldable [cTrue √ó Body e, cFalse √ó Body enil])
      E.expr <$> (E.MatchAs <$> desugar s <@> œÉ)
   desugar (Expr Œ± (ListComp s_body (Generator p slist : qs))) = do
      e <- desugar $ expr $ ListComp s_body qs
      let Œª = E.expr $ E.Lambda $ totalise (patternToElim p (Body e)) enil
      eapp (evar "concat") <$> (eapp (eapp (evar "map") Œª) <$> desugar slist)
   desugar (Expr Œ± (ListComp s_body (Declaration p s : qs))) = do
      let œÉ = patternToElim p None
      E.expr <$> (E.Let <$> (E.VarDef œÉ <$> desugar s) <*> desugar (Expr Œ± $ ListComp s_body qs))
   desugar (Expr _ (ListComp _ Nil)) = error absurd

instance desugarModule :: Desugarable (Module Boolean) (E.Module Boolean) where
   desugar (Module Nil) = pure $ E.Module Nil
   desugar (Module (Left d : ds)) = do
      E.Module ds' <- desugar $ Module ds
      d' <- desugar d
      pure $ E.Module $ Left d' : ds'
   desugar (Module (Right fœÄs : ds)) = do
      E.Module ds' <- desugar $ Module ds
      Œ¥ <- desugar fœÄs
      pure $ E.Module $ Right Œ¥ : ds'

patternToElim :: Pattern -> Cont ùîπ -> Elim ùîπ
patternToElim (PVar x) Œ∫
   = ElimVar x Œ∫
patternToElim (PConstr ctr ps) Œ∫
   = let go (p':p'':ps')   = Arg (patternToElim p' (go (p'':ps')))
         go (p':Nil)       = Arg (patternToElim p' Œ∫)
         go Nil            = Œ∫
     in  ElimConstr (singleton ctr (go ps))

totalise :: Elim ùîπ -> E.Expr ùîπ -> Elim ùîπ
totalise (ElimConstr m) e
   = let ctr √ó Œ∫              = fromJust "" (L.head $ toUnfoldable m)
         branches             = toUnfoldable m
         DataType _ sigs      = mustLookup ctr ctrToDataType
         all_ctrs             = fst <$> toUnfoldable sigs
         new_branches         = (_ √ó Body e) <$> (all_ctrs \\ (fst <$> branches))
         totalised_branches   = branches <#>
                                 \(c √ó Œ∫) -> case mustLookup c m of
                                                Arg œÉ   -> c √ó Arg (totalise œÉ e)
                                                Body e' -> c √ó Body e'
                                                None    -> c √ó Body e
     in   ElimConstr (fromFoldable $ totalised_branches <> new_branches)
totalise (ElimVar e k) e'
   = case k of Arg œÉ  -> ElimVar e $ Arg (totalise œÉ e')
               Body _ -> ElimVar e k
               None   -> ElimVar e $ Body e'

toCont :: List Pattern -> Cont ùîπ -> MayFail (Cont ùîπ)
toCont Nil Œ∫        = pure Œ∫
toCont (œÄ : œÄs) Œ∫   = Arg <$> (toCont œÄs Œ∫ >>= toElim2 œÄ)

checkArity :: Ctr -> Int -> MayFail Unit
checkArity c n = void $ with ("Checking arity of " <> show c) $
   arity c `(=<<<) (‚âû)` pure n

dataType :: Map Ctr (Cont ùîπ) -> MayFail DataType
dataType Œ∫s = case keys Œ∫s of
   Nil   -> error absurd
   c : _ -> dataTypeFor c

checkDataType :: String -> Ctr -> Map Ctr (Cont ùîπ) -> MayFail Unit
checkDataType msg c Œ∫s = void $ do
   d <- dataTypeFor c
   d' <- dataType Œ∫s
   if (d /= d')
   then error "***"
   else with (msg <> show c <> " is not a constructor of " <> show d') $ d ‚âû d'

toElim2 :: Pattern -> Cont ùîπ -> MayFail (Elim ùîπ)
toElim2 (PVar x) Œ∫       = pure $ ElimVar x Œ∫
toElim2 (PConstr c œÄs) Œ∫ = checkArity c (length œÄs) *> (ElimConstr <$> singleton c <$> toCont œÄs Œ∫)

toElim :: NonEmptyList Pattern -> Cont ùîπ -> MayFail (Elim ùîπ)
toElim (NonEmptyList (œÄ :| Nil)) Œ∫     = toElim2 œÄ Œ∫
toElim (NonEmptyList (œÄ :| œÄ' : œÄs)) Œ∫ =
   toElim2 œÄ =<< Body <$> E.expr <$> E.Lambda <$> toElim (NonEmptyList $ œÄ' :| œÄs) Œ∫

instance desugarBranches :: Desugarable (NonEmptyList (NonEmptyList Pattern √ó Expr Boolean))
                                        (Elim Boolean) where
   desugar bs = do
      NonEmptyList (œÉ :| œÉs) <- traverse (\(œÄs √ó e) -> (Body <$> desugar e) >>= toElim œÄs) bs
      foldM maybeJoin œÉ œÉs

class Joinable a where
   maybeJoin :: a -> a -> MayFail a

instance joinableElim :: Joinable (Elim Boolean) where
   maybeJoin (ElimVar x Œ∫) (ElimVar y Œ∫')       = ElimVar <$> x ‚âû y <*> maybeJoin Œ∫ Œ∫'
   maybeJoin (ElimConstr Œ∫s) (ElimConstr Œ∫s')   = ElimConstr <$> maybeJoin Œ∫s Œ∫s'
   maybeJoin _ _                                = report "Can't join variable and constructor patterns"

instance joinableCont :: Joinable (Cont Boolean) where
   maybeJoin None None                       = pure None
   maybeJoin (Arg œÉ) (Arg œÉ')                = Arg <$> maybeJoin œÉ œÉ'
   maybeJoin (Body (E.Expr _ (E.Lambda œÉ)))
             (Body (E.Expr _ (E.Lambda œÉ'))) = Body<$> (E.expr <$> (E.Lambda <$> maybeJoin œÉ œÉ'))
   maybeJoin _ _                             = report "Incompatible continuations"

instance joinableMap :: Joinable (Map Ctr (Cont Boolean)) where
   maybeJoin Œ∫s1 Œ∫s2 = do
      foldM maybeUpdate Œ∫s1 (toUnfoldable Œ∫s2 :: List (Ctr √ó Cont ùîπ))
      where
      maybeUpdate :: Map Ctr (Cont ùîπ) -> Ctr √ó Cont ùîπ -> MayFail (Map Ctr (Cont ùîπ))
      maybeUpdate Œ∫s (c √ó Œ∫) =
         case lookup c Œ∫s of
            Nothing -> do
               checkDataType "Non-uniform patterns: " c Œ∫s
               pure $ insert c Œ∫ Œ∫s
            Just Œ∫' ->
               update <$> (const <$> pure <$> maybeJoin Œ∫' Œ∫) <@> c <@> Œ∫s
