// Colours → List a → GraphicsElement
let rects = fun colours ns →
   zipWith (fun (colour, n) → Rect(0, 0, 1, n, colour)) colours ns;

// First component of data (categorical value) currently ignored; values just mapped positionally to colors.
// Can we use Group instead of Viewport here?
// Colours → List (a, Num) → GraphicsElement
let stackedBar = fun colours ns →
   let heights = (map snd ns);
   let subtotals = scanl1 (fun (x, y) → x + y) 0 heights;
   let dims = zip [0, ...subtotals] heights;
   let rects = map
      (fun ((y, height), colour) → Rect(0, y, 1, height, colour))
      (zip dims colours)
   in Viewport(0, 0, 1, last subtotals, "none", 0, Scale(1, 1), Translate(0, 0), Group(rects));

// Bool → Colours → Num → List (a, Num) → GraphicsElement
let barChart = categoricalChart rects;

// For each categorical value of type a, plot a bar chart for the corresponding b-indexed data.
// Bool → Colours → Num → List (a, List (b, Num)) → GraphicsElement
let groupedBarChart = categoricalChart (compose map (flip (barChart False) 0));

// See stackedBar for strong (unjustified) assumption about uniformity of data.
// Bool → Colours → Num → List (a, List (b, Num)) → GraphicsElement
let stackedBarChart = categoricalChart (compose map stackedBar);

// Bit of a hack, but how text fits into our model is a bit unclear at the moment.
// Str → GraphicsElement → GraphicsElement
let caption = fun str Viewport(x, y, w, h, fill, margin, scale, translate, g) →
   let g' = Group([
      Text(x + w / 2, -2, str, "middle", "hanging"), // -3, ugh
      Viewport(0, 0, w, h, fill, margin, scale, translate, g)
   ])
   in Viewport(x, y, w, h, backgroundColour, defaultMargin / 2 + 4, Scale(1, 1), Translate(0, 0), g')
