// x is position of this axis on the other axis.
// Orient → Num → Num → List Cat → GraphicsElement
let catAxis = fun orient x catValues →
   let ys = iterate (length catValues + 1) (fun y → y + 1) 0;
   let ps = map (mkPoint orient x) ys
   in Group([
      Line(head ps, last ps, axisColour, axisStrokeWidth),
      Polymarkers(tail ps, map (const (tick orient axisColour tickLength)) catValues),
      Polymarkers(flip map (tail ps) (fun Point(x, y) → Point(x - 0.5, y)), map (label orient -0.5 0) catValues)
   ]);

// Num → Num → Num → Num → List GraphicsElement → GraphicsElement
let viewport = fun x_start x_finish y_finish margin gs →
   Viewport(0, 0, x_finish - x_start, y_finish, backgroundColour, margin, Scale(1, 1), Translate(0 - x_start, 0), Group(gs));

// Plot a map of x values to lists of (categorical value, y value) pairs. Importantly, assume all data is uniform
// (categorical keys are the same for each x value and are ordered the same each time).
// Bool → Colours → Num → List (Num, List (Cat, Num)) → GraphicsElement
let lineChart = fun withAxes colours x_start data →
   let xs = map fst data;
   let nCat = length (snd (head data));
   // (Num, Colour) → GraphicsElement
   let plot = fun (n, colour) →
      let ps = map (fun (x, kvs) → Point(x, snd (nth n kvs))) data
      in Group([
         Polyline(ps, colour, 1),
         Polymarkers(ps, repeat (length ps) Circle(0, 0, markerRadius, colour))
      ]);
   // List GraphicsElement
   let lines = zipWith plot (iterate nCat (fun n → n + 1) 0) colours;
   let x_finish = last xs;
   let y_finish = max (flip map data (fun (_, kvs) → max (map snd kvs)))
   in match withAxes as {
      True →
         match axis Horiz 0 x_start x_finish as
         (x_axis, x_finish) → match axis Vert x_start 0 y_finish as
         (y_axis, y_finish') → viewport x_start x_finish y_finish' defaultMargin [x_axis, y_axis, ...lines];
      False → viewport x_start x_finish y_finish 0 lines
   };

// Plot a chart of categorical values on the x-axis and renderings of the corresponding a-value on the y-axis.
// (Colours → List a → GraphicsElement) → Bool → Colours → Num → List (Cat, a) → GraphicsElement
let categoricalChart = fun plotValue withAxes colours sep data →
   let gs = stackRight sep (plotValue colours (map snd data));
   let w = length gs;
   let h = max (map height gs)
   in match withAxes as {
      True →
         match catAxis Horiz 0 (map fst data) as
         x_axis → match axis Vert 0 0 h as
         (y_axis, h') → viewport 0 w h' defaultMargin (concat gs [x_axis, y_axis]); // axes on top
      False → viewport 0 w h 0 gs
   };

// Colours → List a → GraphicsElement
let rects = fun colours ns →
   zipWith (fun (colour, n) → Rect(0, 0, 1, n, colour)) colours ns;

// First component of data (categorical value) currently ignored; values just mapped positionally to colors.
// Can we use Group instead of Viewport here?
// Colours → List (a, Num) → GraphicsElement
let stackedBar = fun colours ns →
   let heights = (map snd ns);
   let subtotals = scanl1 (fun (x, y) → x + y) 0 heights;
   let dims = zip [0, ...subtotals] heights;
   let rects = map
      (fun ((y, height), colour) → Rect(0, y, 1, height, colour))
      (zip dims colours)
   in Viewport(0, 0, 1, last subtotals, "none", 0, Scale(1, 1), Translate(0, 0), Group(rects));

// Bool → Colours → Num → List (a, Num) → GraphicsElement
let barChart = categoricalChart rects;

// For each categorical value of type a, plot a bar chart for the corresponding b-indexed data.
// Bool → Colours → Num → List (a, List (b, Num)) → GraphicsElement
let groupedBarChart = categoricalChart (compose map (flip (barChart False) 0));

// See stackedBar for strong (unjustified) assumption about uniformity of data.
// Bool → Colours → Num → List (a, List (b, Num)) → GraphicsElement
let stackedBarChart = categoricalChart (compose map stackedBar);

// Bit of a hack, but how text fits into our model is a bit unclear at the moment.
// Str → GraphicsElement → GraphicsElement
let caption = fun str Viewport(x, y, w, h, fill, margin, scale, translate, g) →
   let g' = Group([
      Text(x + w / 2, -2, str, "middle", "hanging"), // -3, ugh
      Viewport(0, 0, w, h, fill, margin, scale, translate, g)
   ])
   in Viewport(x, y, w, h, backgroundColour, defaultMargin / 2 + 4, Scale(1, 1), Translate(0, 0), g')
