let split Nil = (Nil, Nil);
    split (x : xs) =
      let (ys, zs) = split xs in (x : zs, ys);

    merge xs ys =
       match (xs, ys) as {
          (Nil, _) -> ys;
          (x : xs', Nil) -> xs;
          (x : xs', y : ys') ->
             match x < y as {
                True -> x : merge xs' ys;
                False -> y : merge xs ys'
             }
       };

    mergesort xs =
       match xs as {
          Nil -> xs;
          x : Nil -> xs;
          x : y : _ ->
             let (ys, zs) = split xs in
             merge (mergesort ys) (mergesort zs)
       }
in
mergesort (3 : 1 : 2 : Nil)
